// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: account/v1/front_user.proto

package accountv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FrontLogin_Login_FullMethodName    = "/account.v1.FrontLogin/Login"
	FrontLogin_Register_FullMethodName = "/account.v1.FrontLogin/Register"
	FrontLogin_Logout_FullMethodName   = "/account.v1.FrontLogin/Logout"
)

// FrontLoginClient is the client API for FrontLogin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FrontLoginClient interface {
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginLoginReply, error)
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*LoginLoginReply, error)
	Logout(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*LoginLoginReply, error)
}

type frontLoginClient struct {
	cc grpc.ClientConnInterface
}

func NewFrontLoginClient(cc grpc.ClientConnInterface) FrontLoginClient {
	return &frontLoginClient{cc}
}

func (c *frontLoginClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginLoginReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginLoginReply)
	err := c.cc.Invoke(ctx, FrontLogin_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontLoginClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*LoginLoginReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginLoginReply)
	err := c.cc.Invoke(ctx, FrontLogin_Register_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontLoginClient) Logout(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*LoginLoginReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginLoginReply)
	err := c.cc.Invoke(ctx, FrontLogin_Logout_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FrontLoginServer is the server API for FrontLogin service.
// All implementations must embed UnimplementedFrontLoginServer
// for forward compatibility.
type FrontLoginServer interface {
	Login(context.Context, *LoginRequest) (*LoginLoginReply, error)
	Register(context.Context, *RegisterRequest) (*LoginLoginReply, error)
	Logout(context.Context, *RegisterRequest) (*LoginLoginReply, error)
	mustEmbedUnimplementedFrontLoginServer()
}

// UnimplementedFrontLoginServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFrontLoginServer struct{}

func (UnimplementedFrontLoginServer) Login(context.Context, *LoginRequest) (*LoginLoginReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedFrontLoginServer) Register(context.Context, *RegisterRequest) (*LoginLoginReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedFrontLoginServer) Logout(context.Context, *RegisterRequest) (*LoginLoginReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedFrontLoginServer) mustEmbedUnimplementedFrontLoginServer() {}
func (UnimplementedFrontLoginServer) testEmbeddedByValue()                    {}

// UnsafeFrontLoginServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FrontLoginServer will
// result in compilation errors.
type UnsafeFrontLoginServer interface {
	mustEmbedUnimplementedFrontLoginServer()
}

func RegisterFrontLoginServer(s grpc.ServiceRegistrar, srv FrontLoginServer) {
	// If the following call pancis, it indicates UnimplementedFrontLoginServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FrontLogin_ServiceDesc, srv)
}

func _FrontLogin_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontLoginServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontLogin_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontLoginServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontLogin_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontLoginServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontLogin_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontLoginServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontLogin_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontLoginServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrontLogin_Logout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontLoginServer).Logout(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FrontLogin_ServiceDesc is the grpc.ServiceDesc for FrontLogin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FrontLogin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "account.v1.FrontLogin",
	HandlerType: (*FrontLoginServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _FrontLogin_Login_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _FrontLogin_Register_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _FrontLogin_Logout_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "account/v1/front_user.proto",
}

const (
	User_GetUser_FullMethodName        = "/account.v1.User/GetUser"
	User_UpdateUser_FullMethodName     = "/account.v1.User/UpdateUser"
	User_BindMobile_FullMethodName     = "/account.v1.User/BindMobile"
	User_UnBindMobile_FullMethodName   = "/account.v1.User/UnBindMobile"
	User_ResetPassword_FullMethodName  = "/account.v1.User/ResetPassword"
	User_ChangePassword_FullMethodName = "/account.v1.User/ChangePassword"
	User_Certificate_FullMethodName    = "/account.v1.User/Certificate"
)

// UserClient is the client API for User service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserClient interface {
	GetUser(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetUserReply, error)
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*GetUserReply, error)
	// 绑定手机号
	BindMobile(ctx context.Context, in *BindMobileRequest, opts ...grpc.CallOption) (*LoginLoginReply, error)
	// 解绑手机号
	UnBindMobile(ctx context.Context, in *BindMobileRequest, opts ...grpc.CallOption) (*LoginLoginReply, error)
	// 重设密码接口
	ResetPassword(ctx context.Context, in *ResetPasswordRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 修改密码
	ChangePassword(ctx context.Context, in *ResetPasswordRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 实名认证
	Certificate(ctx context.Context, in *CertificateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type userClient struct {
	cc grpc.ClientConnInterface
}

func NewUserClient(cc grpc.ClientConnInterface) UserClient {
	return &userClient{cc}
}

func (c *userClient) GetUser(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetUserReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserReply)
	err := c.cc.Invoke(ctx, User_GetUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*GetUserReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserReply)
	err := c.cc.Invoke(ctx, User_UpdateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) BindMobile(ctx context.Context, in *BindMobileRequest, opts ...grpc.CallOption) (*LoginLoginReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginLoginReply)
	err := c.cc.Invoke(ctx, User_BindMobile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UnBindMobile(ctx context.Context, in *BindMobileRequest, opts ...grpc.CallOption) (*LoginLoginReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginLoginReply)
	err := c.cc.Invoke(ctx, User_UnBindMobile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) ResetPassword(ctx context.Context, in *ResetPasswordRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, User_ResetPassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) ChangePassword(ctx context.Context, in *ResetPasswordRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, User_ChangePassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) Certificate(ctx context.Context, in *CertificateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, User_Certificate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServer is the server API for User service.
// All implementations must embed UnimplementedUserServer
// for forward compatibility.
type UserServer interface {
	GetUser(context.Context, *emptypb.Empty) (*GetUserReply, error)
	UpdateUser(context.Context, *UpdateUserRequest) (*GetUserReply, error)
	// 绑定手机号
	BindMobile(context.Context, *BindMobileRequest) (*LoginLoginReply, error)
	// 解绑手机号
	UnBindMobile(context.Context, *BindMobileRequest) (*LoginLoginReply, error)
	// 重设密码接口
	ResetPassword(context.Context, *ResetPasswordRequest) (*emptypb.Empty, error)
	// 修改密码
	ChangePassword(context.Context, *ResetPasswordRequest) (*emptypb.Empty, error)
	// 实名认证
	Certificate(context.Context, *CertificateRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedUserServer()
}

// UnimplementedUserServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserServer struct{}

func (UnimplementedUserServer) GetUser(context.Context, *emptypb.Empty) (*GetUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedUserServer) UpdateUser(context.Context, *UpdateUserRequest) (*GetUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedUserServer) BindMobile(context.Context, *BindMobileRequest) (*LoginLoginReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BindMobile not implemented")
}
func (UnimplementedUserServer) UnBindMobile(context.Context, *BindMobileRequest) (*LoginLoginReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnBindMobile not implemented")
}
func (UnimplementedUserServer) ResetPassword(context.Context, *ResetPasswordRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPassword not implemented")
}
func (UnimplementedUserServer) ChangePassword(context.Context, *ResetPasswordRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePassword not implemented")
}
func (UnimplementedUserServer) Certificate(context.Context, *CertificateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Certificate not implemented")
}
func (UnimplementedUserServer) mustEmbedUnimplementedUserServer() {}
func (UnimplementedUserServer) testEmbeddedByValue()              {}

// UnsafeUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServer will
// result in compilation errors.
type UnsafeUserServer interface {
	mustEmbedUnimplementedUserServer()
}

func RegisterUserServer(s grpc.ServiceRegistrar, srv UserServer) {
	// If the following call pancis, it indicates UnimplementedUserServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&User_ServiceDesc, srv)
}

func _User_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetUser(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_BindMobile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BindMobileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).BindMobile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_BindMobile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).BindMobile(ctx, req.(*BindMobileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UnBindMobile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BindMobileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UnBindMobile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_UnBindMobile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UnBindMobile(ctx, req.(*BindMobileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_ResetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).ResetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_ResetPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).ResetPassword(ctx, req.(*ResetPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_ChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).ChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_ChangePassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).ChangePassword(ctx, req.(*ResetPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_Certificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Certificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_Certificate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Certificate(ctx, req.(*CertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// User_ServiceDesc is the grpc.ServiceDesc for User service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var User_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "account.v1.User",
	HandlerType: (*UserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUser",
			Handler:    _User_GetUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _User_UpdateUser_Handler,
		},
		{
			MethodName: "BindMobile",
			Handler:    _User_BindMobile_Handler,
		},
		{
			MethodName: "UnBindMobile",
			Handler:    _User_UnBindMobile_Handler,
		},
		{
			MethodName: "ResetPassword",
			Handler:    _User_ResetPassword_Handler,
		},
		{
			MethodName: "ChangePassword",
			Handler:    _User_ChangePassword_Handler,
		},
		{
			MethodName: "Certificate",
			Handler:    _User_Certificate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "account/v1/front_user.proto",
}

const (
	UserDeliveryAddress_CreateUserDeliveryAddress_FullMethodName = "/account.v1.UserDeliveryAddress/CreateUserDeliveryAddress"
	UserDeliveryAddress_UpdateUserDeliveryAddress_FullMethodName = "/account.v1.UserDeliveryAddress/UpdateUserDeliveryAddress"
	UserDeliveryAddress_GetUserDeliveryAddress_FullMethodName    = "/account.v1.UserDeliveryAddress/GetUserDeliveryAddress"
	UserDeliveryAddress_DeleteUserDeliveryAddress_FullMethodName = "/account.v1.UserDeliveryAddress/DeleteUserDeliveryAddress"
	UserDeliveryAddress_ListUserDeliveryAddress_FullMethodName   = "/account.v1.UserDeliveryAddress/ListUserDeliveryAddress"
)

// UserDeliveryAddressClient is the client API for UserDeliveryAddress service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// UserDeliveryAddress 定义用户收货地址相关的 RPC 服务
type UserDeliveryAddressClient interface {
	// 创建用户地址接口
	CreateUserDeliveryAddress(ctx context.Context, in *CreateUserDeliveryAddressReq, opts ...grpc.CallOption) (*CreateUserDeliveryAddressRes, error)
	// 更新用户地址接口
	UpdateUserDeliveryAddress(ctx context.Context, in *UpdateUserDeliveryAddressReq, opts ...grpc.CallOption) (*UpdateUserDeliveryAddressRes, error)
	// 获取用户地址接口
	GetUserDeliveryAddress(ctx context.Context, in *GetUserDeliveryAddressReq, opts ...grpc.CallOption) (*CreateUserDeliveryAddressRes, error)
	// 删除用户地址接口
	DeleteUserDeliveryAddress(ctx context.Context, in *DeleteUserDeliveryAddressReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 地址列表接口
	ListUserDeliveryAddress(ctx context.Context, in *ListUserDeliveryAddressReq, opts ...grpc.CallOption) (*UserDeliveryAddressListRes, error)
}

type userDeliveryAddressClient struct {
	cc grpc.ClientConnInterface
}

func NewUserDeliveryAddressClient(cc grpc.ClientConnInterface) UserDeliveryAddressClient {
	return &userDeliveryAddressClient{cc}
}

func (c *userDeliveryAddressClient) CreateUserDeliveryAddress(ctx context.Context, in *CreateUserDeliveryAddressReq, opts ...grpc.CallOption) (*CreateUserDeliveryAddressRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateUserDeliveryAddressRes)
	err := c.cc.Invoke(ctx, UserDeliveryAddress_CreateUserDeliveryAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDeliveryAddressClient) UpdateUserDeliveryAddress(ctx context.Context, in *UpdateUserDeliveryAddressReq, opts ...grpc.CallOption) (*UpdateUserDeliveryAddressRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserDeliveryAddressRes)
	err := c.cc.Invoke(ctx, UserDeliveryAddress_UpdateUserDeliveryAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDeliveryAddressClient) GetUserDeliveryAddress(ctx context.Context, in *GetUserDeliveryAddressReq, opts ...grpc.CallOption) (*CreateUserDeliveryAddressRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateUserDeliveryAddressRes)
	err := c.cc.Invoke(ctx, UserDeliveryAddress_GetUserDeliveryAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDeliveryAddressClient) DeleteUserDeliveryAddress(ctx context.Context, in *DeleteUserDeliveryAddressReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, UserDeliveryAddress_DeleteUserDeliveryAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDeliveryAddressClient) ListUserDeliveryAddress(ctx context.Context, in *ListUserDeliveryAddressReq, opts ...grpc.CallOption) (*UserDeliveryAddressListRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserDeliveryAddressListRes)
	err := c.cc.Invoke(ctx, UserDeliveryAddress_ListUserDeliveryAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserDeliveryAddressServer is the server API for UserDeliveryAddress service.
// All implementations must embed UnimplementedUserDeliveryAddressServer
// for forward compatibility.
//
// UserDeliveryAddress 定义用户收货地址相关的 RPC 服务
type UserDeliveryAddressServer interface {
	// 创建用户地址接口
	CreateUserDeliveryAddress(context.Context, *CreateUserDeliveryAddressReq) (*CreateUserDeliveryAddressRes, error)
	// 更新用户地址接口
	UpdateUserDeliveryAddress(context.Context, *UpdateUserDeliveryAddressReq) (*UpdateUserDeliveryAddressRes, error)
	// 获取用户地址接口
	GetUserDeliveryAddress(context.Context, *GetUserDeliveryAddressReq) (*CreateUserDeliveryAddressRes, error)
	// 删除用户地址接口
	DeleteUserDeliveryAddress(context.Context, *DeleteUserDeliveryAddressReq) (*emptypb.Empty, error)
	// 地址列表接口
	ListUserDeliveryAddress(context.Context, *ListUserDeliveryAddressReq) (*UserDeliveryAddressListRes, error)
	mustEmbedUnimplementedUserDeliveryAddressServer()
}

// UnimplementedUserDeliveryAddressServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserDeliveryAddressServer struct{}

func (UnimplementedUserDeliveryAddressServer) CreateUserDeliveryAddress(context.Context, *CreateUserDeliveryAddressReq) (*CreateUserDeliveryAddressRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserDeliveryAddress not implemented")
}
func (UnimplementedUserDeliveryAddressServer) UpdateUserDeliveryAddress(context.Context, *UpdateUserDeliveryAddressReq) (*UpdateUserDeliveryAddressRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserDeliveryAddress not implemented")
}
func (UnimplementedUserDeliveryAddressServer) GetUserDeliveryAddress(context.Context, *GetUserDeliveryAddressReq) (*CreateUserDeliveryAddressRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserDeliveryAddress not implemented")
}
func (UnimplementedUserDeliveryAddressServer) DeleteUserDeliveryAddress(context.Context, *DeleteUserDeliveryAddressReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserDeliveryAddress not implemented")
}
func (UnimplementedUserDeliveryAddressServer) ListUserDeliveryAddress(context.Context, *ListUserDeliveryAddressReq) (*UserDeliveryAddressListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserDeliveryAddress not implemented")
}
func (UnimplementedUserDeliveryAddressServer) mustEmbedUnimplementedUserDeliveryAddressServer() {}
func (UnimplementedUserDeliveryAddressServer) testEmbeddedByValue()                             {}

// UnsafeUserDeliveryAddressServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserDeliveryAddressServer will
// result in compilation errors.
type UnsafeUserDeliveryAddressServer interface {
	mustEmbedUnimplementedUserDeliveryAddressServer()
}

func RegisterUserDeliveryAddressServer(s grpc.ServiceRegistrar, srv UserDeliveryAddressServer) {
	// If the following call pancis, it indicates UnimplementedUserDeliveryAddressServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserDeliveryAddress_ServiceDesc, srv)
}

func _UserDeliveryAddress_CreateUserDeliveryAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserDeliveryAddressReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDeliveryAddressServer).CreateUserDeliveryAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserDeliveryAddress_CreateUserDeliveryAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDeliveryAddressServer).CreateUserDeliveryAddress(ctx, req.(*CreateUserDeliveryAddressReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDeliveryAddress_UpdateUserDeliveryAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserDeliveryAddressReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDeliveryAddressServer).UpdateUserDeliveryAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserDeliveryAddress_UpdateUserDeliveryAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDeliveryAddressServer).UpdateUserDeliveryAddress(ctx, req.(*UpdateUserDeliveryAddressReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDeliveryAddress_GetUserDeliveryAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserDeliveryAddressReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDeliveryAddressServer).GetUserDeliveryAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserDeliveryAddress_GetUserDeliveryAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDeliveryAddressServer).GetUserDeliveryAddress(ctx, req.(*GetUserDeliveryAddressReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDeliveryAddress_DeleteUserDeliveryAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserDeliveryAddressReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDeliveryAddressServer).DeleteUserDeliveryAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserDeliveryAddress_DeleteUserDeliveryAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDeliveryAddressServer).DeleteUserDeliveryAddress(ctx, req.(*DeleteUserDeliveryAddressReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDeliveryAddress_ListUserDeliveryAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserDeliveryAddressReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDeliveryAddressServer).ListUserDeliveryAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserDeliveryAddress_ListUserDeliveryAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDeliveryAddressServer).ListUserDeliveryAddress(ctx, req.(*ListUserDeliveryAddressReq))
	}
	return interceptor(ctx, in, info, handler)
}

// UserDeliveryAddress_ServiceDesc is the grpc.ServiceDesc for UserDeliveryAddress service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserDeliveryAddress_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "account.v1.UserDeliveryAddress",
	HandlerType: (*UserDeliveryAddressServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUserDeliveryAddress",
			Handler:    _UserDeliveryAddress_CreateUserDeliveryAddress_Handler,
		},
		{
			MethodName: "UpdateUserDeliveryAddress",
			Handler:    _UserDeliveryAddress_UpdateUserDeliveryAddress_Handler,
		},
		{
			MethodName: "GetUserDeliveryAddress",
			Handler:    _UserDeliveryAddress_GetUserDeliveryAddress_Handler,
		},
		{
			MethodName: "DeleteUserDeliveryAddress",
			Handler:    _UserDeliveryAddress_DeleteUserDeliveryAddress_Handler,
		},
		{
			MethodName: "ListUserDeliveryAddress",
			Handler:    _UserDeliveryAddress_ListUserDeliveryAddress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "account/v1/front_user.proto",
}
