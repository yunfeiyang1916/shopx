// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: account/v1/front_user.proto

package accountv1

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	v1 "shopx/api/gen/base/v1"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LoginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	// 验证码
	VerifyCode string `protobuf:"bytes,3,opt,name=verify_code,json=verifyCode,proto3" json:"verify_code,omitempty"`
	// 验证码key
	VerifyKey string `protobuf:"bytes,4,opt,name=verify_key,json=verifyKey,proto3" json:"verify_key,omitempty"`
	// 密码是否加密
	Encrypt bool `protobuf:"varint,5,opt,name=encrypt,proto3" json:"encrypt,omitempty"`
}

func (x *LoginRequest) Reset() {
	*x = LoginRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_v1_front_user_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginRequest) ProtoMessage() {}

func (x *LoginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_account_v1_front_user_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginRequest.ProtoReflect.Descriptor instead.
func (*LoginRequest) Descriptor() ([]byte, []int) {
	return file_account_v1_front_user_proto_rawDescGZIP(), []int{0}
}

func (x *LoginRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *LoginRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *LoginRequest) GetVerifyCode() string {
	if x != nil {
		return x.VerifyCode
	}
	return ""
}

func (x *LoginRequest) GetVerifyKey() string {
	if x != nil {
		return x.VerifyKey
	}
	return ""
}

func (x *LoginRequest) GetEncrypt() bool {
	if x != nil {
		return x.Encrypt
	}
	return false
}

type LoginLoginReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token  string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	UserId string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *LoginLoginReply) Reset() {
	*x = LoginLoginReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_v1_front_user_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginLoginReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginLoginReply) ProtoMessage() {}

func (x *LoginLoginReply) ProtoReflect() protoreflect.Message {
	mi := &file_account_v1_front_user_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginLoginReply.ProtoReflect.Descriptor instead.
func (*LoginLoginReply) Descriptor() ([]byte, []int) {
	return file_account_v1_front_user_proto_rawDescGZIP(), []int{1}
}

func (x *LoginLoginReply) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *LoginLoginReply) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type RegisterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAccount string `protobuf:"bytes,1,opt,name=user_account,json=userAccount,proto3" json:"user_account,omitempty"`
	Password    string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	// 验证码
	VerifyCode string `protobuf:"bytes,3,opt,name=verify_code,json=verifyCode,proto3" json:"verify_code,omitempty"`
	// 验证码key
	VerifyKey string `protobuf:"bytes,4,opt,name=verify_key,json=verifyKey,proto3" json:"verify_key,omitempty"`
	// 密码是否加密
	Encrypt bool `protobuf:"varint,5,opt,name=encrypt,proto3" json:"encrypt,omitempty"`
	// 注册方式=>BindConnectCode
	BindType int32 `protobuf:"varint,6,opt,name=bind_type,json=bindType,proto3" json:"bind_type,omitempty"`
	// 活动编号
	ActivityId int32 `protobuf:"varint,7,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
	// 来源用户编号
	SourceUserId uint32 `protobuf:"varint,8,opt,name=source_user_id,json=sourceUserId,proto3" json:"source_user_id,omitempty"`
	// 渠道码
	SourceUccCode string `protobuf:"bytes,9,opt,name=source_ucc_code,json=sourceUccCode,proto3" json:"source_ucc_code,omitempty"`
}

func (x *RegisterRequest) Reset() {
	*x = RegisterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_v1_front_user_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterRequest) ProtoMessage() {}

func (x *RegisterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_account_v1_front_user_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterRequest.ProtoReflect.Descriptor instead.
func (*RegisterRequest) Descriptor() ([]byte, []int) {
	return file_account_v1_front_user_proto_rawDescGZIP(), []int{2}
}

func (x *RegisterRequest) GetUserAccount() string {
	if x != nil {
		return x.UserAccount
	}
	return ""
}

func (x *RegisterRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *RegisterRequest) GetVerifyCode() string {
	if x != nil {
		return x.VerifyCode
	}
	return ""
}

func (x *RegisterRequest) GetVerifyKey() string {
	if x != nil {
		return x.VerifyKey
	}
	return ""
}

func (x *RegisterRequest) GetEncrypt() bool {
	if x != nil {
		return x.Encrypt
	}
	return false
}

func (x *RegisterRequest) GetBindType() int32 {
	if x != nil {
		return x.BindType
	}
	return 0
}

func (x *RegisterRequest) GetActivityId() int32 {
	if x != nil {
		return x.ActivityId
	}
	return 0
}

func (x *RegisterRequest) GetSourceUserId() uint32 {
	if x != nil {
		return x.SourceUserId
	}
	return 0
}

func (x *RegisterRequest) GetSourceUccCode() string {
	if x != nil {
		return x.SourceUccCode
	}
	return ""
}

type GetUserReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 用户编号
	UserId uint32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// 用户账号
	UserAccount string `protobuf:"bytes,2,opt,name=user_account,json=userAccount,proto3" json:"user_account,omitempty"`
	// 用户昵称
	UserNickname string `protobuf:"bytes,3,opt,name=user_nickname,json=userNickname,proto3" json:"user_nickname,omitempty"`
	// 用户头像
	UserAvatar string `protobuf:"bytes,4,opt,name=user_avatar,json=userAvatar,proto3" json:"user_avatar,omitempty"`
	// 状态(ENUM):0-锁定;1-已激活;2-未激活;
	UserState uint32 `protobuf:"varint,5,opt,name=user_state,json=userState,proto3" json:"user_state,omitempty"`
	// 手机号码(mobile)
	UserMobile string `protobuf:"bytes,6,opt,name=user_mobile,json=userMobile,proto3" json:"user_mobile,omitempty"`
	// 国家编码
	UserIntl string `protobuf:"bytes,7,opt,name=user_intl,json=userIntl,proto3" json:"user_intl,omitempty"`
	// 性别(ENUM):0-保密;1-男;  2-女;
	UserGender uint32 `protobuf:"varint,8,opt,name=user_gender,json=userGender,proto3" json:"user_gender,omitempty"`
	// 生日(DATE)
	UserBirthday *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=user_birthday,json=userBirthday,proto3" json:"user_birthday,omitempty"`
	// 用户邮箱(email)
	UserEmail string `protobuf:"bytes,10,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	// 等级编号
	UserLevelId uint32 `protobuf:"varint,11,opt,name=user_level_id,json=userLevelId,proto3" json:"user_level_id,omitempty"`
	// 真实姓名
	UserRealname string `protobuf:"bytes,12,opt,name=user_realname,json=userRealname,proto3" json:"user_realname,omitempty"`
	// 身份证
	UserIdcard string `protobuf:"bytes,13,opt,name=user_idcard,json=userIdcard,proto3" json:"user_idcard,omitempty"`
	// 身份证图片(DTO)
	UserIdcardImages string `protobuf:"bytes,14,opt,name=user_idcard_images,json=userIdcardImages,proto3" json:"user_idcard_images,omitempty"`
	// 认证状态(ENUM):0-未认证;1-待审核;2-认证通过;3-认证失败
	UserIsAuthentication uint32 `protobuf:"varint,15,opt,name=user_is_authentication,json=userIsAuthentication,proto3" json:"user_is_authentication,omitempty"`
	// 用户标签(DOT)
	TagIds string `protobuf:"bytes,16,opt,name=tag_ids,json=tagIds,proto3" json:"tag_ids,omitempty"`
	// 用户来源(ENUM):2310-其它;2311-pc;2312-H5;2313-APP;2314-小程序;2315-公众号
	UserFrom uint32 `protobuf:"varint,17,opt,name=user_from,json=userFrom,proto3" json:"user_from,omitempty"`
	// 新人标识(BOOL):0-不是;1-是
	UserNew bool `protobuf:"varint,18,opt,name=user_new,json=userNew,proto3" json:"user_new,omitempty"`
	// 身份证图片(DOT)
	UserIdcardImageList []string `protobuf:"bytes,19,rep,name=user_idcard_image_list,json=userIdcardImageList,proto3" json:"user_idcard_image_list,omitempty"`
	// 货币编号
	CurrencyId uint32 `protobuf:"varint,20,opt,name=currency_id,json=currencyId,proto3" json:"currency_id,omitempty"`
	// 左符号
	CurrencySymbolLeft string `protobuf:"bytes,21,opt,name=currency_symbol_left,json=currencySymbolLeft,proto3" json:"currency_symbol_left,omitempty"`
	// 用户资金
	UserMoney float64 `protobuf:"fixed64,22,opt,name=user_money,json=userMoney,proto3" json:"user_money,omitempty"`
	// 冻结资金:待结算余额
	UserMoneyFrozen float64 `protobuf:"fixed64,23,opt,name=user_money_frozen,json=userMoneyFrozen,proto3" json:"user_money_frozen,omitempty"`
	// 充值卡余额
	UserRechargeCard float64 `protobuf:"fixed64,24,opt,name=user_recharge_card,json=userRechargeCard,proto3" json:"user_recharge_card,omitempty"`
	// 冻结充值卡:待结算
	UserRechargeCardFrozen float64 `protobuf:"fixed64,25,opt,name=user_recharge_card_frozen,json=userRechargeCardFrozen,proto3" json:"user_recharge_card_frozen,omitempty"`
	// 积分
	UserPoints float64 `protobuf:"fixed64,26,opt,name=user_points,json=userPoints,proto3" json:"user_points,omitempty"`
	// 冻结积分
	UserPointsFrozen float64 `protobuf:"fixed64,27,opt,name=user_points_frozen,json=userPointsFrozen,proto3" json:"user_points_frozen,omitempty"`
	// 经验值
	UserExp float64 `protobuf:"fixed64,28,opt,name=user_exp,json=userExp,proto3" json:"user_exp,omitempty"`
	// 可用信用
	UserCredit float64 `protobuf:"fixed64,29,opt,name=user_credit,json=userCredit,proto3" json:"user_credit,omitempty"`
	// 冻结额度
	UserCreditFrozen float64 `protobuf:"fixed64,30,opt,name=user_credit_frozen,json=userCreditFrozen,proto3" json:"user_credit_frozen,omitempty"`
	// 使用信用
	UserCreditUsed float64 `protobuf:"fixed64,31,opt,name=user_credit_used,json=userCreditUsed,proto3" json:"user_credit_used,omitempty"`
	// 信用额度
	UserCreditTotal float64 `protobuf:"fixed64,32,opt,name=user_credit_total,json=userCreditTotal,proto3" json:"user_credit_total,omitempty"`
	// 保证金
	UserMargin float64 `protobuf:"fixed64,33,opt,name=user_margin,json=userMargin,proto3" json:"user_margin,omitempty"`
	// 红包额度
	UserRedpack float64 `protobuf:"fixed64,34,opt,name=user_redpack,json=userRedpack,proto3" json:"user_redpack,omitempty"`
	// 红包冻结额度
	UserRedpackFrozen float64 `protobuf:"fixed64,35,opt,name=user_redpack_frozen,json=userRedpackFrozen,proto3" json:"user_redpack_frozen,omitempty"`
	// 权限列表
	Permissions []string `protobuf:"bytes,36,rep,name=permissions,proto3" json:"permissions,omitempty"`
	// 角色列表
	Roles []string `protobuf:"bytes,37,rep,name=roles,proto3" json:"roles,omitempty"`
	// 角色编号:0-用户;2-商家;3-门店;9-平台;
	RoleId uint32 `protobuf:"varint,38,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
	// 分站编号:0-总站
	SiteId uint32 `protobuf:"varint,39,opt,name=site_id,json=siteId,proto3" json:"site_id,omitempty"`
	// 店铺编号
	StoreId uint32 `protobuf:"varint,40,opt,name=store_id,json=storeId,proto3" json:"store_id,omitempty"`
	// 门店编号
	ChainId uint32 `protobuf:"varint,41,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// 后台管理:admin=1;移动端front=0
	ClientId uint32 `protobuf:"varint,42,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	// 详细地址
	UdAddress string `protobuf:"bytes,43,opt,name=ud_address,json=udAddress,proto3" json:"ud_address,omitempty"`
	// 等级名称
	UserLevelName string `protobuf:"bytes,44,opt,name=user_level_name,json=userLevelName,proto3" json:"user_level_name,omitempty"`
	// 注册时间
	UserRegTime *timestamppb.Timestamp `protobuf:"bytes,45,opt,name=user_reg_time,json=userRegTime,proto3" json:"user_reg_time,omitempty"`
	// 登录时间
	UserLoginTime *timestamppb.Timestamp `protobuf:"bytes,46,opt,name=user_login_time,json=userLoginTime,proto3" json:"user_login_time,omitempty"`
	// 标签标题(DOT)
	TagTitles string `protobuf:"bytes,47,opt,name=tag_titles,json=tagTitles,proto3" json:"tag_titles,omitempty"`
	// 标签标题(DOT)
	TagTitleList []string `protobuf:"bytes,48,rep,name=tag_title_list,json=tagTitleList,proto3" json:"tag_title_list,omitempty"`
	// 分组名称(DOT)
	TagGroupNames string `protobuf:"bytes,49,opt,name=tag_group_names,json=tagGroupNames,proto3" json:"tag_group_names,omitempty"`
	// 用户标签(DOT)
	TagIdsDuplicate string `protobuf:"bytes,50,opt,name=tag_ids_duplicate,json=tagIdsDuplicate,proto3" json:"tag_ids_duplicate,omitempty"`
	// 本月订单
	MonthOrder int64 `protobuf:"varint,51,opt,name=month_order,json=monthOrder,proto3" json:"month_order,omitempty"`
	// 总计订单
	TotalOrder int64 `protobuf:"varint,52,opt,name=total_order,json=totalOrder,proto3" json:"total_order,omitempty"`
	// 本月消费金额
	MonthTrade float64 `protobuf:"fixed64,53,opt,name=month_trade,json=monthTrade,proto3" json:"month_trade,omitempty"`
	// 总消费金额
	TotalTrade float64 `protobuf:"fixed64,54,opt,name=total_trade,json=totalTrade,proto3" json:"total_trade,omitempty"`
	// 优惠券数量
	Voucher int64 `protobuf:"varint,55,opt,name=voucher,proto3" json:"voucher,omitempty"`
	// 待付款数量
	WaitPayNum int64 `protobuf:"varint,56,opt,name=wait_pay_num,json=waitPayNum,proto3" json:"wait_pay_num,omitempty"`
	// 收藏数量
	FavoritesGoodsNum int64 `protobuf:"varint,57,opt,name=favorites_goods_num,json=favoritesGoodsNum,proto3" json:"favorites_goods_num,omitempty"`
	// 关注数量
	ConcernNum int64 `protobuf:"varint,58,opt,name=concern_num,json=concernNum,proto3" json:"concern_num,omitempty"`
	// 未读消息数量
	UnreadNumber int32 `protobuf:"varint,59,opt,name=unread_number,json=unreadNumber,proto3" json:"unread_number,omitempty"`
	// 佣金总额:历史总额度
	CommissionAmount float64 `protobuf:"fixed64,60,opt,name=commission_amount,json=commissionAmount,proto3" json:"commission_amount,omitempty"`
	// 累计佣金
	UserCommissionNow float64 `protobuf:"fixed64,61,opt,name=user_commission_now,json=userCommissionNow,proto3" json:"user_commission_now,omitempty"`
	// 本月预估收益
	MonthCommissionBuy float64 `protobuf:"fixed64,62,opt,name=month_commission_buy,json=monthCommissionBuy,proto3" json:"month_commission_buy,omitempty"`
	// 上级用户编号
	UserParentId uint32 `protobuf:"varint,63,opt,name=user_parent_id,json=userParentId,proto3" json:"user_parent_id,omitempty"`
}

func (x *GetUserReply) Reset() {
	*x = GetUserReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_v1_front_user_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserReply) ProtoMessage() {}

func (x *GetUserReply) ProtoReflect() protoreflect.Message {
	mi := &file_account_v1_front_user_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserReply.ProtoReflect.Descriptor instead.
func (*GetUserReply) Descriptor() ([]byte, []int) {
	return file_account_v1_front_user_proto_rawDescGZIP(), []int{3}
}

func (x *GetUserReply) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetUserReply) GetUserAccount() string {
	if x != nil {
		return x.UserAccount
	}
	return ""
}

func (x *GetUserReply) GetUserNickname() string {
	if x != nil {
		return x.UserNickname
	}
	return ""
}

func (x *GetUserReply) GetUserAvatar() string {
	if x != nil {
		return x.UserAvatar
	}
	return ""
}

func (x *GetUserReply) GetUserState() uint32 {
	if x != nil {
		return x.UserState
	}
	return 0
}

func (x *GetUserReply) GetUserMobile() string {
	if x != nil {
		return x.UserMobile
	}
	return ""
}

func (x *GetUserReply) GetUserIntl() string {
	if x != nil {
		return x.UserIntl
	}
	return ""
}

func (x *GetUserReply) GetUserGender() uint32 {
	if x != nil {
		return x.UserGender
	}
	return 0
}

func (x *GetUserReply) GetUserBirthday() *timestamppb.Timestamp {
	if x != nil {
		return x.UserBirthday
	}
	return nil
}

func (x *GetUserReply) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *GetUserReply) GetUserLevelId() uint32 {
	if x != nil {
		return x.UserLevelId
	}
	return 0
}

func (x *GetUserReply) GetUserRealname() string {
	if x != nil {
		return x.UserRealname
	}
	return ""
}

func (x *GetUserReply) GetUserIdcard() string {
	if x != nil {
		return x.UserIdcard
	}
	return ""
}

func (x *GetUserReply) GetUserIdcardImages() string {
	if x != nil {
		return x.UserIdcardImages
	}
	return ""
}

func (x *GetUserReply) GetUserIsAuthentication() uint32 {
	if x != nil {
		return x.UserIsAuthentication
	}
	return 0
}

func (x *GetUserReply) GetTagIds() string {
	if x != nil {
		return x.TagIds
	}
	return ""
}

func (x *GetUserReply) GetUserFrom() uint32 {
	if x != nil {
		return x.UserFrom
	}
	return 0
}

func (x *GetUserReply) GetUserNew() bool {
	if x != nil {
		return x.UserNew
	}
	return false
}

func (x *GetUserReply) GetUserIdcardImageList() []string {
	if x != nil {
		return x.UserIdcardImageList
	}
	return nil
}

func (x *GetUserReply) GetCurrencyId() uint32 {
	if x != nil {
		return x.CurrencyId
	}
	return 0
}

func (x *GetUserReply) GetCurrencySymbolLeft() string {
	if x != nil {
		return x.CurrencySymbolLeft
	}
	return ""
}

func (x *GetUserReply) GetUserMoney() float64 {
	if x != nil {
		return x.UserMoney
	}
	return 0
}

func (x *GetUserReply) GetUserMoneyFrozen() float64 {
	if x != nil {
		return x.UserMoneyFrozen
	}
	return 0
}

func (x *GetUserReply) GetUserRechargeCard() float64 {
	if x != nil {
		return x.UserRechargeCard
	}
	return 0
}

func (x *GetUserReply) GetUserRechargeCardFrozen() float64 {
	if x != nil {
		return x.UserRechargeCardFrozen
	}
	return 0
}

func (x *GetUserReply) GetUserPoints() float64 {
	if x != nil {
		return x.UserPoints
	}
	return 0
}

func (x *GetUserReply) GetUserPointsFrozen() float64 {
	if x != nil {
		return x.UserPointsFrozen
	}
	return 0
}

func (x *GetUserReply) GetUserExp() float64 {
	if x != nil {
		return x.UserExp
	}
	return 0
}

func (x *GetUserReply) GetUserCredit() float64 {
	if x != nil {
		return x.UserCredit
	}
	return 0
}

func (x *GetUserReply) GetUserCreditFrozen() float64 {
	if x != nil {
		return x.UserCreditFrozen
	}
	return 0
}

func (x *GetUserReply) GetUserCreditUsed() float64 {
	if x != nil {
		return x.UserCreditUsed
	}
	return 0
}

func (x *GetUserReply) GetUserCreditTotal() float64 {
	if x != nil {
		return x.UserCreditTotal
	}
	return 0
}

func (x *GetUserReply) GetUserMargin() float64 {
	if x != nil {
		return x.UserMargin
	}
	return 0
}

func (x *GetUserReply) GetUserRedpack() float64 {
	if x != nil {
		return x.UserRedpack
	}
	return 0
}

func (x *GetUserReply) GetUserRedpackFrozen() float64 {
	if x != nil {
		return x.UserRedpackFrozen
	}
	return 0
}

func (x *GetUserReply) GetPermissions() []string {
	if x != nil {
		return x.Permissions
	}
	return nil
}

func (x *GetUserReply) GetRoles() []string {
	if x != nil {
		return x.Roles
	}
	return nil
}

func (x *GetUserReply) GetRoleId() uint32 {
	if x != nil {
		return x.RoleId
	}
	return 0
}

func (x *GetUserReply) GetSiteId() uint32 {
	if x != nil {
		return x.SiteId
	}
	return 0
}

func (x *GetUserReply) GetStoreId() uint32 {
	if x != nil {
		return x.StoreId
	}
	return 0
}

func (x *GetUserReply) GetChainId() uint32 {
	if x != nil {
		return x.ChainId
	}
	return 0
}

func (x *GetUserReply) GetClientId() uint32 {
	if x != nil {
		return x.ClientId
	}
	return 0
}

func (x *GetUserReply) GetUdAddress() string {
	if x != nil {
		return x.UdAddress
	}
	return ""
}

func (x *GetUserReply) GetUserLevelName() string {
	if x != nil {
		return x.UserLevelName
	}
	return ""
}

func (x *GetUserReply) GetUserRegTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UserRegTime
	}
	return nil
}

func (x *GetUserReply) GetUserLoginTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UserLoginTime
	}
	return nil
}

func (x *GetUserReply) GetTagTitles() string {
	if x != nil {
		return x.TagTitles
	}
	return ""
}

func (x *GetUserReply) GetTagTitleList() []string {
	if x != nil {
		return x.TagTitleList
	}
	return nil
}

func (x *GetUserReply) GetTagGroupNames() string {
	if x != nil {
		return x.TagGroupNames
	}
	return ""
}

func (x *GetUserReply) GetTagIdsDuplicate() string {
	if x != nil {
		return x.TagIdsDuplicate
	}
	return ""
}

func (x *GetUserReply) GetMonthOrder() int64 {
	if x != nil {
		return x.MonthOrder
	}
	return 0
}

func (x *GetUserReply) GetTotalOrder() int64 {
	if x != nil {
		return x.TotalOrder
	}
	return 0
}

func (x *GetUserReply) GetMonthTrade() float64 {
	if x != nil {
		return x.MonthTrade
	}
	return 0
}

func (x *GetUserReply) GetTotalTrade() float64 {
	if x != nil {
		return x.TotalTrade
	}
	return 0
}

func (x *GetUserReply) GetVoucher() int64 {
	if x != nil {
		return x.Voucher
	}
	return 0
}

func (x *GetUserReply) GetWaitPayNum() int64 {
	if x != nil {
		return x.WaitPayNum
	}
	return 0
}

func (x *GetUserReply) GetFavoritesGoodsNum() int64 {
	if x != nil {
		return x.FavoritesGoodsNum
	}
	return 0
}

func (x *GetUserReply) GetConcernNum() int64 {
	if x != nil {
		return x.ConcernNum
	}
	return 0
}

func (x *GetUserReply) GetUnreadNumber() int32 {
	if x != nil {
		return x.UnreadNumber
	}
	return 0
}

func (x *GetUserReply) GetCommissionAmount() float64 {
	if x != nil {
		return x.CommissionAmount
	}
	return 0
}

func (x *GetUserReply) GetUserCommissionNow() float64 {
	if x != nil {
		return x.UserCommissionNow
	}
	return 0
}

func (x *GetUserReply) GetMonthCommissionBuy() float64 {
	if x != nil {
		return x.MonthCommissionBuy
	}
	return 0
}

func (x *GetUserReply) GetUserParentId() uint32 {
	if x != nil {
		return x.UserParentId
	}
	return 0
}

type UpdateUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 用户编号
	UserId uint32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// 用户昵称
	UserNickname string `protobuf:"bytes,2,opt,name=user_nickname,json=userNickname,proto3" json:"user_nickname,omitempty"`
	// 用户头像
	UserAvatar string `protobuf:"bytes,3,opt,name=user_avatar,json=userAvatar,proto3" json:"user_avatar,omitempty"`
	// 用户邮箱(email)
	UserEmail string `protobuf:"bytes,4,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	// 生日(DATE)
	UserBirthday *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=user_birthday,json=userBirthday,proto3" json:"user_birthday,omitempty"`
}

func (x *UpdateUserRequest) Reset() {
	*x = UpdateUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_v1_front_user_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserRequest) ProtoMessage() {}

func (x *UpdateUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_account_v1_front_user_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserRequest.ProtoReflect.Descriptor instead.
func (*UpdateUserRequest) Descriptor() ([]byte, []int) {
	return file_account_v1_front_user_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateUserRequest) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UpdateUserRequest) GetUserNickname() string {
	if x != nil {
		return x.UserNickname
	}
	return ""
}

func (x *UpdateUserRequest) GetUserAvatar() string {
	if x != nil {
		return x.UserAvatar
	}
	return ""
}

func (x *UpdateUserRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *UpdateUserRequest) GetUserBirthday() *timestamppb.Timestamp {
	if x != nil {
		return x.UserBirthday
	}
	return nil
}

type BindMobileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 验证码
	VerifyCode string `protobuf:"bytes,1,opt,name=verify_code,json=verifyCode,proto3" json:"verify_code,omitempty"`
	// 验证码 KEY
	VerifyKey string `protobuf:"bytes,2,opt,name=verify_key,json=verifyKey,proto3" json:"verify_key,omitempty"`
}

func (x *BindMobileRequest) Reset() {
	*x = BindMobileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_v1_front_user_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BindMobileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BindMobileRequest) ProtoMessage() {}

func (x *BindMobileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_account_v1_front_user_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BindMobileRequest.ProtoReflect.Descriptor instead.
func (*BindMobileRequest) Descriptor() ([]byte, []int) {
	return file_account_v1_front_user_proto_rawDescGZIP(), []int{5}
}

func (x *BindMobileRequest) GetVerifyCode() string {
	if x != nil {
		return x.VerifyCode
	}
	return ""
}

func (x *BindMobileRequest) GetVerifyKey() string {
	if x != nil {
		return x.VerifyKey
	}
	return ""
}

type ResetPasswordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 用户密码
	Password string `protobuf:"bytes,1,opt,name=password,proto3" json:"password,omitempty"`
	// 用户旧密码
	OldPassword string `protobuf:"bytes,2,opt,name=old_password,json=oldPassword,proto3" json:"old_password,omitempty"`
	// 验证码
	VerifyCode string `protobuf:"bytes,3,opt,name=verify_code,json=verifyCode,proto3" json:"verify_code,omitempty"`
	// 验证码 KEY
	VerifyKey string `protobuf:"bytes,4,opt,name=verify_key,json=verifyKey,proto3" json:"verify_key,omitempty"`
	// 密码是否加密
	Encrypt bool `protobuf:"varint,5,opt,name=encrypt,proto3" json:"encrypt,omitempty"`
	// 注册方式=>BindConnectCode
	BindType uint32 `protobuf:"varint,6,opt,name=bind_type,json=bindType,proto3" json:"bind_type,omitempty"`
}

func (x *ResetPasswordRequest) Reset() {
	*x = ResetPasswordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_v1_front_user_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetPasswordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetPasswordRequest) ProtoMessage() {}

func (x *ResetPasswordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_account_v1_front_user_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetPasswordRequest.ProtoReflect.Descriptor instead.
func (*ResetPasswordRequest) Descriptor() ([]byte, []int) {
	return file_account_v1_front_user_proto_rawDescGZIP(), []int{6}
}

func (x *ResetPasswordRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *ResetPasswordRequest) GetOldPassword() string {
	if x != nil {
		return x.OldPassword
	}
	return ""
}

func (x *ResetPasswordRequest) GetVerifyCode() string {
	if x != nil {
		return x.VerifyCode
	}
	return ""
}

func (x *ResetPasswordRequest) GetVerifyKey() string {
	if x != nil {
		return x.VerifyKey
	}
	return ""
}

func (x *ResetPasswordRequest) GetEncrypt() bool {
	if x != nil {
		return x.Encrypt
	}
	return false
}

func (x *ResetPasswordRequest) GetBindType() uint32 {
	if x != nil {
		return x.BindType
	}
	return 0
}

type CertificateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 用户编号
	UserId uint32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// 真实姓名
	UserRealname string `protobuf:"bytes,2,opt,name=user_realname,json=userRealname,proto3" json:"user_realname,omitempty"`
	// 身份证
	UserIdcard string `protobuf:"bytes,3,opt,name=user_idcard,json=userIdcard,proto3" json:"user_idcard,omitempty"`
	// 身份证图片(DTO)
	UserIdcardImages string `protobuf:"bytes,4,opt,name=user_idcard_images,json=userIdcardImages,proto3" json:"user_idcard_images,omitempty"`
}

func (x *CertificateRequest) Reset() {
	*x = CertificateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_v1_front_user_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertificateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificateRequest) ProtoMessage() {}

func (x *CertificateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_account_v1_front_user_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificateRequest.ProtoReflect.Descriptor instead.
func (*CertificateRequest) Descriptor() ([]byte, []int) {
	return file_account_v1_front_user_proto_rawDescGZIP(), []int{7}
}

func (x *CertificateRequest) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CertificateRequest) GetUserRealname() string {
	if x != nil {
		return x.UserRealname
	}
	return ""
}

func (x *CertificateRequest) GetUserIdcard() string {
	if x != nil {
		return x.UserIdcard
	}
	return ""
}

func (x *CertificateRequest) GetUserIdcardImages() string {
	if x != nil {
		return x.UserIdcardImages
	}
	return ""
}

type CreateUserDeliveryAddressReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 联系人
	UdName string `protobuf:"bytes,1,opt,name=ud_name,json=udName,proto3" json:"ud_name,omitempty"`
	// 国家编码
	UdIntl string `protobuf:"bytes,2,opt,name=ud_intl,json=udIntl,proto3" json:"ud_intl,omitempty"`
	// 手机号码
	UdMobile string `protobuf:"bytes,3,opt,name=ud_mobile,json=udMobile,proto3" json:"ud_mobile,omitempty"`
	// 联系电话
	UdTelephone string `protobuf:"bytes,4,opt,name=ud_telephone,json=udTelephone,proto3" json:"ud_telephone,omitempty"`
	// 省编号
	UdProvinceId uint32 `protobuf:"varint,5,opt,name=ud_province_id,json=udProvinceId,proto3" json:"ud_province_id,omitempty"`
	// 省份
	UdProvince string `protobuf:"bytes,6,opt,name=ud_province,json=udProvince,proto3" json:"ud_province,omitempty"`
	// 市编号
	UdCityId uint32 `protobuf:"varint,7,opt,name=ud_city_id,json=udCityId,proto3" json:"ud_city_id,omitempty"`
	// 市
	UdCity string `protobuf:"bytes,8,opt,name=ud_city,json=udCity,proto3" json:"ud_city,omitempty"`
	// 县编号
	UdCountyId uint32 `protobuf:"varint,9,opt,name=ud_county_id,json=udCountyId,proto3" json:"ud_county_id,omitempty"`
	// 县区
	UdCounty string `protobuf:"bytes,10,opt,name=ud_county,json=udCounty,proto3" json:"ud_county,omitempty"`
	// 详细地址
	UdAddress string `protobuf:"bytes,11,opt,name=ud_address,json=udAddress,proto3" json:"ud_address,omitempty"`
	// 邮政编码
	UdPostalcode string `protobuf:"bytes,12,opt,name=ud_postalcode,json=udPostalcode,proto3" json:"ud_postalcode,omitempty"`
	// 地址标签(ENUM):1001-家里;1002-公司
	UdTagName string `protobuf:"bytes,13,opt,name=ud_tag_name,json=udTagName,proto3" json:"ud_tag_name,omitempty"`
	// 是否默认(BOOL):0-非默认;1-默认
	UdIsDefault bool `protobuf:"varint,14,opt,name=ud_is_default,json=udIsDefault,proto3" json:"ud_is_default,omitempty"`
}

func (x *CreateUserDeliveryAddressReq) Reset() {
	*x = CreateUserDeliveryAddressReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_v1_front_user_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateUserDeliveryAddressReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUserDeliveryAddressReq) ProtoMessage() {}

func (x *CreateUserDeliveryAddressReq) ProtoReflect() protoreflect.Message {
	mi := &file_account_v1_front_user_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUserDeliveryAddressReq.ProtoReflect.Descriptor instead.
func (*CreateUserDeliveryAddressReq) Descriptor() ([]byte, []int) {
	return file_account_v1_front_user_proto_rawDescGZIP(), []int{8}
}

func (x *CreateUserDeliveryAddressReq) GetUdName() string {
	if x != nil {
		return x.UdName
	}
	return ""
}

func (x *CreateUserDeliveryAddressReq) GetUdIntl() string {
	if x != nil {
		return x.UdIntl
	}
	return ""
}

func (x *CreateUserDeliveryAddressReq) GetUdMobile() string {
	if x != nil {
		return x.UdMobile
	}
	return ""
}

func (x *CreateUserDeliveryAddressReq) GetUdTelephone() string {
	if x != nil {
		return x.UdTelephone
	}
	return ""
}

func (x *CreateUserDeliveryAddressReq) GetUdProvinceId() uint32 {
	if x != nil {
		return x.UdProvinceId
	}
	return 0
}

func (x *CreateUserDeliveryAddressReq) GetUdProvince() string {
	if x != nil {
		return x.UdProvince
	}
	return ""
}

func (x *CreateUserDeliveryAddressReq) GetUdCityId() uint32 {
	if x != nil {
		return x.UdCityId
	}
	return 0
}

func (x *CreateUserDeliveryAddressReq) GetUdCity() string {
	if x != nil {
		return x.UdCity
	}
	return ""
}

func (x *CreateUserDeliveryAddressReq) GetUdCountyId() uint32 {
	if x != nil {
		return x.UdCountyId
	}
	return 0
}

func (x *CreateUserDeliveryAddressReq) GetUdCounty() string {
	if x != nil {
		return x.UdCounty
	}
	return ""
}

func (x *CreateUserDeliveryAddressReq) GetUdAddress() string {
	if x != nil {
		return x.UdAddress
	}
	return ""
}

func (x *CreateUserDeliveryAddressReq) GetUdPostalcode() string {
	if x != nil {
		return x.UdPostalcode
	}
	return ""
}

func (x *CreateUserDeliveryAddressReq) GetUdTagName() string {
	if x != nil {
		return x.UdTagName
	}
	return ""
}

func (x *CreateUserDeliveryAddressReq) GetUdIsDefault() bool {
	if x != nil {
		return x.UdIsDefault
	}
	return false
}

type CreateUserDeliveryAddressRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 地址编号
	UdId uint32 `protobuf:"varint,1,opt,name=ud_id,json=udId,proto3" json:"ud_id,omitempty"`
	// 用户编号
	UserId uint32 `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// 联系人
	UdName string `protobuf:"bytes,3,opt,name=ud_name,json=udName,proto3" json:"ud_name,omitempty"`
	// 国家编码
	UdIntl string `protobuf:"bytes,4,opt,name=ud_intl,json=udIntl,proto3" json:"ud_intl,omitempty"`
	// 手机号码
	UdMobile string `protobuf:"bytes,5,opt,name=ud_mobile,json=udMobile,proto3" json:"ud_mobile,omitempty"`
	// 联系电话
	UdTelephone string `protobuf:"bytes,6,opt,name=ud_telephone,json=udTelephone,proto3" json:"ud_telephone,omitempty"`
	// 省编号
	UdProvinceId uint32 `protobuf:"varint,7,opt,name=ud_province_id,json=udProvinceId,proto3" json:"ud_province_id,omitempty"`
	// 省份
	UdProvince string `protobuf:"bytes,8,opt,name=ud_province,json=udProvince,proto3" json:"ud_province,omitempty"`
	// 市编号
	UdCityId uint32 `protobuf:"varint,9,opt,name=ud_city_id,json=udCityId,proto3" json:"ud_city_id,omitempty"`
	// 市
	UdCity string `protobuf:"bytes,10,opt,name=ud_city,json=udCity,proto3" json:"ud_city,omitempty"`
	// 县编号
	UdCountyId uint32 `protobuf:"varint,11,opt,name=ud_county_id,json=udCountyId,proto3" json:"ud_county_id,omitempty"`
	// 县区
	UdCounty string `protobuf:"bytes,12,opt,name=ud_county,json=udCounty,proto3" json:"ud_county,omitempty"`
	// 详细地址
	UdAddress string `protobuf:"bytes,13,opt,name=ud_address,json=udAddress,proto3" json:"ud_address,omitempty"`
	// 邮政编码
	UdPostalcode string `protobuf:"bytes,14,opt,name=ud_postalcode,json=udPostalcode,proto3" json:"ud_postalcode,omitempty"`
	// 地址标签(ENUM):1001-家里;1002-公司
	UdTagName string `protobuf:"bytes,15,opt,name=ud_tag_name,json=udTagName,proto3" json:"ud_tag_name,omitempty"`
	// 经度
	UdLongitude float64 `protobuf:"fixed64,16,opt,name=ud_longitude,json=udLongitude,proto3" json:"ud_longitude,omitempty"`
	// 纬度
	UdLatitude float64 `protobuf:"fixed64,17,opt,name=ud_latitude,json=udLatitude,proto3" json:"ud_latitude,omitempty"`
	// 添加时间
	UdTime *timestamppb.Timestamp `protobuf:"bytes,18,opt,name=ud_time,json=udTime,proto3" json:"ud_time,omitempty"`
	// 是否默认(BOOL):0-非默认;1-默认
	UdIsDefault bool `protobuf:"varint,19,opt,name=ud_is_default,json=udIsDefault,proto3" json:"ud_is_default,omitempty"`
}

func (x *CreateUserDeliveryAddressRes) Reset() {
	*x = CreateUserDeliveryAddressRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_v1_front_user_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateUserDeliveryAddressRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUserDeliveryAddressRes) ProtoMessage() {}

func (x *CreateUserDeliveryAddressRes) ProtoReflect() protoreflect.Message {
	mi := &file_account_v1_front_user_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUserDeliveryAddressRes.ProtoReflect.Descriptor instead.
func (*CreateUserDeliveryAddressRes) Descriptor() ([]byte, []int) {
	return file_account_v1_front_user_proto_rawDescGZIP(), []int{9}
}

func (x *CreateUserDeliveryAddressRes) GetUdId() uint32 {
	if x != nil {
		return x.UdId
	}
	return 0
}

func (x *CreateUserDeliveryAddressRes) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CreateUserDeliveryAddressRes) GetUdName() string {
	if x != nil {
		return x.UdName
	}
	return ""
}

func (x *CreateUserDeliveryAddressRes) GetUdIntl() string {
	if x != nil {
		return x.UdIntl
	}
	return ""
}

func (x *CreateUserDeliveryAddressRes) GetUdMobile() string {
	if x != nil {
		return x.UdMobile
	}
	return ""
}

func (x *CreateUserDeliveryAddressRes) GetUdTelephone() string {
	if x != nil {
		return x.UdTelephone
	}
	return ""
}

func (x *CreateUserDeliveryAddressRes) GetUdProvinceId() uint32 {
	if x != nil {
		return x.UdProvinceId
	}
	return 0
}

func (x *CreateUserDeliveryAddressRes) GetUdProvince() string {
	if x != nil {
		return x.UdProvince
	}
	return ""
}

func (x *CreateUserDeliveryAddressRes) GetUdCityId() uint32 {
	if x != nil {
		return x.UdCityId
	}
	return 0
}

func (x *CreateUserDeliveryAddressRes) GetUdCity() string {
	if x != nil {
		return x.UdCity
	}
	return ""
}

func (x *CreateUserDeliveryAddressRes) GetUdCountyId() uint32 {
	if x != nil {
		return x.UdCountyId
	}
	return 0
}

func (x *CreateUserDeliveryAddressRes) GetUdCounty() string {
	if x != nil {
		return x.UdCounty
	}
	return ""
}

func (x *CreateUserDeliveryAddressRes) GetUdAddress() string {
	if x != nil {
		return x.UdAddress
	}
	return ""
}

func (x *CreateUserDeliveryAddressRes) GetUdPostalcode() string {
	if x != nil {
		return x.UdPostalcode
	}
	return ""
}

func (x *CreateUserDeliveryAddressRes) GetUdTagName() string {
	if x != nil {
		return x.UdTagName
	}
	return ""
}

func (x *CreateUserDeliveryAddressRes) GetUdLongitude() float64 {
	if x != nil {
		return x.UdLongitude
	}
	return 0
}

func (x *CreateUserDeliveryAddressRes) GetUdLatitude() float64 {
	if x != nil {
		return x.UdLatitude
	}
	return 0
}

func (x *CreateUserDeliveryAddressRes) GetUdTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UdTime
	}
	return nil
}

func (x *CreateUserDeliveryAddressRes) GetUdIsDefault() bool {
	if x != nil {
		return x.UdIsDefault
	}
	return false
}

type UpdateUserDeliveryAddressReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 地址编号
	UdId uint32 `protobuf:"varint,1,opt,name=ud_id,json=udId,proto3" json:"ud_id,omitempty"`
	// 联系人
	UdName string `protobuf:"bytes,2,opt,name=ud_name,json=udName,proto3" json:"ud_name,omitempty"`
	// 手机号码
	UdMobile string `protobuf:"bytes,3,opt,name=ud_mobile,json=udMobile,proto3" json:"ud_mobile,omitempty"`
	// 国家编码
	UdIntl string `protobuf:"bytes,4,opt,name=ud_intl,json=udIntl,proto3" json:"ud_intl,omitempty"`
	// 详细地址
	UdAddress string `protobuf:"bytes,5,opt,name=ud_address,json=udAddress,proto3" json:"ud_address,omitempty"`
	// 是否默认(BOOL):0-非默认;1-默认
	UdIsDefault bool `protobuf:"varint,6,opt,name=ud_is_default,json=udIsDefault,proto3" json:"ud_is_default,omitempty"`
}

func (x *UpdateUserDeliveryAddressReq) Reset() {
	*x = UpdateUserDeliveryAddressReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_v1_front_user_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserDeliveryAddressReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserDeliveryAddressReq) ProtoMessage() {}

func (x *UpdateUserDeliveryAddressReq) ProtoReflect() protoreflect.Message {
	mi := &file_account_v1_front_user_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserDeliveryAddressReq.ProtoReflect.Descriptor instead.
func (*UpdateUserDeliveryAddressReq) Descriptor() ([]byte, []int) {
	return file_account_v1_front_user_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateUserDeliveryAddressReq) GetUdId() uint32 {
	if x != nil {
		return x.UdId
	}
	return 0
}

func (x *UpdateUserDeliveryAddressReq) GetUdName() string {
	if x != nil {
		return x.UdName
	}
	return ""
}

func (x *UpdateUserDeliveryAddressReq) GetUdMobile() string {
	if x != nil {
		return x.UdMobile
	}
	return ""
}

func (x *UpdateUserDeliveryAddressReq) GetUdIntl() string {
	if x != nil {
		return x.UdIntl
	}
	return ""
}

func (x *UpdateUserDeliveryAddressReq) GetUdAddress() string {
	if x != nil {
		return x.UdAddress
	}
	return ""
}

func (x *UpdateUserDeliveryAddressReq) GetUdIsDefault() bool {
	if x != nil {
		return x.UdIsDefault
	}
	return false
}

type UpdateUserDeliveryAddressRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 地址编号
	UdId uint32 `protobuf:"varint,1,opt,name=ud_id,json=udId,proto3" json:"ud_id,omitempty"`
}

func (x *UpdateUserDeliveryAddressRes) Reset() {
	*x = UpdateUserDeliveryAddressRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_v1_front_user_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserDeliveryAddressRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserDeliveryAddressRes) ProtoMessage() {}

func (x *UpdateUserDeliveryAddressRes) ProtoReflect() protoreflect.Message {
	mi := &file_account_v1_front_user_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserDeliveryAddressRes.ProtoReflect.Descriptor instead.
func (*UpdateUserDeliveryAddressRes) Descriptor() ([]byte, []int) {
	return file_account_v1_front_user_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateUserDeliveryAddressRes) GetUdId() uint32 {
	if x != nil {
		return x.UdId
	}
	return 0
}

type GetUserDeliveryAddressReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 地址编号
	UdId uint32 `protobuf:"varint,1,opt,name=ud_id,json=udId,proto3" json:"ud_id,omitempty"`
}

func (x *GetUserDeliveryAddressReq) Reset() {
	*x = GetUserDeliveryAddressReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_v1_front_user_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserDeliveryAddressReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserDeliveryAddressReq) ProtoMessage() {}

func (x *GetUserDeliveryAddressReq) ProtoReflect() protoreflect.Message {
	mi := &file_account_v1_front_user_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserDeliveryAddressReq.ProtoReflect.Descriptor instead.
func (*GetUserDeliveryAddressReq) Descriptor() ([]byte, []int) {
	return file_account_v1_front_user_proto_rawDescGZIP(), []int{12}
}

func (x *GetUserDeliveryAddressReq) GetUdId() uint32 {
	if x != nil {
		return x.UdId
	}
	return 0
}

type DeleteUserDeliveryAddressReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 地址编号
	UdId uint32 `protobuf:"varint,1,opt,name=ud_id,json=udId,proto3" json:"ud_id,omitempty"`
}

func (x *DeleteUserDeliveryAddressReq) Reset() {
	*x = DeleteUserDeliveryAddressReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_v1_front_user_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteUserDeliveryAddressReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteUserDeliveryAddressReq) ProtoMessage() {}

func (x *DeleteUserDeliveryAddressReq) ProtoReflect() protoreflect.Message {
	mi := &file_account_v1_front_user_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteUserDeliveryAddressReq.ProtoReflect.Descriptor instead.
func (*DeleteUserDeliveryAddressReq) Descriptor() ([]byte, []int) {
	return file_account_v1_front_user_proto_rawDescGZIP(), []int{13}
}

func (x *DeleteUserDeliveryAddressReq) GetUdId() uint32 {
	if x != nil {
		return x.UdId
	}
	return 0
}

type ListUserDeliveryAddressReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseList *v1.BaseList `protobuf:"bytes,1,opt,name=base_list,json=baseList,proto3" json:"base_list,omitempty"`
	// 联系人
	UdName string `protobuf:"bytes,2,opt,name=ud_name,json=udName,proto3" json:"ud_name,omitempty"`
}

func (x *ListUserDeliveryAddressReq) Reset() {
	*x = ListUserDeliveryAddressReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_v1_front_user_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUserDeliveryAddressReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUserDeliveryAddressReq) ProtoMessage() {}

func (x *ListUserDeliveryAddressReq) ProtoReflect() protoreflect.Message {
	mi := &file_account_v1_front_user_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUserDeliveryAddressReq.ProtoReflect.Descriptor instead.
func (*ListUserDeliveryAddressReq) Descriptor() ([]byte, []int) {
	return file_account_v1_front_user_proto_rawDescGZIP(), []int{14}
}

func (x *ListUserDeliveryAddressReq) GetBaseList() *v1.BaseList {
	if x != nil {
		return x.BaseList
	}
	return nil
}

func (x *ListUserDeliveryAddressReq) GetUdName() string {
	if x != nil {
		return x.UdName
	}
	return ""
}

type UserDeliveryAddressListRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 分页数据内容
	Items []*ListUserDeliveryAddressReq `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	// 分页号码
	Page int32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	// 总页数
	Total int32 `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	// 数据总数
	Records int32 `protobuf:"varint,4,opt,name=records,proto3" json:"records,omitempty"`
	// 单页数量
	Size int32 `protobuf:"varint,5,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *UserDeliveryAddressListRes) Reset() {
	*x = UserDeliveryAddressListRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_v1_front_user_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserDeliveryAddressListRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserDeliveryAddressListRes) ProtoMessage() {}

func (x *UserDeliveryAddressListRes) ProtoReflect() protoreflect.Message {
	mi := &file_account_v1_front_user_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserDeliveryAddressListRes.ProtoReflect.Descriptor instead.
func (*UserDeliveryAddressListRes) Descriptor() ([]byte, []int) {
	return file_account_v1_front_user_proto_rawDescGZIP(), []int{15}
}

func (x *UserDeliveryAddressListRes) GetItems() []*ListUserDeliveryAddressReq {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *UserDeliveryAddressListRes) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *UserDeliveryAddressListRes) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *UserDeliveryAddressListRes) GetRecords() int32 {
	if x != nil {
		return x.Records
	}
	return 0
}

func (x *UserDeliveryAddressListRes) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

var File_account_v1_front_user_proto protoreflect.FileDescriptor

var file_account_v1_front_user_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x72, 0x6f,
	0x6e, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12,
	0x62, 0x61, 0x73, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xb6, 0x01, 0x0a, 0x0c, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x64,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42,
	0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x64, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x4b, 0x65,
	0x79, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x22, 0x40, 0x0a, 0x0f, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xcc, 0x02,
	0x0a, 0x0f, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2c, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01,
	0x18, 0x64, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x25, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x64, 0x52, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x65, 0x72,
	0x69, 0x66, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x65, 0x72, 0x69, 0x66,
	0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x65, 0x72,
	0x69, 0x66, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x62, 0x69, 0x6e, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x62, 0x69, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x24,
	0x0a, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x75,
	0x63, 0x63, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x63, 0x63, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xd8, 0x12, 0x0a,
	0x0c, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x73,
	0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12,
	0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x74, 0x6c, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x6c, 0x12, 0x1f, 0x0a, 0x0b,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x3f, 0x0a,
	0x0d, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x42, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x12, 0x1d,
	0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x22, 0x0a,
	0x0d, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49,
	0x64, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x61, 0x6c, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x61, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x63, 0x61, 0x72, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x63, 0x61, 0x72, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x63, 0x61, 0x72, 0x64, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x73,
	0x5f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x75, 0x73, 0x65, 0x72, 0x49, 0x73, 0x41, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x74,
	0x61, 0x67, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61,
	0x67, 0x49, 0x64, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x66, 0x72, 0x6f,
	0x6d, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x46, 0x72, 0x6f,
	0x6d, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x65, 0x77, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x65, 0x77, 0x12, 0x33, 0x0a, 0x16,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x13, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x63, 0x61, 0x72, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x4c, 0x65, 0x66, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x6e,
	0x65, 0x79, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x4d, 0x6f,
	0x6e, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x11, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x6e, 0x65,
	0x79, 0x5f, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f,
	0x75, 0x73, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x12,
	0x2c, 0x0a, 0x12, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x5f, 0x63, 0x61, 0x72, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x75, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x43, 0x61, 0x72, 0x64, 0x12, 0x39, 0x0a,
	0x19, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x63,
	0x61, 0x72, 0x64, 0x5f, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x16, 0x75, 0x73, 0x65, 0x72, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x43, 0x61,
	0x72, 0x64, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x75,
	0x73, 0x65, 0x72, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x5f, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x75, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x65, 0x78, 0x70, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x45,
	0x78, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69,
	0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x43, 0x72, 0x65,
	0x64, 0x69, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x5f, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x10, 0x75, 0x73, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x46, 0x72, 0x6f, 0x7a, 0x65,
	0x6e, 0x12, 0x28, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74,
	0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x75, 0x73, 0x65,
	0x72, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x55, 0x73, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x21, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x75, 0x73,
	0x65, 0x72, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x72, 0x65, 0x64, 0x70, 0x61, 0x63, 0x6b, 0x18, 0x22, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b,
	0x75, 0x73, 0x65, 0x72, 0x52, 0x65, 0x64, 0x70, 0x61, 0x63, 0x6b, 0x12, 0x2e, 0x0a, 0x13, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x64, 0x70, 0x61, 0x63, 0x6b, 0x5f, 0x66, 0x72, 0x6f, 0x7a,
	0x65, 0x6e, 0x18, 0x23, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x75, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x64, 0x70, 0x61, 0x63, 0x6b, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x70,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x24, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x25, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x72, 0x6f,
	0x6c, 0x65, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x26,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x73, 0x69, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73,
	0x69, 0x74, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x29, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x64, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x64,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x3e, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x52, 0x65, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x42, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x67, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x73, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x67, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x61, 0x67, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x30, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x61, 0x67, 0x54,
	0x69, 0x74, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x61, 0x67, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x31, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x74, 0x61, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x12, 0x2a, 0x0a, 0x11, 0x74, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x73, 0x5f, 0x64, 0x75, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x61, 0x67,
	0x49, 0x64, 0x73, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x33, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1f, 0x0a,
	0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x34, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1f,
	0x0a, 0x0b, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x18, 0x35, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0a, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x18, 0x36,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x18, 0x37, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0c, 0x77, 0x61,
	0x69, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x38, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x77, 0x61, 0x69, 0x74, 0x50, 0x61, 0x79, 0x4e, 0x75, 0x6d, 0x12, 0x2e, 0x0a, 0x13,
	0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x73, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f,
	0x6e, 0x75, 0x6d, 0x18, 0x39, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x66, 0x61, 0x76, 0x6f, 0x72,
	0x69, 0x74, 0x65, 0x73, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x4e, 0x75, 0x6d, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x6f, 0x6e, 0x63, 0x65, 0x72, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x3a, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x72, 0x6e, 0x4e, 0x75, 0x6d, 0x12, 0x23, 0x0a,
	0x0d, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x3b,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x2e, 0x0a, 0x13, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x77, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x75, 0x73,
	0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x77, 0x12,
	0x30, 0x0a, 0x14, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x75, 0x79, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x6d,
	0x6f, 0x6e, 0x74, 0x68, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x75,
	0x79, 0x12, 0x24, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x50,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xd2, 0x01, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e,
	0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x75,
	0x73, 0x65, 0x72, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x1d, 0x0a, 0x0a,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x3f, 0x0a, 0x0d, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c,
	0x75, 0x73, 0x65, 0x72, 0x42, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x22, 0x53, 0x0a, 0x11,
	0x42, 0x69, 0x6e, 0x64, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x4b, 0x65,
	0x79, 0x22, 0xcc, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x6c,
	0x64, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x65, 0x72,
	0x69, 0x66, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x69, 0x6e, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x62, 0x69, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x22, 0xa1, 0x01, 0x0a, 0x12, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x23, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x61, 0x6c, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x52, 0x65, 0x61,
	0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x63, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x63, 0x61, 0x72, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x63, 0x61, 0x72, 0x64, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x73, 0x22, 0xd5, 0x03, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x64, 0x49, 0x6e, 0x74, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x64, 0x5f, 0x6d, 0x6f,
	0x62, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x64, 0x4d, 0x6f,
	0x62, 0x69, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x64, 0x5f, 0x74, 0x65, 0x6c, 0x65, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x64, 0x54, 0x65,
	0x6c, 0x65, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x75, 0x64, 0x5f, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x75, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x75, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x75, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x1c,
	0x0a, 0x0a, 0x75, 0x64, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x75, 0x64, 0x43, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x64, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x64, 0x43, 0x69, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x0c, 0x75, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x75, 0x64, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x64, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x64, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x64, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x75, 0x64, 0x50, 0x6f,
	0x73, 0x74, 0x61, 0x6c, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x75, 0x64, 0x5f, 0x74,
	0x61, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75,
	0x64, 0x54, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x75, 0x64, 0x5f, 0x69,
	0x73, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x75, 0x64, 0x49, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x22, 0xfc, 0x04, 0x0a,
	0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x12, 0x13, 0x0a,
	0x05, 0x75, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x75, 0x64,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x64,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x64, 0x49, 0x6e, 0x74, 0x6c, 0x12, 0x1b, 0x0a,
	0x09, 0x75, 0x64, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x75, 0x64, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x64,
	0x5f, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x75, 0x64, 0x54, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x24, 0x0a,
	0x0e, 0x75, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x75, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e,
	0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x64, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x0a, 0x75, 0x64, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x75, 0x64, 0x43, 0x69, 0x74, 0x79,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x64, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x64, 0x43, 0x69, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x0c, 0x75,
	0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x75, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x75, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x75, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x64,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x75, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x64, 0x5f,
	0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x75, 0x64, 0x50, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1e,
	0x0a, 0x0b, 0x75, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x64, 0x54, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x75, 0x64, 0x5f, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x75, 0x64, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x64, 0x5f, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x75, 0x64, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x75, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x06, 0x75, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x75, 0x64, 0x5f, 0x69, 0x73,
	0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x75, 0x64, 0x49, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x22, 0xc5, 0x01, 0x0a, 0x1c,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x12, 0x13, 0x0a, 0x05,
	0x75, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x75, 0x64, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x64,
	0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75,
	0x64, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x64, 0x5f, 0x69, 0x6e,
	0x74, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x64, 0x49, 0x6e, 0x74, 0x6c,
	0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x22, 0x0a, 0x0d, 0x75, 0x64, 0x5f, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x75, 0x64, 0x49, 0x73, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x22, 0x33, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x73, 0x12, 0x13, 0x0a, 0x05, 0x75, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x75, 0x64, 0x49, 0x64, 0x22, 0x30, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x52, 0x65, 0x71, 0x12, 0x13, 0x0a, 0x05, 0x75, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x75, 0x64, 0x49, 0x64, 0x22, 0x33, 0x0a, 0x1c, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x12, 0x13, 0x0a, 0x05, 0x75, 0x64,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x75, 0x64, 0x49, 0x64, 0x22,
	0x65, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x12, 0x2e, 0x0a,
	0x09, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x08, 0x62, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xb2, 0x01, 0x0a, 0x1a, 0x55, 0x73, 0x65, 0x72, 0x44,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x52, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x18, 0x0a,
	0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x32, 0xcc, 0x02, 0x0a, 0x0a,
	0x46, 0x72, 0x6f, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x65, 0x0a, 0x05, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x12, 0x18, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1f, 0x3a, 0x01, 0x2a, 0x22, 0x1a, 0x2f, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x2f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x2f, 0x6c, 0x6f, 0x67, 0x69,
	0x6e, 0x12, 0x6e, 0x0a, 0x08, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x1b, 0x2e,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x3a,
	0x01, 0x2a, 0x22, 0x1d, 0x2f, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x12, 0x67, 0x0a, 0x06, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x12, 0x1b, 0x2e, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x12, 0x1b, 0x2f,
	0x66, 0x72, 0x6f, 0x6e, 0x74, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2f, 0x6c, 0x6f,
	0x67, 0x69, 0x6e, 0x2f, 0x6c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x32, 0xb0, 0x06, 0x0a, 0x04, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x5d, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x18, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x12, 0x18, 0x2f, 0x66, 0x72, 0x6f, 0x6e, 0x74,
	0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x69, 0x6e,
	0x66, 0x6f, 0x12, 0x70, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x1d, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x18, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x23, 0x3a, 0x01, 0x2a, 0x22, 0x1e, 0x2f, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x2f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x62, 0x69, 0x6e, 0x64, 0x4d, 0x6f,
	0x62, 0x69, 0x6c, 0x65, 0x12, 0x73, 0x0a, 0x0a, 0x42, 0x69, 0x6e, 0x64, 0x4d, 0x6f, 0x62, 0x69,
	0x6c, 0x65, 0x12, 0x1d, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x69, 0x6e, 0x64, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1b, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x29,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x3a, 0x01, 0x2a, 0x22, 0x1e, 0x2f, 0x66, 0x72, 0x6f, 0x6e,
	0x74, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x62,
	0x69, 0x6e, 0x64, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12, 0x77, 0x0a, 0x0c, 0x55, 0x6e, 0x42,
	0x69, 0x6e, 0x64, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12, 0x1d, 0x2e, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69, 0x6e, 0x64, 0x4d, 0x6f, 0x62, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x3a, 0x01, 0x2a,
	0x22, 0x20, 0x2f, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x75, 0x6e, 0x42, 0x69, 0x6e, 0x64, 0x4d, 0x6f, 0x62, 0x69,
	0x6c, 0x65, 0x12, 0x77, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x12, 0x20, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x2c, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x26, 0x3a, 0x01, 0x2a, 0x22, 0x21, 0x2f, 0x66, 0x72, 0x6f, 0x6e, 0x74,
	0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x72, 0x65,
	0x73, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x79, 0x0a, 0x0e, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x20, 0x2e,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x3a,
	0x01, 0x2a, 0x22, 0x22, 0x2f, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x75, 0x0a, 0x0b, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x2e, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x28, 0x3a, 0x01, 0x2a, 0x22, 0x23, 0x2f, 0x66, 0x72, 0x6f, 0x6e, 0x74,
	0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x73, 0x61,
	0x76, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x32, 0xfd, 0x05,
	0x0a, 0x13, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0xa2, 0x01, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x28, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x3a,
	0x01, 0x2a, 0x22, 0x26, 0x2f, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x12, 0xa3, 0x01, 0x0a, 0x19, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x28, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x65, 0x71, 0x1a, 0x28, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x22, 0x32, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x2c, 0x3a, 0x01, 0x2a, 0x22, 0x27, 0x2f, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x2f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x73, 0x61, 0x76, 0x65,
	0x12, 0x99, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x2e, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x65, 0x71, 0x1a, 0x28, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x22, 0x2e, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x28, 0x12, 0x26, 0x2f, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x2f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x67, 0x65, 0x74, 0x12, 0x93, 0x01, 0x0a,
	0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x28, 0x2e, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x34, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x2e, 0x3a, 0x01, 0x2a, 0x22, 0x29, 0x2f, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x2f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x72, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x12, 0x69, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x26, 0x2e,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x42, 0x8d, 0x01,
	0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x42, 0x0e, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x50, 0x01, 0x5a, 0x22, 0x73, 0x68, 0x6f, 0x70, 0x78, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65,
	0x6e, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x3b, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x41, 0x58, 0x58, 0xaa, 0x02, 0x0a, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0a, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x16, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea,
	0x02, 0x0b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_account_v1_front_user_proto_rawDescOnce sync.Once
	file_account_v1_front_user_proto_rawDescData = file_account_v1_front_user_proto_rawDesc
)

func file_account_v1_front_user_proto_rawDescGZIP() []byte {
	file_account_v1_front_user_proto_rawDescOnce.Do(func() {
		file_account_v1_front_user_proto_rawDescData = protoimpl.X.CompressGZIP(file_account_v1_front_user_proto_rawDescData)
	})
	return file_account_v1_front_user_proto_rawDescData
}

var file_account_v1_front_user_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_account_v1_front_user_proto_goTypes = []any{
	(*LoginRequest)(nil),                 // 0: account.v1.LoginRequest
	(*LoginLoginReply)(nil),              // 1: account.v1.LoginLoginReply
	(*RegisterRequest)(nil),              // 2: account.v1.RegisterRequest
	(*GetUserReply)(nil),                 // 3: account.v1.GetUserReply
	(*UpdateUserRequest)(nil),            // 4: account.v1.UpdateUserRequest
	(*BindMobileRequest)(nil),            // 5: account.v1.BindMobileRequest
	(*ResetPasswordRequest)(nil),         // 6: account.v1.ResetPasswordRequest
	(*CertificateRequest)(nil),           // 7: account.v1.CertificateRequest
	(*CreateUserDeliveryAddressReq)(nil), // 8: account.v1.CreateUserDeliveryAddressReq
	(*CreateUserDeliveryAddressRes)(nil), // 9: account.v1.CreateUserDeliveryAddressRes
	(*UpdateUserDeliveryAddressReq)(nil), // 10: account.v1.UpdateUserDeliveryAddressReq
	(*UpdateUserDeliveryAddressRes)(nil), // 11: account.v1.UpdateUserDeliveryAddressRes
	(*GetUserDeliveryAddressReq)(nil),    // 12: account.v1.GetUserDeliveryAddressReq
	(*DeleteUserDeliveryAddressReq)(nil), // 13: account.v1.DeleteUserDeliveryAddressReq
	(*ListUserDeliveryAddressReq)(nil),   // 14: account.v1.ListUserDeliveryAddressReq
	(*UserDeliveryAddressListRes)(nil),   // 15: account.v1.UserDeliveryAddressListRes
	(*timestamppb.Timestamp)(nil),        // 16: google.protobuf.Timestamp
	(*v1.BaseList)(nil),                  // 17: base.v1.BaseList
	(*emptypb.Empty)(nil),                // 18: google.protobuf.Empty
}
var file_account_v1_front_user_proto_depIdxs = []int32{
	16, // 0: account.v1.GetUserReply.user_birthday:type_name -> google.protobuf.Timestamp
	16, // 1: account.v1.GetUserReply.user_reg_time:type_name -> google.protobuf.Timestamp
	16, // 2: account.v1.GetUserReply.user_login_time:type_name -> google.protobuf.Timestamp
	16, // 3: account.v1.UpdateUserRequest.user_birthday:type_name -> google.protobuf.Timestamp
	16, // 4: account.v1.CreateUserDeliveryAddressRes.ud_time:type_name -> google.protobuf.Timestamp
	17, // 5: account.v1.ListUserDeliveryAddressReq.base_list:type_name -> base.v1.BaseList
	14, // 6: account.v1.UserDeliveryAddressListRes.items:type_name -> account.v1.ListUserDeliveryAddressReq
	0,  // 7: account.v1.FrontLogin.Login:input_type -> account.v1.LoginRequest
	2,  // 8: account.v1.FrontLogin.Register:input_type -> account.v1.RegisterRequest
	2,  // 9: account.v1.FrontLogin.Logout:input_type -> account.v1.RegisterRequest
	18, // 10: account.v1.User.GetUser:input_type -> google.protobuf.Empty
	4,  // 11: account.v1.User.UpdateUser:input_type -> account.v1.UpdateUserRequest
	5,  // 12: account.v1.User.BindMobile:input_type -> account.v1.BindMobileRequest
	5,  // 13: account.v1.User.UnBindMobile:input_type -> account.v1.BindMobileRequest
	6,  // 14: account.v1.User.ResetPassword:input_type -> account.v1.ResetPasswordRequest
	6,  // 15: account.v1.User.ChangePassword:input_type -> account.v1.ResetPasswordRequest
	7,  // 16: account.v1.User.Certificate:input_type -> account.v1.CertificateRequest
	8,  // 17: account.v1.UserDeliveryAddress.CreateUserDeliveryAddress:input_type -> account.v1.CreateUserDeliveryAddressReq
	10, // 18: account.v1.UserDeliveryAddress.UpdateUserDeliveryAddress:input_type -> account.v1.UpdateUserDeliveryAddressReq
	12, // 19: account.v1.UserDeliveryAddress.GetUserDeliveryAddress:input_type -> account.v1.GetUserDeliveryAddressReq
	13, // 20: account.v1.UserDeliveryAddress.DeleteUserDeliveryAddress:input_type -> account.v1.DeleteUserDeliveryAddressReq
	14, // 21: account.v1.UserDeliveryAddress.ListUserDeliveryAddress:input_type -> account.v1.ListUserDeliveryAddressReq
	1,  // 22: account.v1.FrontLogin.Login:output_type -> account.v1.LoginLoginReply
	1,  // 23: account.v1.FrontLogin.Register:output_type -> account.v1.LoginLoginReply
	1,  // 24: account.v1.FrontLogin.Logout:output_type -> account.v1.LoginLoginReply
	3,  // 25: account.v1.User.GetUser:output_type -> account.v1.GetUserReply
	3,  // 26: account.v1.User.UpdateUser:output_type -> account.v1.GetUserReply
	1,  // 27: account.v1.User.BindMobile:output_type -> account.v1.LoginLoginReply
	1,  // 28: account.v1.User.UnBindMobile:output_type -> account.v1.LoginLoginReply
	18, // 29: account.v1.User.ResetPassword:output_type -> google.protobuf.Empty
	18, // 30: account.v1.User.ChangePassword:output_type -> google.protobuf.Empty
	18, // 31: account.v1.User.Certificate:output_type -> google.protobuf.Empty
	9,  // 32: account.v1.UserDeliveryAddress.CreateUserDeliveryAddress:output_type -> account.v1.CreateUserDeliveryAddressRes
	11, // 33: account.v1.UserDeliveryAddress.UpdateUserDeliveryAddress:output_type -> account.v1.UpdateUserDeliveryAddressRes
	9,  // 34: account.v1.UserDeliveryAddress.GetUserDeliveryAddress:output_type -> account.v1.CreateUserDeliveryAddressRes
	18, // 35: account.v1.UserDeliveryAddress.DeleteUserDeliveryAddress:output_type -> google.protobuf.Empty
	15, // 36: account.v1.UserDeliveryAddress.ListUserDeliveryAddress:output_type -> account.v1.UserDeliveryAddressListRes
	22, // [22:37] is the sub-list for method output_type
	7,  // [7:22] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_account_v1_front_user_proto_init() }
func file_account_v1_front_user_proto_init() {
	if File_account_v1_front_user_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_account_v1_front_user_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*LoginRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_account_v1_front_user_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*LoginLoginReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_account_v1_front_user_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*RegisterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_account_v1_front_user_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*GetUserReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_account_v1_front_user_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_account_v1_front_user_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*BindMobileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_account_v1_front_user_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*ResetPasswordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_account_v1_front_user_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*CertificateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_account_v1_front_user_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*CreateUserDeliveryAddressReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_account_v1_front_user_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*CreateUserDeliveryAddressRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_account_v1_front_user_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateUserDeliveryAddressReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_account_v1_front_user_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateUserDeliveryAddressRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_account_v1_front_user_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*GetUserDeliveryAddressReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_account_v1_front_user_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteUserDeliveryAddressReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_account_v1_front_user_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*ListUserDeliveryAddressReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_account_v1_front_user_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*UserDeliveryAddressListRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_account_v1_front_user_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   3,
		},
		GoTypes:           file_account_v1_front_user_proto_goTypes,
		DependencyIndexes: file_account_v1_front_user_proto_depIdxs,
		MessageInfos:      file_account_v1_front_user_proto_msgTypes,
	}.Build()
	File_account_v1_front_user_proto = out.File
	file_account_v1_front_user_proto_rawDesc = nil
	file_account_v1_front_user_proto_goTypes = nil
	file_account_v1_front_user_proto_depIdxs = nil
}
