// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"shopx/app/account-srv/internal/biz/entity"
)

func newAccountUserTagBase(db *gorm.DB, opts ...gen.DOOption) accountUserTagBase {
	_accountUserTagBase := accountUserTagBase{}

	_accountUserTagBase.accountUserTagBaseDo.UseDB(db, opts...)
	_accountUserTagBase.accountUserTagBaseDo.UseModel(&entity.AccountUserTagBase{})

	tableName := _accountUserTagBase.accountUserTagBaseDo.TableName()
	_accountUserTagBase.ALL = field.NewAsterisk(tableName)
	_accountUserTagBase.TagID = field.NewInt32(tableName, "tag_id")
	_accountUserTagBase.TagTitle = field.NewString(tableName, "tag_title")
	_accountUserTagBase.TagGroupID = field.NewInt32(tableName, "tag_group_id")
	_accountUserTagBase.TagSort = field.NewInt32(tableName, "tag_sort")
	_accountUserTagBase.TagEnable = field.NewField(tableName, "tag_enable")
	_accountUserTagBase.TagBuildin = field.NewField(tableName, "tag_buildin")

	_accountUserTagBase.fillFieldMap()

	return _accountUserTagBase
}

// accountUserTagBase 用户标签表
type accountUserTagBase struct {
	accountUserTagBaseDo accountUserTagBaseDo

	ALL        field.Asterisk
	TagID      field.Int32  // 标签编码
	TagTitle   field.String // 标签标题
	TagGroupID field.Int32  // 所属分类
	TagSort    field.Int32  // 配置排序:从小到大
	TagEnable  field.Field  // 是否启用(BOOL):0-禁用;1-启用
	TagBuildin field.Field  // 系统内置(BOOL):1-是; 0-否

	fieldMap map[string]field.Expr
}

func (a accountUserTagBase) Table(newTableName string) *accountUserTagBase {
	a.accountUserTagBaseDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a accountUserTagBase) As(alias string) *accountUserTagBase {
	a.accountUserTagBaseDo.DO = *(a.accountUserTagBaseDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *accountUserTagBase) updateTableName(table string) *accountUserTagBase {
	a.ALL = field.NewAsterisk(table)
	a.TagID = field.NewInt32(table, "tag_id")
	a.TagTitle = field.NewString(table, "tag_title")
	a.TagGroupID = field.NewInt32(table, "tag_group_id")
	a.TagSort = field.NewInt32(table, "tag_sort")
	a.TagEnable = field.NewField(table, "tag_enable")
	a.TagBuildin = field.NewField(table, "tag_buildin")

	a.fillFieldMap()

	return a
}

func (a *accountUserTagBase) WithContext(ctx context.Context) *accountUserTagBaseDo {
	return a.accountUserTagBaseDo.WithContext(ctx)
}

func (a accountUserTagBase) TableName() string { return a.accountUserTagBaseDo.TableName() }

func (a accountUserTagBase) Alias() string { return a.accountUserTagBaseDo.Alias() }

func (a accountUserTagBase) Columns(cols ...field.Expr) gen.Columns {
	return a.accountUserTagBaseDo.Columns(cols...)
}

func (a *accountUserTagBase) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *accountUserTagBase) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 6)
	a.fieldMap["tag_id"] = a.TagID
	a.fieldMap["tag_title"] = a.TagTitle
	a.fieldMap["tag_group_id"] = a.TagGroupID
	a.fieldMap["tag_sort"] = a.TagSort
	a.fieldMap["tag_enable"] = a.TagEnable
	a.fieldMap["tag_buildin"] = a.TagBuildin
}

func (a accountUserTagBase) clone(db *gorm.DB) accountUserTagBase {
	a.accountUserTagBaseDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a accountUserTagBase) replaceDB(db *gorm.DB) accountUserTagBase {
	a.accountUserTagBaseDo.ReplaceDB(db)
	return a
}

type accountUserTagBaseDo struct{ gen.DO }

func (a accountUserTagBaseDo) Debug() *accountUserTagBaseDo {
	return a.withDO(a.DO.Debug())
}

func (a accountUserTagBaseDo) WithContext(ctx context.Context) *accountUserTagBaseDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a accountUserTagBaseDo) ReadDB() *accountUserTagBaseDo {
	return a.Clauses(dbresolver.Read)
}

func (a accountUserTagBaseDo) WriteDB() *accountUserTagBaseDo {
	return a.Clauses(dbresolver.Write)
}

func (a accountUserTagBaseDo) Session(config *gorm.Session) *accountUserTagBaseDo {
	return a.withDO(a.DO.Session(config))
}

func (a accountUserTagBaseDo) Clauses(conds ...clause.Expression) *accountUserTagBaseDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a accountUserTagBaseDo) Returning(value interface{}, columns ...string) *accountUserTagBaseDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a accountUserTagBaseDo) Not(conds ...gen.Condition) *accountUserTagBaseDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a accountUserTagBaseDo) Or(conds ...gen.Condition) *accountUserTagBaseDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a accountUserTagBaseDo) Select(conds ...field.Expr) *accountUserTagBaseDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a accountUserTagBaseDo) Where(conds ...gen.Condition) *accountUserTagBaseDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a accountUserTagBaseDo) Order(conds ...field.Expr) *accountUserTagBaseDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a accountUserTagBaseDo) Distinct(cols ...field.Expr) *accountUserTagBaseDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a accountUserTagBaseDo) Omit(cols ...field.Expr) *accountUserTagBaseDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a accountUserTagBaseDo) Join(table schema.Tabler, on ...field.Expr) *accountUserTagBaseDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a accountUserTagBaseDo) LeftJoin(table schema.Tabler, on ...field.Expr) *accountUserTagBaseDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a accountUserTagBaseDo) RightJoin(table schema.Tabler, on ...field.Expr) *accountUserTagBaseDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a accountUserTagBaseDo) Group(cols ...field.Expr) *accountUserTagBaseDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a accountUserTagBaseDo) Having(conds ...gen.Condition) *accountUserTagBaseDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a accountUserTagBaseDo) Limit(limit int) *accountUserTagBaseDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a accountUserTagBaseDo) Offset(offset int) *accountUserTagBaseDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a accountUserTagBaseDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *accountUserTagBaseDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a accountUserTagBaseDo) Unscoped() *accountUserTagBaseDo {
	return a.withDO(a.DO.Unscoped())
}

func (a accountUserTagBaseDo) Create(values ...*entity.AccountUserTagBase) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a accountUserTagBaseDo) CreateInBatches(values []*entity.AccountUserTagBase, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a accountUserTagBaseDo) Save(values ...*entity.AccountUserTagBase) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a accountUserTagBaseDo) First() (*entity.AccountUserTagBase, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.AccountUserTagBase), nil
	}
}

func (a accountUserTagBaseDo) Take() (*entity.AccountUserTagBase, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.AccountUserTagBase), nil
	}
}

func (a accountUserTagBaseDo) Last() (*entity.AccountUserTagBase, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.AccountUserTagBase), nil
	}
}

func (a accountUserTagBaseDo) Find() ([]*entity.AccountUserTagBase, error) {
	result, err := a.DO.Find()
	return result.([]*entity.AccountUserTagBase), err
}

func (a accountUserTagBaseDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.AccountUserTagBase, err error) {
	buf := make([]*entity.AccountUserTagBase, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a accountUserTagBaseDo) FindInBatches(result *[]*entity.AccountUserTagBase, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a accountUserTagBaseDo) Attrs(attrs ...field.AssignExpr) *accountUserTagBaseDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a accountUserTagBaseDo) Assign(attrs ...field.AssignExpr) *accountUserTagBaseDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a accountUserTagBaseDo) Joins(fields ...field.RelationField) *accountUserTagBaseDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a accountUserTagBaseDo) Preload(fields ...field.RelationField) *accountUserTagBaseDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a accountUserTagBaseDo) FirstOrInit() (*entity.AccountUserTagBase, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.AccountUserTagBase), nil
	}
}

func (a accountUserTagBaseDo) FirstOrCreate() (*entity.AccountUserTagBase, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.AccountUserTagBase), nil
	}
}

func (a accountUserTagBaseDo) FindByPage(offset int, limit int) (result []*entity.AccountUserTagBase, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a accountUserTagBaseDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a accountUserTagBaseDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a accountUserTagBaseDo) Delete(models ...*entity.AccountUserTagBase) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *accountUserTagBaseDo) withDO(do gen.Dao) *accountUserTagBaseDo {
	a.DO = *do.(*gen.DO)
	return a
}
