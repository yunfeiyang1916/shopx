// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"shopx/app/account-srv/internal/biz/entity"
)

func newAccountUserChannel(db *gorm.DB, opts ...gen.DOOption) accountUserChannel {
	_accountUserChannel := accountUserChannel{}

	_accountUserChannel.accountUserChannelDo.UseDB(db, opts...)
	_accountUserChannel.accountUserChannelDo.UseModel(&entity.AccountUserChannel{})

	tableName := _accountUserChannel.accountUserChannelDo.TableName()
	_accountUserChannel.ALL = field.NewAsterisk(tableName)
	_accountUserChannel.UserChannelID = field.NewInt32(tableName, "user_channel_id")
	_accountUserChannel.UserChannelName = field.NewString(tableName, "user_channel_name")
	_accountUserChannel.UserChannelPrefix = field.NewString(tableName, "user_channel_prefix")
	_accountUserChannel.UserChannelEnable = field.NewInt32(tableName, "user_channel_enable")
	_accountUserChannel.UserChannelBuildin = field.NewInt32(tableName, "user_channel_buildin")

	_accountUserChannel.fillFieldMap()

	return _accountUserChannel
}

// accountUserChannel 用户渠道表
type accountUserChannel struct {
	accountUserChannelDo accountUserChannelDo

	ALL                field.Asterisk
	UserChannelID      field.Int32  // 渠道编号
	UserChannelName    field.String // 渠道名称
	UserChannelPrefix  field.String // 渠道前缀
	UserChannelEnable  field.Int32  // 是否启用(BOOL):0-禁用;1-启用
	UserChannelBuildin field.Int32  // 是否内置(BOOL):0-非内置;1-内置

	fieldMap map[string]field.Expr
}

func (a accountUserChannel) Table(newTableName string) *accountUserChannel {
	a.accountUserChannelDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a accountUserChannel) As(alias string) *accountUserChannel {
	a.accountUserChannelDo.DO = *(a.accountUserChannelDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *accountUserChannel) updateTableName(table string) *accountUserChannel {
	a.ALL = field.NewAsterisk(table)
	a.UserChannelID = field.NewInt32(table, "user_channel_id")
	a.UserChannelName = field.NewString(table, "user_channel_name")
	a.UserChannelPrefix = field.NewString(table, "user_channel_prefix")
	a.UserChannelEnable = field.NewInt32(table, "user_channel_enable")
	a.UserChannelBuildin = field.NewInt32(table, "user_channel_buildin")

	a.fillFieldMap()

	return a
}

func (a *accountUserChannel) WithContext(ctx context.Context) *accountUserChannelDo {
	return a.accountUserChannelDo.WithContext(ctx)
}

func (a accountUserChannel) TableName() string { return a.accountUserChannelDo.TableName() }

func (a accountUserChannel) Alias() string { return a.accountUserChannelDo.Alias() }

func (a accountUserChannel) Columns(cols ...field.Expr) gen.Columns {
	return a.accountUserChannelDo.Columns(cols...)
}

func (a *accountUserChannel) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *accountUserChannel) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 5)
	a.fieldMap["user_channel_id"] = a.UserChannelID
	a.fieldMap["user_channel_name"] = a.UserChannelName
	a.fieldMap["user_channel_prefix"] = a.UserChannelPrefix
	a.fieldMap["user_channel_enable"] = a.UserChannelEnable
	a.fieldMap["user_channel_buildin"] = a.UserChannelBuildin
}

func (a accountUserChannel) clone(db *gorm.DB) accountUserChannel {
	a.accountUserChannelDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a accountUserChannel) replaceDB(db *gorm.DB) accountUserChannel {
	a.accountUserChannelDo.ReplaceDB(db)
	return a
}

type accountUserChannelDo struct{ gen.DO }

func (a accountUserChannelDo) Debug() *accountUserChannelDo {
	return a.withDO(a.DO.Debug())
}

func (a accountUserChannelDo) WithContext(ctx context.Context) *accountUserChannelDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a accountUserChannelDo) ReadDB() *accountUserChannelDo {
	return a.Clauses(dbresolver.Read)
}

func (a accountUserChannelDo) WriteDB() *accountUserChannelDo {
	return a.Clauses(dbresolver.Write)
}

func (a accountUserChannelDo) Session(config *gorm.Session) *accountUserChannelDo {
	return a.withDO(a.DO.Session(config))
}

func (a accountUserChannelDo) Clauses(conds ...clause.Expression) *accountUserChannelDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a accountUserChannelDo) Returning(value interface{}, columns ...string) *accountUserChannelDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a accountUserChannelDo) Not(conds ...gen.Condition) *accountUserChannelDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a accountUserChannelDo) Or(conds ...gen.Condition) *accountUserChannelDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a accountUserChannelDo) Select(conds ...field.Expr) *accountUserChannelDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a accountUserChannelDo) Where(conds ...gen.Condition) *accountUserChannelDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a accountUserChannelDo) Order(conds ...field.Expr) *accountUserChannelDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a accountUserChannelDo) Distinct(cols ...field.Expr) *accountUserChannelDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a accountUserChannelDo) Omit(cols ...field.Expr) *accountUserChannelDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a accountUserChannelDo) Join(table schema.Tabler, on ...field.Expr) *accountUserChannelDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a accountUserChannelDo) LeftJoin(table schema.Tabler, on ...field.Expr) *accountUserChannelDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a accountUserChannelDo) RightJoin(table schema.Tabler, on ...field.Expr) *accountUserChannelDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a accountUserChannelDo) Group(cols ...field.Expr) *accountUserChannelDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a accountUserChannelDo) Having(conds ...gen.Condition) *accountUserChannelDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a accountUserChannelDo) Limit(limit int) *accountUserChannelDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a accountUserChannelDo) Offset(offset int) *accountUserChannelDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a accountUserChannelDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *accountUserChannelDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a accountUserChannelDo) Unscoped() *accountUserChannelDo {
	return a.withDO(a.DO.Unscoped())
}

func (a accountUserChannelDo) Create(values ...*entity.AccountUserChannel) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a accountUserChannelDo) CreateInBatches(values []*entity.AccountUserChannel, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a accountUserChannelDo) Save(values ...*entity.AccountUserChannel) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a accountUserChannelDo) First() (*entity.AccountUserChannel, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.AccountUserChannel), nil
	}
}

func (a accountUserChannelDo) Take() (*entity.AccountUserChannel, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.AccountUserChannel), nil
	}
}

func (a accountUserChannelDo) Last() (*entity.AccountUserChannel, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.AccountUserChannel), nil
	}
}

func (a accountUserChannelDo) Find() ([]*entity.AccountUserChannel, error) {
	result, err := a.DO.Find()
	return result.([]*entity.AccountUserChannel), err
}

func (a accountUserChannelDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.AccountUserChannel, err error) {
	buf := make([]*entity.AccountUserChannel, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a accountUserChannelDo) FindInBatches(result *[]*entity.AccountUserChannel, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a accountUserChannelDo) Attrs(attrs ...field.AssignExpr) *accountUserChannelDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a accountUserChannelDo) Assign(attrs ...field.AssignExpr) *accountUserChannelDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a accountUserChannelDo) Joins(fields ...field.RelationField) *accountUserChannelDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a accountUserChannelDo) Preload(fields ...field.RelationField) *accountUserChannelDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a accountUserChannelDo) FirstOrInit() (*entity.AccountUserChannel, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.AccountUserChannel), nil
	}
}

func (a accountUserChannelDo) FirstOrCreate() (*entity.AccountUserChannel, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.AccountUserChannel), nil
	}
}

func (a accountUserChannelDo) FindByPage(offset int, limit int) (result []*entity.AccountUserChannel, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a accountUserChannelDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a accountUserChannelDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a accountUserChannelDo) Delete(models ...*entity.AccountUserChannel) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *accountUserChannelDo) withDO(do gen.Dao) *accountUserChannelDo {
	a.DO = *do.(*gen.DO)
	return a
}
