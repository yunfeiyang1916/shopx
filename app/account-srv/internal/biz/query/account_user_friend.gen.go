// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"shopx/app/account-srv/internal/biz/entity"
)

func newAccountUserFriend(db *gorm.DB, opts ...gen.DOOption) accountUserFriend {
	_accountUserFriend := accountUserFriend{}

	_accountUserFriend.accountUserFriendDo.UseDB(db, opts...)
	_accountUserFriend.accountUserFriendDo.UseModel(&entity.AccountUserFriend{})

	tableName := _accountUserFriend.accountUserFriendDo.TableName()
	_accountUserFriend.ALL = field.NewAsterisk(tableName)
	_accountUserFriend.UserFriendID = field.NewInt32(tableName, "user_friend_id")
	_accountUserFriend.UserID = field.NewInt32(tableName, "user_id")
	_accountUserFriend.FriendID = field.NewInt32(tableName, "friend_id")
	_accountUserFriend.FriendNote = field.NewString(tableName, "friend_note")
	_accountUserFriend.UserFriendAddtime = field.NewInt64(tableName, "user_friend_addtime")
	_accountUserFriend.FriendState = field.NewInt32(tableName, "friend_state")
	_accountUserFriend.FriendInvite = field.NewInt32(tableName, "friend_invite")

	_accountUserFriend.fillFieldMap()

	return _accountUserFriend
}

// accountUserFriend 用户好友关系表
type accountUserFriend struct {
	accountUserFriendDo accountUserFriendDo

	ALL               field.Asterisk
	UserFriendID      field.Int32
	UserID            field.Int32  // 用户编号
	FriendID          field.Int32  // 好友编号
	FriendNote        field.String // 备注名称
	UserFriendAddtime field.Int64  // 添加时间
	FriendState       field.Int32  // 关注状态(ENUM):1-单向关注;2-双向关注
	FriendInvite      field.Int32  // 邀请状态(ENUM):0-新邀请;2-处理完成后邀请

	fieldMap map[string]field.Expr
}

func (a accountUserFriend) Table(newTableName string) *accountUserFriend {
	a.accountUserFriendDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a accountUserFriend) As(alias string) *accountUserFriend {
	a.accountUserFriendDo.DO = *(a.accountUserFriendDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *accountUserFriend) updateTableName(table string) *accountUserFriend {
	a.ALL = field.NewAsterisk(table)
	a.UserFriendID = field.NewInt32(table, "user_friend_id")
	a.UserID = field.NewInt32(table, "user_id")
	a.FriendID = field.NewInt32(table, "friend_id")
	a.FriendNote = field.NewString(table, "friend_note")
	a.UserFriendAddtime = field.NewInt64(table, "user_friend_addtime")
	a.FriendState = field.NewInt32(table, "friend_state")
	a.FriendInvite = field.NewInt32(table, "friend_invite")

	a.fillFieldMap()

	return a
}

func (a *accountUserFriend) WithContext(ctx context.Context) *accountUserFriendDo {
	return a.accountUserFriendDo.WithContext(ctx)
}

func (a accountUserFriend) TableName() string { return a.accountUserFriendDo.TableName() }

func (a accountUserFriend) Alias() string { return a.accountUserFriendDo.Alias() }

func (a accountUserFriend) Columns(cols ...field.Expr) gen.Columns {
	return a.accountUserFriendDo.Columns(cols...)
}

func (a *accountUserFriend) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *accountUserFriend) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 7)
	a.fieldMap["user_friend_id"] = a.UserFriendID
	a.fieldMap["user_id"] = a.UserID
	a.fieldMap["friend_id"] = a.FriendID
	a.fieldMap["friend_note"] = a.FriendNote
	a.fieldMap["user_friend_addtime"] = a.UserFriendAddtime
	a.fieldMap["friend_state"] = a.FriendState
	a.fieldMap["friend_invite"] = a.FriendInvite
}

func (a accountUserFriend) clone(db *gorm.DB) accountUserFriend {
	a.accountUserFriendDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a accountUserFriend) replaceDB(db *gorm.DB) accountUserFriend {
	a.accountUserFriendDo.ReplaceDB(db)
	return a
}

type accountUserFriendDo struct{ gen.DO }

func (a accountUserFriendDo) Debug() *accountUserFriendDo {
	return a.withDO(a.DO.Debug())
}

func (a accountUserFriendDo) WithContext(ctx context.Context) *accountUserFriendDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a accountUserFriendDo) ReadDB() *accountUserFriendDo {
	return a.Clauses(dbresolver.Read)
}

func (a accountUserFriendDo) WriteDB() *accountUserFriendDo {
	return a.Clauses(dbresolver.Write)
}

func (a accountUserFriendDo) Session(config *gorm.Session) *accountUserFriendDo {
	return a.withDO(a.DO.Session(config))
}

func (a accountUserFriendDo) Clauses(conds ...clause.Expression) *accountUserFriendDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a accountUserFriendDo) Returning(value interface{}, columns ...string) *accountUserFriendDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a accountUserFriendDo) Not(conds ...gen.Condition) *accountUserFriendDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a accountUserFriendDo) Or(conds ...gen.Condition) *accountUserFriendDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a accountUserFriendDo) Select(conds ...field.Expr) *accountUserFriendDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a accountUserFriendDo) Where(conds ...gen.Condition) *accountUserFriendDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a accountUserFriendDo) Order(conds ...field.Expr) *accountUserFriendDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a accountUserFriendDo) Distinct(cols ...field.Expr) *accountUserFriendDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a accountUserFriendDo) Omit(cols ...field.Expr) *accountUserFriendDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a accountUserFriendDo) Join(table schema.Tabler, on ...field.Expr) *accountUserFriendDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a accountUserFriendDo) LeftJoin(table schema.Tabler, on ...field.Expr) *accountUserFriendDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a accountUserFriendDo) RightJoin(table schema.Tabler, on ...field.Expr) *accountUserFriendDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a accountUserFriendDo) Group(cols ...field.Expr) *accountUserFriendDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a accountUserFriendDo) Having(conds ...gen.Condition) *accountUserFriendDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a accountUserFriendDo) Limit(limit int) *accountUserFriendDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a accountUserFriendDo) Offset(offset int) *accountUserFriendDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a accountUserFriendDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *accountUserFriendDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a accountUserFriendDo) Unscoped() *accountUserFriendDo {
	return a.withDO(a.DO.Unscoped())
}

func (a accountUserFriendDo) Create(values ...*entity.AccountUserFriend) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a accountUserFriendDo) CreateInBatches(values []*entity.AccountUserFriend, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a accountUserFriendDo) Save(values ...*entity.AccountUserFriend) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a accountUserFriendDo) First() (*entity.AccountUserFriend, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.AccountUserFriend), nil
	}
}

func (a accountUserFriendDo) Take() (*entity.AccountUserFriend, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.AccountUserFriend), nil
	}
}

func (a accountUserFriendDo) Last() (*entity.AccountUserFriend, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.AccountUserFriend), nil
	}
}

func (a accountUserFriendDo) Find() ([]*entity.AccountUserFriend, error) {
	result, err := a.DO.Find()
	return result.([]*entity.AccountUserFriend), err
}

func (a accountUserFriendDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.AccountUserFriend, err error) {
	buf := make([]*entity.AccountUserFriend, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a accountUserFriendDo) FindInBatches(result *[]*entity.AccountUserFriend, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a accountUserFriendDo) Attrs(attrs ...field.AssignExpr) *accountUserFriendDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a accountUserFriendDo) Assign(attrs ...field.AssignExpr) *accountUserFriendDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a accountUserFriendDo) Joins(fields ...field.RelationField) *accountUserFriendDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a accountUserFriendDo) Preload(fields ...field.RelationField) *accountUserFriendDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a accountUserFriendDo) FirstOrInit() (*entity.AccountUserFriend, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.AccountUserFriend), nil
	}
}

func (a accountUserFriendDo) FirstOrCreate() (*entity.AccountUserFriend, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.AccountUserFriend), nil
	}
}

func (a accountUserFriendDo) FindByPage(offset int, limit int) (result []*entity.AccountUserFriend, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a accountUserFriendDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a accountUserFriendDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a accountUserFriendDo) Delete(models ...*entity.AccountUserFriend) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *accountUserFriendDo) withDO(do gen.Dao) *accountUserFriendDo {
	a.DO = *do.(*gen.DO)
	return a
}
