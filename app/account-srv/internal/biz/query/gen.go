// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:                         db,
		AccountUserAnalytic:        newAccountUserAnalytic(db, opts...),
		AccountUserBase:            newAccountUserBase(db, opts...),
		AccountUserBindConnect:     newAccountUserBindConnect(db, opts...),
		AccountUserBlock:           newAccountUserBlock(db, opts...),
		AccountUserCard:            newAccountUserCard(db, opts...),
		AccountUserChannel:         newAccountUserChannel(db, opts...),
		AccountUserChannelCode:     newAccountUserChannelCode(db, opts...),
		AccountUserDeliveryAddress: newAccountUserDeliveryAddress(db, opts...),
		AccountUserDistribution:    newAccountUserDistribution(db, opts...),
		AccountUserFriend:          newAccountUserFriend(db, opts...),
		AccountUserGroup:           newAccountUserGroup(db, opts...),
		AccountUserGroupRel:        newAccountUserGroupRel(db, opts...),
		AccountUserHistory:         newAccountUserHistory(db, opts...),
		AccountUserInfo:            newAccountUserInfo(db, opts...),
		AccountUserInvoice:         newAccountUserInvoice(db, opts...),
		AccountUserLevel:           newAccountUserLevel(db, opts...),
		AccountUserLevelLog:        newAccountUserLevelLog(db, opts...),
		AccountUserLogin:           newAccountUserLogin(db, opts...),
		AccountUserLoginHistory:    newAccountUserLoginHistory(db, opts...),
		AccountUserMessage:         newAccountUserMessage(db, opts...),
		AccountUserSn:              newAccountUserSn(db, opts...),
		AccountUserTagBase:         newAccountUserTagBase(db, opts...),
		AccountUserTagGroup:        newAccountUserTagGroup(db, opts...),
		AccountUserZone:            newAccountUserZone(db, opts...),
		AccountUserZoneMessage:     newAccountUserZoneMessage(db, opts...),
		AccountUserZoneRel:         newAccountUserZoneRel(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	AccountUserAnalytic        accountUserAnalytic
	AccountUserBase            accountUserBase
	AccountUserBindConnect     accountUserBindConnect
	AccountUserBlock           accountUserBlock
	AccountUserCard            accountUserCard
	AccountUserChannel         accountUserChannel
	AccountUserChannelCode     accountUserChannelCode
	AccountUserDeliveryAddress accountUserDeliveryAddress
	AccountUserDistribution    accountUserDistribution
	AccountUserFriend          accountUserFriend
	AccountUserGroup           accountUserGroup
	AccountUserGroupRel        accountUserGroupRel
	AccountUserHistory         accountUserHistory
	AccountUserInfo            accountUserInfo
	AccountUserInvoice         accountUserInvoice
	AccountUserLevel           accountUserLevel
	AccountUserLevelLog        accountUserLevelLog
	AccountUserLogin           accountUserLogin
	AccountUserLoginHistory    accountUserLoginHistory
	AccountUserMessage         accountUserMessage
	AccountUserSn              accountUserSn
	AccountUserTagBase         accountUserTagBase
	AccountUserTagGroup        accountUserTagGroup
	AccountUserZone            accountUserZone
	AccountUserZoneMessage     accountUserZoneMessage
	AccountUserZoneRel         accountUserZoneRel
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                         db,
		AccountUserAnalytic:        q.AccountUserAnalytic.clone(db),
		AccountUserBase:            q.AccountUserBase.clone(db),
		AccountUserBindConnect:     q.AccountUserBindConnect.clone(db),
		AccountUserBlock:           q.AccountUserBlock.clone(db),
		AccountUserCard:            q.AccountUserCard.clone(db),
		AccountUserChannel:         q.AccountUserChannel.clone(db),
		AccountUserChannelCode:     q.AccountUserChannelCode.clone(db),
		AccountUserDeliveryAddress: q.AccountUserDeliveryAddress.clone(db),
		AccountUserDistribution:    q.AccountUserDistribution.clone(db),
		AccountUserFriend:          q.AccountUserFriend.clone(db),
		AccountUserGroup:           q.AccountUserGroup.clone(db),
		AccountUserGroupRel:        q.AccountUserGroupRel.clone(db),
		AccountUserHistory:         q.AccountUserHistory.clone(db),
		AccountUserInfo:            q.AccountUserInfo.clone(db),
		AccountUserInvoice:         q.AccountUserInvoice.clone(db),
		AccountUserLevel:           q.AccountUserLevel.clone(db),
		AccountUserLevelLog:        q.AccountUserLevelLog.clone(db),
		AccountUserLogin:           q.AccountUserLogin.clone(db),
		AccountUserLoginHistory:    q.AccountUserLoginHistory.clone(db),
		AccountUserMessage:         q.AccountUserMessage.clone(db),
		AccountUserSn:              q.AccountUserSn.clone(db),
		AccountUserTagBase:         q.AccountUserTagBase.clone(db),
		AccountUserTagGroup:        q.AccountUserTagGroup.clone(db),
		AccountUserZone:            q.AccountUserZone.clone(db),
		AccountUserZoneMessage:     q.AccountUserZoneMessage.clone(db),
		AccountUserZoneRel:         q.AccountUserZoneRel.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:                         db,
		AccountUserAnalytic:        q.AccountUserAnalytic.replaceDB(db),
		AccountUserBase:            q.AccountUserBase.replaceDB(db),
		AccountUserBindConnect:     q.AccountUserBindConnect.replaceDB(db),
		AccountUserBlock:           q.AccountUserBlock.replaceDB(db),
		AccountUserCard:            q.AccountUserCard.replaceDB(db),
		AccountUserChannel:         q.AccountUserChannel.replaceDB(db),
		AccountUserChannelCode:     q.AccountUserChannelCode.replaceDB(db),
		AccountUserDeliveryAddress: q.AccountUserDeliveryAddress.replaceDB(db),
		AccountUserDistribution:    q.AccountUserDistribution.replaceDB(db),
		AccountUserFriend:          q.AccountUserFriend.replaceDB(db),
		AccountUserGroup:           q.AccountUserGroup.replaceDB(db),
		AccountUserGroupRel:        q.AccountUserGroupRel.replaceDB(db),
		AccountUserHistory:         q.AccountUserHistory.replaceDB(db),
		AccountUserInfo:            q.AccountUserInfo.replaceDB(db),
		AccountUserInvoice:         q.AccountUserInvoice.replaceDB(db),
		AccountUserLevel:           q.AccountUserLevel.replaceDB(db),
		AccountUserLevelLog:        q.AccountUserLevelLog.replaceDB(db),
		AccountUserLogin:           q.AccountUserLogin.replaceDB(db),
		AccountUserLoginHistory:    q.AccountUserLoginHistory.replaceDB(db),
		AccountUserMessage:         q.AccountUserMessage.replaceDB(db),
		AccountUserSn:              q.AccountUserSn.replaceDB(db),
		AccountUserTagBase:         q.AccountUserTagBase.replaceDB(db),
		AccountUserTagGroup:        q.AccountUserTagGroup.replaceDB(db),
		AccountUserZone:            q.AccountUserZone.replaceDB(db),
		AccountUserZoneMessage:     q.AccountUserZoneMessage.replaceDB(db),
		AccountUserZoneRel:         q.AccountUserZoneRel.replaceDB(db),
	}
}

type queryCtx struct {
	AccountUserAnalytic        *accountUserAnalyticDo
	AccountUserBase            *accountUserBaseDo
	AccountUserBindConnect     *accountUserBindConnectDo
	AccountUserBlock           *accountUserBlockDo
	AccountUserCard            *accountUserCardDo
	AccountUserChannel         *accountUserChannelDo
	AccountUserChannelCode     *accountUserChannelCodeDo
	AccountUserDeliveryAddress *accountUserDeliveryAddressDo
	AccountUserDistribution    *accountUserDistributionDo
	AccountUserFriend          *accountUserFriendDo
	AccountUserGroup           *accountUserGroupDo
	AccountUserGroupRel        *accountUserGroupRelDo
	AccountUserHistory         *accountUserHistoryDo
	AccountUserInfo            *accountUserInfoDo
	AccountUserInvoice         *accountUserInvoiceDo
	AccountUserLevel           *accountUserLevelDo
	AccountUserLevelLog        *accountUserLevelLogDo
	AccountUserLogin           *accountUserLoginDo
	AccountUserLoginHistory    *accountUserLoginHistoryDo
	AccountUserMessage         *accountUserMessageDo
	AccountUserSn              *accountUserSnDo
	AccountUserTagBase         *accountUserTagBaseDo
	AccountUserTagGroup        *accountUserTagGroupDo
	AccountUserZone            *accountUserZoneDo
	AccountUserZoneMessage     *accountUserZoneMessageDo
	AccountUserZoneRel         *accountUserZoneRelDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		AccountUserAnalytic:        q.AccountUserAnalytic.WithContext(ctx),
		AccountUserBase:            q.AccountUserBase.WithContext(ctx),
		AccountUserBindConnect:     q.AccountUserBindConnect.WithContext(ctx),
		AccountUserBlock:           q.AccountUserBlock.WithContext(ctx),
		AccountUserCard:            q.AccountUserCard.WithContext(ctx),
		AccountUserChannel:         q.AccountUserChannel.WithContext(ctx),
		AccountUserChannelCode:     q.AccountUserChannelCode.WithContext(ctx),
		AccountUserDeliveryAddress: q.AccountUserDeliveryAddress.WithContext(ctx),
		AccountUserDistribution:    q.AccountUserDistribution.WithContext(ctx),
		AccountUserFriend:          q.AccountUserFriend.WithContext(ctx),
		AccountUserGroup:           q.AccountUserGroup.WithContext(ctx),
		AccountUserGroupRel:        q.AccountUserGroupRel.WithContext(ctx),
		AccountUserHistory:         q.AccountUserHistory.WithContext(ctx),
		AccountUserInfo:            q.AccountUserInfo.WithContext(ctx),
		AccountUserInvoice:         q.AccountUserInvoice.WithContext(ctx),
		AccountUserLevel:           q.AccountUserLevel.WithContext(ctx),
		AccountUserLevelLog:        q.AccountUserLevelLog.WithContext(ctx),
		AccountUserLogin:           q.AccountUserLogin.WithContext(ctx),
		AccountUserLoginHistory:    q.AccountUserLoginHistory.WithContext(ctx),
		AccountUserMessage:         q.AccountUserMessage.WithContext(ctx),
		AccountUserSn:              q.AccountUserSn.WithContext(ctx),
		AccountUserTagBase:         q.AccountUserTagBase.WithContext(ctx),
		AccountUserTagGroup:        q.AccountUserTagGroup.WithContext(ctx),
		AccountUserZone:            q.AccountUserZone.WithContext(ctx),
		AccountUserZoneMessage:     q.AccountUserZoneMessage.WithContext(ctx),
		AccountUserZoneRel:         q.AccountUserZoneRel.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
