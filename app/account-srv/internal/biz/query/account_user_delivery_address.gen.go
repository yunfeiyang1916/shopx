// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"shopx/app/account-srv/internal/biz/entity"
)

func newAccountUserDeliveryAddress(db *gorm.DB, opts ...gen.DOOption) accountUserDeliveryAddress {
	_accountUserDeliveryAddress := accountUserDeliveryAddress{}

	_accountUserDeliveryAddress.accountUserDeliveryAddressDo.UseDB(db, opts...)
	_accountUserDeliveryAddress.accountUserDeliveryAddressDo.UseModel(&entity.AccountUserDeliveryAddress{})

	tableName := _accountUserDeliveryAddress.accountUserDeliveryAddressDo.TableName()
	_accountUserDeliveryAddress.ALL = field.NewAsterisk(tableName)
	_accountUserDeliveryAddress.UdID = field.NewInt32(tableName, "ud_id")
	_accountUserDeliveryAddress.UserID = field.NewInt32(tableName, "user_id")
	_accountUserDeliveryAddress.UdName = field.NewString(tableName, "ud_name")
	_accountUserDeliveryAddress.UdIntl = field.NewString(tableName, "ud_intl")
	_accountUserDeliveryAddress.UdMobile = field.NewString(tableName, "ud_mobile")
	_accountUserDeliveryAddress.UdTelephone = field.NewString(tableName, "ud_telephone")
	_accountUserDeliveryAddress.UdProvinceID = field.NewInt32(tableName, "ud_province_id")
	_accountUserDeliveryAddress.UdProvince = field.NewString(tableName, "ud_province")
	_accountUserDeliveryAddress.UdCityID = field.NewInt32(tableName, "ud_city_id")
	_accountUserDeliveryAddress.UdCity = field.NewString(tableName, "ud_city")
	_accountUserDeliveryAddress.UdCountyID = field.NewInt32(tableName, "ud_county_id")
	_accountUserDeliveryAddress.UdCounty = field.NewString(tableName, "ud_county")
	_accountUserDeliveryAddress.UdAddress = field.NewString(tableName, "ud_address")
	_accountUserDeliveryAddress.UdPostalcode = field.NewString(tableName, "ud_postalcode")
	_accountUserDeliveryAddress.UdTagName = field.NewString(tableName, "ud_tag_name")
	_accountUserDeliveryAddress.UdLongitude = field.NewFloat64(tableName, "ud_longitude")
	_accountUserDeliveryAddress.UdLatitude = field.NewFloat64(tableName, "ud_latitude")
	_accountUserDeliveryAddress.UdTime = field.NewTime(tableName, "ud_time")
	_accountUserDeliveryAddress.UdIsDefault = field.NewField(tableName, "ud_is_default")

	_accountUserDeliveryAddress.fillFieldMap()

	return _accountUserDeliveryAddress
}

// accountUserDeliveryAddress 用户地址表
type accountUserDeliveryAddress struct {
	accountUserDeliveryAddressDo accountUserDeliveryAddressDo

	ALL          field.Asterisk
	UdID         field.Int32   // 地址编号
	UserID       field.Int32   // 用户编号
	UdName       field.String  // 联系人
	UdIntl       field.String  // 国家编码
	UdMobile     field.String  // 手机号码
	UdTelephone  field.String  // 联系电话
	UdProvinceID field.Int32   // 省编号
	UdProvince   field.String  // 省份
	UdCityID     field.Int32   // 市编号
	UdCity       field.String  // 市
	UdCountyID   field.Int32   // 县
	UdCounty     field.String  // 县区
	UdAddress    field.String  // 详细地址
	UdPostalcode field.String  // 邮政编码
	UdTagName    field.String  // 地址标签(ENUM):1001-家里;1002-公司
	UdLongitude  field.Float64 // 经度
	UdLatitude   field.Float64 // 纬读
	UdTime       field.Time    // 添加时间
	UdIsDefault  field.Field   // 是否默认(BOOL):0-非默认;1-默认

	fieldMap map[string]field.Expr
}

func (a accountUserDeliveryAddress) Table(newTableName string) *accountUserDeliveryAddress {
	a.accountUserDeliveryAddressDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a accountUserDeliveryAddress) As(alias string) *accountUserDeliveryAddress {
	a.accountUserDeliveryAddressDo.DO = *(a.accountUserDeliveryAddressDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *accountUserDeliveryAddress) updateTableName(table string) *accountUserDeliveryAddress {
	a.ALL = field.NewAsterisk(table)
	a.UdID = field.NewInt32(table, "ud_id")
	a.UserID = field.NewInt32(table, "user_id")
	a.UdName = field.NewString(table, "ud_name")
	a.UdIntl = field.NewString(table, "ud_intl")
	a.UdMobile = field.NewString(table, "ud_mobile")
	a.UdTelephone = field.NewString(table, "ud_telephone")
	a.UdProvinceID = field.NewInt32(table, "ud_province_id")
	a.UdProvince = field.NewString(table, "ud_province")
	a.UdCityID = field.NewInt32(table, "ud_city_id")
	a.UdCity = field.NewString(table, "ud_city")
	a.UdCountyID = field.NewInt32(table, "ud_county_id")
	a.UdCounty = field.NewString(table, "ud_county")
	a.UdAddress = field.NewString(table, "ud_address")
	a.UdPostalcode = field.NewString(table, "ud_postalcode")
	a.UdTagName = field.NewString(table, "ud_tag_name")
	a.UdLongitude = field.NewFloat64(table, "ud_longitude")
	a.UdLatitude = field.NewFloat64(table, "ud_latitude")
	a.UdTime = field.NewTime(table, "ud_time")
	a.UdIsDefault = field.NewField(table, "ud_is_default")

	a.fillFieldMap()

	return a
}

func (a *accountUserDeliveryAddress) WithContext(ctx context.Context) *accountUserDeliveryAddressDo {
	return a.accountUserDeliveryAddressDo.WithContext(ctx)
}

func (a accountUserDeliveryAddress) TableName() string {
	return a.accountUserDeliveryAddressDo.TableName()
}

func (a accountUserDeliveryAddress) Alias() string { return a.accountUserDeliveryAddressDo.Alias() }

func (a accountUserDeliveryAddress) Columns(cols ...field.Expr) gen.Columns {
	return a.accountUserDeliveryAddressDo.Columns(cols...)
}

func (a *accountUserDeliveryAddress) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *accountUserDeliveryAddress) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 19)
	a.fieldMap["ud_id"] = a.UdID
	a.fieldMap["user_id"] = a.UserID
	a.fieldMap["ud_name"] = a.UdName
	a.fieldMap["ud_intl"] = a.UdIntl
	a.fieldMap["ud_mobile"] = a.UdMobile
	a.fieldMap["ud_telephone"] = a.UdTelephone
	a.fieldMap["ud_province_id"] = a.UdProvinceID
	a.fieldMap["ud_province"] = a.UdProvince
	a.fieldMap["ud_city_id"] = a.UdCityID
	a.fieldMap["ud_city"] = a.UdCity
	a.fieldMap["ud_county_id"] = a.UdCountyID
	a.fieldMap["ud_county"] = a.UdCounty
	a.fieldMap["ud_address"] = a.UdAddress
	a.fieldMap["ud_postalcode"] = a.UdPostalcode
	a.fieldMap["ud_tag_name"] = a.UdTagName
	a.fieldMap["ud_longitude"] = a.UdLongitude
	a.fieldMap["ud_latitude"] = a.UdLatitude
	a.fieldMap["ud_time"] = a.UdTime
	a.fieldMap["ud_is_default"] = a.UdIsDefault
}

func (a accountUserDeliveryAddress) clone(db *gorm.DB) accountUserDeliveryAddress {
	a.accountUserDeliveryAddressDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a accountUserDeliveryAddress) replaceDB(db *gorm.DB) accountUserDeliveryAddress {
	a.accountUserDeliveryAddressDo.ReplaceDB(db)
	return a
}

type accountUserDeliveryAddressDo struct{ gen.DO }

func (a accountUserDeliveryAddressDo) Debug() *accountUserDeliveryAddressDo {
	return a.withDO(a.DO.Debug())
}

func (a accountUserDeliveryAddressDo) WithContext(ctx context.Context) *accountUserDeliveryAddressDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a accountUserDeliveryAddressDo) ReadDB() *accountUserDeliveryAddressDo {
	return a.Clauses(dbresolver.Read)
}

func (a accountUserDeliveryAddressDo) WriteDB() *accountUserDeliveryAddressDo {
	return a.Clauses(dbresolver.Write)
}

func (a accountUserDeliveryAddressDo) Session(config *gorm.Session) *accountUserDeliveryAddressDo {
	return a.withDO(a.DO.Session(config))
}

func (a accountUserDeliveryAddressDo) Clauses(conds ...clause.Expression) *accountUserDeliveryAddressDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a accountUserDeliveryAddressDo) Returning(value interface{}, columns ...string) *accountUserDeliveryAddressDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a accountUserDeliveryAddressDo) Not(conds ...gen.Condition) *accountUserDeliveryAddressDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a accountUserDeliveryAddressDo) Or(conds ...gen.Condition) *accountUserDeliveryAddressDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a accountUserDeliveryAddressDo) Select(conds ...field.Expr) *accountUserDeliveryAddressDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a accountUserDeliveryAddressDo) Where(conds ...gen.Condition) *accountUserDeliveryAddressDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a accountUserDeliveryAddressDo) Order(conds ...field.Expr) *accountUserDeliveryAddressDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a accountUserDeliveryAddressDo) Distinct(cols ...field.Expr) *accountUserDeliveryAddressDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a accountUserDeliveryAddressDo) Omit(cols ...field.Expr) *accountUserDeliveryAddressDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a accountUserDeliveryAddressDo) Join(table schema.Tabler, on ...field.Expr) *accountUserDeliveryAddressDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a accountUserDeliveryAddressDo) LeftJoin(table schema.Tabler, on ...field.Expr) *accountUserDeliveryAddressDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a accountUserDeliveryAddressDo) RightJoin(table schema.Tabler, on ...field.Expr) *accountUserDeliveryAddressDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a accountUserDeliveryAddressDo) Group(cols ...field.Expr) *accountUserDeliveryAddressDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a accountUserDeliveryAddressDo) Having(conds ...gen.Condition) *accountUserDeliveryAddressDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a accountUserDeliveryAddressDo) Limit(limit int) *accountUserDeliveryAddressDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a accountUserDeliveryAddressDo) Offset(offset int) *accountUserDeliveryAddressDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a accountUserDeliveryAddressDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *accountUserDeliveryAddressDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a accountUserDeliveryAddressDo) Unscoped() *accountUserDeliveryAddressDo {
	return a.withDO(a.DO.Unscoped())
}

func (a accountUserDeliveryAddressDo) Create(values ...*entity.AccountUserDeliveryAddress) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a accountUserDeliveryAddressDo) CreateInBatches(values []*entity.AccountUserDeliveryAddress, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a accountUserDeliveryAddressDo) Save(values ...*entity.AccountUserDeliveryAddress) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a accountUserDeliveryAddressDo) First() (*entity.AccountUserDeliveryAddress, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.AccountUserDeliveryAddress), nil
	}
}

func (a accountUserDeliveryAddressDo) Take() (*entity.AccountUserDeliveryAddress, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.AccountUserDeliveryAddress), nil
	}
}

func (a accountUserDeliveryAddressDo) Last() (*entity.AccountUserDeliveryAddress, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.AccountUserDeliveryAddress), nil
	}
}

func (a accountUserDeliveryAddressDo) Find() ([]*entity.AccountUserDeliveryAddress, error) {
	result, err := a.DO.Find()
	return result.([]*entity.AccountUserDeliveryAddress), err
}

func (a accountUserDeliveryAddressDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.AccountUserDeliveryAddress, err error) {
	buf := make([]*entity.AccountUserDeliveryAddress, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a accountUserDeliveryAddressDo) FindInBatches(result *[]*entity.AccountUserDeliveryAddress, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a accountUserDeliveryAddressDo) Attrs(attrs ...field.AssignExpr) *accountUserDeliveryAddressDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a accountUserDeliveryAddressDo) Assign(attrs ...field.AssignExpr) *accountUserDeliveryAddressDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a accountUserDeliveryAddressDo) Joins(fields ...field.RelationField) *accountUserDeliveryAddressDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a accountUserDeliveryAddressDo) Preload(fields ...field.RelationField) *accountUserDeliveryAddressDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a accountUserDeliveryAddressDo) FirstOrInit() (*entity.AccountUserDeliveryAddress, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.AccountUserDeliveryAddress), nil
	}
}

func (a accountUserDeliveryAddressDo) FirstOrCreate() (*entity.AccountUserDeliveryAddress, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.AccountUserDeliveryAddress), nil
	}
}

func (a accountUserDeliveryAddressDo) FindByPage(offset int, limit int) (result []*entity.AccountUserDeliveryAddress, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a accountUserDeliveryAddressDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a accountUserDeliveryAddressDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a accountUserDeliveryAddressDo) Delete(models ...*entity.AccountUserDeliveryAddress) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *accountUserDeliveryAddressDo) withDO(do gen.Dao) *accountUserDeliveryAddressDo {
	a.DO = *do.(*gen.DO)
	return a
}
