// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"shopx/app/account-srv/internal/biz/entity"
)

func newAccountUserSn(db *gorm.DB, opts ...gen.DOOption) accountUserSn {
	_accountUserSn := accountUserSn{}

	_accountUserSn.accountUserSnDo.UseDB(db, opts...)
	_accountUserSn.accountUserSnDo.UseModel(&entity.AccountUserSn{})

	tableName := _accountUserSn.accountUserSnDo.TableName()
	_accountUserSn.ALL = field.NewAsterisk(tableName)
	_accountUserSn.UserID = field.NewInt32(tableName, "user_id")
	_accountUserSn.UserBlog = field.NewInt32(tableName, "user_blog")
	_accountUserSn.UserFriend = field.NewInt32(tableName, "user_friend")
	_accountUserSn.UserFans = field.NewInt32(tableName, "user_fans")
	_accountUserSn.UserGrowth = field.NewInt32(tableName, "user_growth")
	_accountUserSn.UserReport = field.NewField(tableName, "user_report")
	_accountUserSn.UserBuy = field.NewField(tableName, "user_buy")
	_accountUserSn.UserComment = field.NewField(tableName, "user_comment")
	_accountUserSn.UserFansStore = field.NewInt32(tableName, "user_fans_store")
	_accountUserSn.UserStory = field.NewInt32(tableName, "user_story")
	_accountUserSn.UserStoryComment = field.NewInt32(tableName, "user_story_comment")
	_accountUserSn.UserFavoritesStore = field.NewInt32(tableName, "user_favorites_store")
	_accountUserSn.UserFavoritesItem = field.NewInt32(tableName, "user_favorites_item")
	_accountUserSn.UserFavoritesBrand = field.NewInt32(tableName, "user_favorites_brand")
	_accountUserSn.UserStoryCollection = field.NewInt32(tableName, "user_story_collection")
	_accountUserSn.UserStoryLike = field.NewInt32(tableName, "user_story_like")
	_accountUserSn.UserStoryForward = field.NewInt32(tableName, "user_story_forward")
	_accountUserSn.Version = field.NewInt32(tableName, "version")

	_accountUserSn.fillFieldMap()

	return _accountUserSn
}

// accountUserSn 用户SNS信息表
type accountUserSn struct {
	accountUserSnDo accountUserSnDo

	ALL                 field.Asterisk
	UserID              field.Int32 // 用户编号
	UserBlog            field.Int32 // 微博数量
	UserFriend          field.Int32 // 好友数量
	UserFans            field.Int32 // 粉丝数量
	UserGrowth          field.Int32 // 成长值
	UserReport          field.Field // 是否可以举报(BOOL):0-不可以;1-可以
	UserBuy             field.Field // 是否可以购买商品(BOOL):0-不可以;1-可以
	UserComment         field.Field // 是否允许发表言论(BOOL):0-不可以;1-可以
	UserFansStore       field.Int32 // 推广店铺数量
	UserStory           field.Int32 // 帖子数量
	UserStoryComment    field.Int32 // 评论数量
	UserFavoritesStore  field.Int32 // 收藏店铺
	UserFavoritesItem   field.Int32 // 收藏商品
	UserFavoritesBrand  field.Int32 // 收藏品牌
	UserStoryCollection field.Int32 // 收藏帖子
	UserStoryLike       field.Int32 // 帖子点赞
	UserStoryForward    field.Int32 // 帖子转发
	Version             field.Int32 // 乐观锁

	fieldMap map[string]field.Expr
}

func (a accountUserSn) Table(newTableName string) *accountUserSn {
	a.accountUserSnDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a accountUserSn) As(alias string) *accountUserSn {
	a.accountUserSnDo.DO = *(a.accountUserSnDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *accountUserSn) updateTableName(table string) *accountUserSn {
	a.ALL = field.NewAsterisk(table)
	a.UserID = field.NewInt32(table, "user_id")
	a.UserBlog = field.NewInt32(table, "user_blog")
	a.UserFriend = field.NewInt32(table, "user_friend")
	a.UserFans = field.NewInt32(table, "user_fans")
	a.UserGrowth = field.NewInt32(table, "user_growth")
	a.UserReport = field.NewField(table, "user_report")
	a.UserBuy = field.NewField(table, "user_buy")
	a.UserComment = field.NewField(table, "user_comment")
	a.UserFansStore = field.NewInt32(table, "user_fans_store")
	a.UserStory = field.NewInt32(table, "user_story")
	a.UserStoryComment = field.NewInt32(table, "user_story_comment")
	a.UserFavoritesStore = field.NewInt32(table, "user_favorites_store")
	a.UserFavoritesItem = field.NewInt32(table, "user_favorites_item")
	a.UserFavoritesBrand = field.NewInt32(table, "user_favorites_brand")
	a.UserStoryCollection = field.NewInt32(table, "user_story_collection")
	a.UserStoryLike = field.NewInt32(table, "user_story_like")
	a.UserStoryForward = field.NewInt32(table, "user_story_forward")
	a.Version = field.NewInt32(table, "version")

	a.fillFieldMap()

	return a
}

func (a *accountUserSn) WithContext(ctx context.Context) *accountUserSnDo {
	return a.accountUserSnDo.WithContext(ctx)
}

func (a accountUserSn) TableName() string { return a.accountUserSnDo.TableName() }

func (a accountUserSn) Alias() string { return a.accountUserSnDo.Alias() }

func (a accountUserSn) Columns(cols ...field.Expr) gen.Columns {
	return a.accountUserSnDo.Columns(cols...)
}

func (a *accountUserSn) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *accountUserSn) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 18)
	a.fieldMap["user_id"] = a.UserID
	a.fieldMap["user_blog"] = a.UserBlog
	a.fieldMap["user_friend"] = a.UserFriend
	a.fieldMap["user_fans"] = a.UserFans
	a.fieldMap["user_growth"] = a.UserGrowth
	a.fieldMap["user_report"] = a.UserReport
	a.fieldMap["user_buy"] = a.UserBuy
	a.fieldMap["user_comment"] = a.UserComment
	a.fieldMap["user_fans_store"] = a.UserFansStore
	a.fieldMap["user_story"] = a.UserStory
	a.fieldMap["user_story_comment"] = a.UserStoryComment
	a.fieldMap["user_favorites_store"] = a.UserFavoritesStore
	a.fieldMap["user_favorites_item"] = a.UserFavoritesItem
	a.fieldMap["user_favorites_brand"] = a.UserFavoritesBrand
	a.fieldMap["user_story_collection"] = a.UserStoryCollection
	a.fieldMap["user_story_like"] = a.UserStoryLike
	a.fieldMap["user_story_forward"] = a.UserStoryForward
	a.fieldMap["version"] = a.Version
}

func (a accountUserSn) clone(db *gorm.DB) accountUserSn {
	a.accountUserSnDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a accountUserSn) replaceDB(db *gorm.DB) accountUserSn {
	a.accountUserSnDo.ReplaceDB(db)
	return a
}

type accountUserSnDo struct{ gen.DO }

func (a accountUserSnDo) Debug() *accountUserSnDo {
	return a.withDO(a.DO.Debug())
}

func (a accountUserSnDo) WithContext(ctx context.Context) *accountUserSnDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a accountUserSnDo) ReadDB() *accountUserSnDo {
	return a.Clauses(dbresolver.Read)
}

func (a accountUserSnDo) WriteDB() *accountUserSnDo {
	return a.Clauses(dbresolver.Write)
}

func (a accountUserSnDo) Session(config *gorm.Session) *accountUserSnDo {
	return a.withDO(a.DO.Session(config))
}

func (a accountUserSnDo) Clauses(conds ...clause.Expression) *accountUserSnDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a accountUserSnDo) Returning(value interface{}, columns ...string) *accountUserSnDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a accountUserSnDo) Not(conds ...gen.Condition) *accountUserSnDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a accountUserSnDo) Or(conds ...gen.Condition) *accountUserSnDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a accountUserSnDo) Select(conds ...field.Expr) *accountUserSnDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a accountUserSnDo) Where(conds ...gen.Condition) *accountUserSnDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a accountUserSnDo) Order(conds ...field.Expr) *accountUserSnDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a accountUserSnDo) Distinct(cols ...field.Expr) *accountUserSnDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a accountUserSnDo) Omit(cols ...field.Expr) *accountUserSnDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a accountUserSnDo) Join(table schema.Tabler, on ...field.Expr) *accountUserSnDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a accountUserSnDo) LeftJoin(table schema.Tabler, on ...field.Expr) *accountUserSnDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a accountUserSnDo) RightJoin(table schema.Tabler, on ...field.Expr) *accountUserSnDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a accountUserSnDo) Group(cols ...field.Expr) *accountUserSnDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a accountUserSnDo) Having(conds ...gen.Condition) *accountUserSnDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a accountUserSnDo) Limit(limit int) *accountUserSnDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a accountUserSnDo) Offset(offset int) *accountUserSnDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a accountUserSnDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *accountUserSnDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a accountUserSnDo) Unscoped() *accountUserSnDo {
	return a.withDO(a.DO.Unscoped())
}

func (a accountUserSnDo) Create(values ...*entity.AccountUserSn) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a accountUserSnDo) CreateInBatches(values []*entity.AccountUserSn, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a accountUserSnDo) Save(values ...*entity.AccountUserSn) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a accountUserSnDo) First() (*entity.AccountUserSn, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.AccountUserSn), nil
	}
}

func (a accountUserSnDo) Take() (*entity.AccountUserSn, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.AccountUserSn), nil
	}
}

func (a accountUserSnDo) Last() (*entity.AccountUserSn, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.AccountUserSn), nil
	}
}

func (a accountUserSnDo) Find() ([]*entity.AccountUserSn, error) {
	result, err := a.DO.Find()
	return result.([]*entity.AccountUserSn), err
}

func (a accountUserSnDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.AccountUserSn, err error) {
	buf := make([]*entity.AccountUserSn, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a accountUserSnDo) FindInBatches(result *[]*entity.AccountUserSn, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a accountUserSnDo) Attrs(attrs ...field.AssignExpr) *accountUserSnDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a accountUserSnDo) Assign(attrs ...field.AssignExpr) *accountUserSnDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a accountUserSnDo) Joins(fields ...field.RelationField) *accountUserSnDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a accountUserSnDo) Preload(fields ...field.RelationField) *accountUserSnDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a accountUserSnDo) FirstOrInit() (*entity.AccountUserSn, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.AccountUserSn), nil
	}
}

func (a accountUserSnDo) FirstOrCreate() (*entity.AccountUserSn, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.AccountUserSn), nil
	}
}

func (a accountUserSnDo) FindByPage(offset int, limit int) (result []*entity.AccountUserSn, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a accountUserSnDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a accountUserSnDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a accountUserSnDo) Delete(models ...*entity.AccountUserSn) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *accountUserSnDo) withDO(do gen.Dao) *accountUserSnDo {
	a.DO = *do.(*gen.DO)
	return a
}
