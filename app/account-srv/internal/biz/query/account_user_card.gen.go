// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"shopx/app/account-srv/internal/biz/entity"
)

func newAccountUserCard(db *gorm.DB, opts ...gen.DOOption) accountUserCard {
	_accountUserCard := accountUserCard{}

	_accountUserCard.accountUserCardDo.UseDB(db, opts...)
	_accountUserCard.accountUserCardDo.UseModel(&entity.AccountUserCard{})

	tableName := _accountUserCard.accountUserCardDo.TableName()
	_accountUserCard.ALL = field.NewAsterisk(tableName)
	_accountUserCard.CardID = field.NewInt32(tableName, "card_id")
	_accountUserCard.CardName = field.NewString(tableName, "card_name")
	_accountUserCard.UserLevelID = field.NewInt32(tableName, "user_level_id")
	_accountUserCard.CardEnable = field.NewField(tableName, "card_enable")
	_accountUserCard.CardPirce = field.NewFloat64(tableName, "card_pirce")
	_accountUserCard.CardMarketPrice = field.NewFloat64(tableName, "card_market_price")
	_accountUserCard.CardSaveAmount = field.NewFloat64(tableName, "card_save_amount")
	_accountUserCard.CardYear = field.NewInt32(tableName, "card_year")
	_accountUserCard.CardMonth = field.NewInt32(tableName, "card_month")
	_accountUserCard.CardDay = field.NewInt32(tableName, "card_day")
	_accountUserCard.CardTime = field.NewInt64(tableName, "card_time")
	_accountUserCard.CardSort = field.NewInt32(tableName, "card_sort")
	_accountUserCard.UserTypeID = field.NewInt32(tableName, "user_type_id")
	_accountUserCard.TransportTypeID = field.NewInt32(tableName, "transport_type_id")
	_accountUserCard.CardBindAddr = field.NewField(tableName, "card_bind_addr")
	_accountUserCard.CardIsExp = field.NewField(tableName, "card_is_exp")
	_accountUserCard.CardExpMonth = field.NewInt32(tableName, "card_exp_month")
	_accountUserCard.CardExpDay = field.NewInt32(tableName, "card_exp_day")
	_accountUserCard.CardExpFee = field.NewFloat64(tableName, "card_exp_fee")
	_accountUserCard.CardExpStatus = field.NewField(tableName, "card_exp_status")
	_accountUserCard.StoreID = field.NewInt32(tableName, "store_id")
	_accountUserCard.ActivityIDDiscount = field.NewInt32(tableName, "activity_id_discount")
	_accountUserCard.ActivityIDGitfbag = field.NewInt32(tableName, "activity_id_gitfbag")
	_accountUserCard.ActivityIDMemberDay = field.NewInt32(tableName, "activity_id_member_day")
	_accountUserCard.ActivityIDBirthday = field.NewInt32(tableName, "activity_id_birthday")
	_accountUserCard.UserFxEnable = field.NewField(tableName, "user_fx_enable")
	_accountUserCard.UserFxRate = field.NewFloat64(tableName, "user_fx_rate")
	_accountUserCard.CardTitle = field.NewString(tableName, "card_title")
	_accountUserCard.CardDesc = field.NewString(tableName, "card_desc")
	_accountUserCard.CardKeywords = field.NewString(tableName, "card_keywords")
	_accountUserCard.CardImg = field.NewString(tableName, "card_img")
	_accountUserCard.CardFxActive = field.NewField(tableName, "card_fx_active")
	_accountUserCard.CardImgBg = field.NewString(tableName, "card_img_bg")

	_accountUserCard.fillFieldMap()

	return _accountUserCard
}

// accountUserCard 用户会员卡
type accountUserCard struct {
	accountUserCardDo accountUserCardDo

	ALL                 field.Asterisk
	CardID              field.Int32   // 会员卡编号
	CardName            field.String  // 会员卡名称
	UserLevelID         field.Int32   // 会员等级
	CardEnable          field.Field   // 状态(BOOL):0-禁用;1-开启
	CardPirce           field.Float64 // 会费（元/期）
	CardMarketPrice     field.Float64 // 原会费（元/期）
	CardSaveAmount      field.Float64 // 预计年省金额
	CardYear            field.Int32   // 有效期年
	CardMonth           field.Int32   // 有效期月
	CardDay             field.Int32   // 有效期日
	CardTime            field.Int64   // 上线时间
	CardSort            field.Int32   // 排序
	UserTypeID          field.Int32   // 会员类型(ENUM):1-普通用户;2-扩展用户
	TransportTypeID     field.Int32   // 物流模板编号
	CardBindAddr        field.Field   // 唯一地址(BOOL):0-否;1-是
	CardIsExp           field.Field   // 体验卡(BOOL):0-否;1-是
	CardExpMonth        field.Int32   // 体验月
	CardExpDay          field.Int32   // 体验日
	CardExpFee          field.Float64 // 体验费用
	CardExpStatus       field.Field   // 体验状态(BOOL):0-禁用;1-开启
	StoreID             field.Int32   // 店铺编号
	ActivityIDDiscount  field.Int32   // 活动会员专享折扣编号
	ActivityIDGitfbag   field.Int32   // 活动会员开卡赠品编号
	ActivityIDMemberDay field.Int32   // 活动会员日（实物）编号
	ActivityIDBirthday  field.Int32   // 活动生日专享编号
	UserFxEnable        field.Field   // 允许分销(BOOL):1-启用分销;0-禁用分销
	UserFxRate          field.Float64 // 分销佣金比例
	CardTitle           field.String  // 分享标题
	CardDesc            field.String  // 分享描述
	CardKeywords        field.String  // 搜索关键字
	CardImg             field.String  // 分享图标
	CardFxActive        field.Field   // 开通推广员(BOOL):1-开通;0-不开通
	CardImgBg           field.String  // 背景图片

	fieldMap map[string]field.Expr
}

func (a accountUserCard) Table(newTableName string) *accountUserCard {
	a.accountUserCardDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a accountUserCard) As(alias string) *accountUserCard {
	a.accountUserCardDo.DO = *(a.accountUserCardDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *accountUserCard) updateTableName(table string) *accountUserCard {
	a.ALL = field.NewAsterisk(table)
	a.CardID = field.NewInt32(table, "card_id")
	a.CardName = field.NewString(table, "card_name")
	a.UserLevelID = field.NewInt32(table, "user_level_id")
	a.CardEnable = field.NewField(table, "card_enable")
	a.CardPirce = field.NewFloat64(table, "card_pirce")
	a.CardMarketPrice = field.NewFloat64(table, "card_market_price")
	a.CardSaveAmount = field.NewFloat64(table, "card_save_amount")
	a.CardYear = field.NewInt32(table, "card_year")
	a.CardMonth = field.NewInt32(table, "card_month")
	a.CardDay = field.NewInt32(table, "card_day")
	a.CardTime = field.NewInt64(table, "card_time")
	a.CardSort = field.NewInt32(table, "card_sort")
	a.UserTypeID = field.NewInt32(table, "user_type_id")
	a.TransportTypeID = field.NewInt32(table, "transport_type_id")
	a.CardBindAddr = field.NewField(table, "card_bind_addr")
	a.CardIsExp = field.NewField(table, "card_is_exp")
	a.CardExpMonth = field.NewInt32(table, "card_exp_month")
	a.CardExpDay = field.NewInt32(table, "card_exp_day")
	a.CardExpFee = field.NewFloat64(table, "card_exp_fee")
	a.CardExpStatus = field.NewField(table, "card_exp_status")
	a.StoreID = field.NewInt32(table, "store_id")
	a.ActivityIDDiscount = field.NewInt32(table, "activity_id_discount")
	a.ActivityIDGitfbag = field.NewInt32(table, "activity_id_gitfbag")
	a.ActivityIDMemberDay = field.NewInt32(table, "activity_id_member_day")
	a.ActivityIDBirthday = field.NewInt32(table, "activity_id_birthday")
	a.UserFxEnable = field.NewField(table, "user_fx_enable")
	a.UserFxRate = field.NewFloat64(table, "user_fx_rate")
	a.CardTitle = field.NewString(table, "card_title")
	a.CardDesc = field.NewString(table, "card_desc")
	a.CardKeywords = field.NewString(table, "card_keywords")
	a.CardImg = field.NewString(table, "card_img")
	a.CardFxActive = field.NewField(table, "card_fx_active")
	a.CardImgBg = field.NewString(table, "card_img_bg")

	a.fillFieldMap()

	return a
}

func (a *accountUserCard) WithContext(ctx context.Context) *accountUserCardDo {
	return a.accountUserCardDo.WithContext(ctx)
}

func (a accountUserCard) TableName() string { return a.accountUserCardDo.TableName() }

func (a accountUserCard) Alias() string { return a.accountUserCardDo.Alias() }

func (a accountUserCard) Columns(cols ...field.Expr) gen.Columns {
	return a.accountUserCardDo.Columns(cols...)
}

func (a *accountUserCard) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *accountUserCard) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 33)
	a.fieldMap["card_id"] = a.CardID
	a.fieldMap["card_name"] = a.CardName
	a.fieldMap["user_level_id"] = a.UserLevelID
	a.fieldMap["card_enable"] = a.CardEnable
	a.fieldMap["card_pirce"] = a.CardPirce
	a.fieldMap["card_market_price"] = a.CardMarketPrice
	a.fieldMap["card_save_amount"] = a.CardSaveAmount
	a.fieldMap["card_year"] = a.CardYear
	a.fieldMap["card_month"] = a.CardMonth
	a.fieldMap["card_day"] = a.CardDay
	a.fieldMap["card_time"] = a.CardTime
	a.fieldMap["card_sort"] = a.CardSort
	a.fieldMap["user_type_id"] = a.UserTypeID
	a.fieldMap["transport_type_id"] = a.TransportTypeID
	a.fieldMap["card_bind_addr"] = a.CardBindAddr
	a.fieldMap["card_is_exp"] = a.CardIsExp
	a.fieldMap["card_exp_month"] = a.CardExpMonth
	a.fieldMap["card_exp_day"] = a.CardExpDay
	a.fieldMap["card_exp_fee"] = a.CardExpFee
	a.fieldMap["card_exp_status"] = a.CardExpStatus
	a.fieldMap["store_id"] = a.StoreID
	a.fieldMap["activity_id_discount"] = a.ActivityIDDiscount
	a.fieldMap["activity_id_gitfbag"] = a.ActivityIDGitfbag
	a.fieldMap["activity_id_member_day"] = a.ActivityIDMemberDay
	a.fieldMap["activity_id_birthday"] = a.ActivityIDBirthday
	a.fieldMap["user_fx_enable"] = a.UserFxEnable
	a.fieldMap["user_fx_rate"] = a.UserFxRate
	a.fieldMap["card_title"] = a.CardTitle
	a.fieldMap["card_desc"] = a.CardDesc
	a.fieldMap["card_keywords"] = a.CardKeywords
	a.fieldMap["card_img"] = a.CardImg
	a.fieldMap["card_fx_active"] = a.CardFxActive
	a.fieldMap["card_img_bg"] = a.CardImgBg
}

func (a accountUserCard) clone(db *gorm.DB) accountUserCard {
	a.accountUserCardDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a accountUserCard) replaceDB(db *gorm.DB) accountUserCard {
	a.accountUserCardDo.ReplaceDB(db)
	return a
}

type accountUserCardDo struct{ gen.DO }

func (a accountUserCardDo) Debug() *accountUserCardDo {
	return a.withDO(a.DO.Debug())
}

func (a accountUserCardDo) WithContext(ctx context.Context) *accountUserCardDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a accountUserCardDo) ReadDB() *accountUserCardDo {
	return a.Clauses(dbresolver.Read)
}

func (a accountUserCardDo) WriteDB() *accountUserCardDo {
	return a.Clauses(dbresolver.Write)
}

func (a accountUserCardDo) Session(config *gorm.Session) *accountUserCardDo {
	return a.withDO(a.DO.Session(config))
}

func (a accountUserCardDo) Clauses(conds ...clause.Expression) *accountUserCardDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a accountUserCardDo) Returning(value interface{}, columns ...string) *accountUserCardDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a accountUserCardDo) Not(conds ...gen.Condition) *accountUserCardDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a accountUserCardDo) Or(conds ...gen.Condition) *accountUserCardDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a accountUserCardDo) Select(conds ...field.Expr) *accountUserCardDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a accountUserCardDo) Where(conds ...gen.Condition) *accountUserCardDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a accountUserCardDo) Order(conds ...field.Expr) *accountUserCardDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a accountUserCardDo) Distinct(cols ...field.Expr) *accountUserCardDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a accountUserCardDo) Omit(cols ...field.Expr) *accountUserCardDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a accountUserCardDo) Join(table schema.Tabler, on ...field.Expr) *accountUserCardDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a accountUserCardDo) LeftJoin(table schema.Tabler, on ...field.Expr) *accountUserCardDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a accountUserCardDo) RightJoin(table schema.Tabler, on ...field.Expr) *accountUserCardDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a accountUserCardDo) Group(cols ...field.Expr) *accountUserCardDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a accountUserCardDo) Having(conds ...gen.Condition) *accountUserCardDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a accountUserCardDo) Limit(limit int) *accountUserCardDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a accountUserCardDo) Offset(offset int) *accountUserCardDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a accountUserCardDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *accountUserCardDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a accountUserCardDo) Unscoped() *accountUserCardDo {
	return a.withDO(a.DO.Unscoped())
}

func (a accountUserCardDo) Create(values ...*entity.AccountUserCard) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a accountUserCardDo) CreateInBatches(values []*entity.AccountUserCard, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a accountUserCardDo) Save(values ...*entity.AccountUserCard) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a accountUserCardDo) First() (*entity.AccountUserCard, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.AccountUserCard), nil
	}
}

func (a accountUserCardDo) Take() (*entity.AccountUserCard, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.AccountUserCard), nil
	}
}

func (a accountUserCardDo) Last() (*entity.AccountUserCard, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.AccountUserCard), nil
	}
}

func (a accountUserCardDo) Find() ([]*entity.AccountUserCard, error) {
	result, err := a.DO.Find()
	return result.([]*entity.AccountUserCard), err
}

func (a accountUserCardDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.AccountUserCard, err error) {
	buf := make([]*entity.AccountUserCard, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a accountUserCardDo) FindInBatches(result *[]*entity.AccountUserCard, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a accountUserCardDo) Attrs(attrs ...field.AssignExpr) *accountUserCardDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a accountUserCardDo) Assign(attrs ...field.AssignExpr) *accountUserCardDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a accountUserCardDo) Joins(fields ...field.RelationField) *accountUserCardDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a accountUserCardDo) Preload(fields ...field.RelationField) *accountUserCardDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a accountUserCardDo) FirstOrInit() (*entity.AccountUserCard, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.AccountUserCard), nil
	}
}

func (a accountUserCardDo) FirstOrCreate() (*entity.AccountUserCard, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.AccountUserCard), nil
	}
}

func (a accountUserCardDo) FindByPage(offset int, limit int) (result []*entity.AccountUserCard, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a accountUserCardDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a accountUserCardDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a accountUserCardDo) Delete(models ...*entity.AccountUserCard) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *accountUserCardDo) withDO(do gen.Dao) *accountUserCardDo {
	a.DO = *do.(*gen.DO)
	return a
}
