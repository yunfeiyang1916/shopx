// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"shopx/app/account-srv/internal/biz/entity"
)

func newAccountUserChannelCode(db *gorm.DB, opts ...gen.DOOption) accountUserChannelCode {
	_accountUserChannelCode := accountUserChannelCode{}

	_accountUserChannelCode.accountUserChannelCodeDo.UseDB(db, opts...)
	_accountUserChannelCode.accountUserChannelCodeDo.UseModel(&entity.AccountUserChannelCode{})

	tableName := _accountUserChannelCode.accountUserChannelCodeDo.TableName()
	_accountUserChannelCode.ALL = field.NewAsterisk(tableName)
	_accountUserChannelCode.UccID = field.NewInt32(tableName, "ucc_id")
	_accountUserChannelCode.UccCode = field.NewString(tableName, "ucc_code")
	_accountUserChannelCode.UccEnable = field.NewField(tableName, "ucc_enable")
	_accountUserChannelCode.UserID = field.NewInt32(tableName, "user_id")
	_accountUserChannelCode.UserChannelID = field.NewInt32(tableName, "user_channel_id")
	_accountUserChannelCode.UccUsed = field.NewInt32(tableName, "ucc_used")
	_accountUserChannelCode.UccUseTime = field.NewInt64(tableName, "ucc_use_time")
	_accountUserChannelCode.UccCreateTime = field.NewInt64(tableName, "ucc_create_time")
	_accountUserChannelCode.UccIsUnique = field.NewInt32(tableName, "ucc_is_unique")
	_accountUserChannelCode.UccUseNum = field.NewInt32(tableName, "ucc_use_num")

	_accountUserChannelCode.fillFieldMap()

	return _accountUserChannelCode
}

// accountUserChannelCode 用户渠道邀请码表
type accountUserChannelCode struct {
	accountUserChannelCodeDo accountUserChannelCodeDo

	ALL           field.Asterisk
	UccID         field.Int32  // 渠道编号
	UccCode       field.String // 渠道名称
	UccEnable     field.Field  // 是否启用(BOOL):0-禁用;1-启用
	UserID        field.Int32  // 会员编号
	UserChannelID field.Int32  // 渠道编号
	UccUsed       field.Int32  // 是否使用(BOOL):0-未使用;1-已使用
	UccUseTime    field.Int64  // 使用时间
	UccCreateTime field.Int64  // 创建时间
	UccIsUnique   field.Int32  // 唯一使用(BOOL):0-不限制;1-可用一次
	UccUseNum     field.Int32  // 使用次数

	fieldMap map[string]field.Expr
}

func (a accountUserChannelCode) Table(newTableName string) *accountUserChannelCode {
	a.accountUserChannelCodeDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a accountUserChannelCode) As(alias string) *accountUserChannelCode {
	a.accountUserChannelCodeDo.DO = *(a.accountUserChannelCodeDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *accountUserChannelCode) updateTableName(table string) *accountUserChannelCode {
	a.ALL = field.NewAsterisk(table)
	a.UccID = field.NewInt32(table, "ucc_id")
	a.UccCode = field.NewString(table, "ucc_code")
	a.UccEnable = field.NewField(table, "ucc_enable")
	a.UserID = field.NewInt32(table, "user_id")
	a.UserChannelID = field.NewInt32(table, "user_channel_id")
	a.UccUsed = field.NewInt32(table, "ucc_used")
	a.UccUseTime = field.NewInt64(table, "ucc_use_time")
	a.UccCreateTime = field.NewInt64(table, "ucc_create_time")
	a.UccIsUnique = field.NewInt32(table, "ucc_is_unique")
	a.UccUseNum = field.NewInt32(table, "ucc_use_num")

	a.fillFieldMap()

	return a
}

func (a *accountUserChannelCode) WithContext(ctx context.Context) *accountUserChannelCodeDo {
	return a.accountUserChannelCodeDo.WithContext(ctx)
}

func (a accountUserChannelCode) TableName() string { return a.accountUserChannelCodeDo.TableName() }

func (a accountUserChannelCode) Alias() string { return a.accountUserChannelCodeDo.Alias() }

func (a accountUserChannelCode) Columns(cols ...field.Expr) gen.Columns {
	return a.accountUserChannelCodeDo.Columns(cols...)
}

func (a *accountUserChannelCode) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *accountUserChannelCode) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 10)
	a.fieldMap["ucc_id"] = a.UccID
	a.fieldMap["ucc_code"] = a.UccCode
	a.fieldMap["ucc_enable"] = a.UccEnable
	a.fieldMap["user_id"] = a.UserID
	a.fieldMap["user_channel_id"] = a.UserChannelID
	a.fieldMap["ucc_used"] = a.UccUsed
	a.fieldMap["ucc_use_time"] = a.UccUseTime
	a.fieldMap["ucc_create_time"] = a.UccCreateTime
	a.fieldMap["ucc_is_unique"] = a.UccIsUnique
	a.fieldMap["ucc_use_num"] = a.UccUseNum
}

func (a accountUserChannelCode) clone(db *gorm.DB) accountUserChannelCode {
	a.accountUserChannelCodeDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a accountUserChannelCode) replaceDB(db *gorm.DB) accountUserChannelCode {
	a.accountUserChannelCodeDo.ReplaceDB(db)
	return a
}

type accountUserChannelCodeDo struct{ gen.DO }

func (a accountUserChannelCodeDo) Debug() *accountUserChannelCodeDo {
	return a.withDO(a.DO.Debug())
}

func (a accountUserChannelCodeDo) WithContext(ctx context.Context) *accountUserChannelCodeDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a accountUserChannelCodeDo) ReadDB() *accountUserChannelCodeDo {
	return a.Clauses(dbresolver.Read)
}

func (a accountUserChannelCodeDo) WriteDB() *accountUserChannelCodeDo {
	return a.Clauses(dbresolver.Write)
}

func (a accountUserChannelCodeDo) Session(config *gorm.Session) *accountUserChannelCodeDo {
	return a.withDO(a.DO.Session(config))
}

func (a accountUserChannelCodeDo) Clauses(conds ...clause.Expression) *accountUserChannelCodeDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a accountUserChannelCodeDo) Returning(value interface{}, columns ...string) *accountUserChannelCodeDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a accountUserChannelCodeDo) Not(conds ...gen.Condition) *accountUserChannelCodeDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a accountUserChannelCodeDo) Or(conds ...gen.Condition) *accountUserChannelCodeDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a accountUserChannelCodeDo) Select(conds ...field.Expr) *accountUserChannelCodeDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a accountUserChannelCodeDo) Where(conds ...gen.Condition) *accountUserChannelCodeDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a accountUserChannelCodeDo) Order(conds ...field.Expr) *accountUserChannelCodeDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a accountUserChannelCodeDo) Distinct(cols ...field.Expr) *accountUserChannelCodeDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a accountUserChannelCodeDo) Omit(cols ...field.Expr) *accountUserChannelCodeDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a accountUserChannelCodeDo) Join(table schema.Tabler, on ...field.Expr) *accountUserChannelCodeDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a accountUserChannelCodeDo) LeftJoin(table schema.Tabler, on ...field.Expr) *accountUserChannelCodeDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a accountUserChannelCodeDo) RightJoin(table schema.Tabler, on ...field.Expr) *accountUserChannelCodeDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a accountUserChannelCodeDo) Group(cols ...field.Expr) *accountUserChannelCodeDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a accountUserChannelCodeDo) Having(conds ...gen.Condition) *accountUserChannelCodeDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a accountUserChannelCodeDo) Limit(limit int) *accountUserChannelCodeDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a accountUserChannelCodeDo) Offset(offset int) *accountUserChannelCodeDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a accountUserChannelCodeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *accountUserChannelCodeDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a accountUserChannelCodeDo) Unscoped() *accountUserChannelCodeDo {
	return a.withDO(a.DO.Unscoped())
}

func (a accountUserChannelCodeDo) Create(values ...*entity.AccountUserChannelCode) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a accountUserChannelCodeDo) CreateInBatches(values []*entity.AccountUserChannelCode, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a accountUserChannelCodeDo) Save(values ...*entity.AccountUserChannelCode) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a accountUserChannelCodeDo) First() (*entity.AccountUserChannelCode, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.AccountUserChannelCode), nil
	}
}

func (a accountUserChannelCodeDo) Take() (*entity.AccountUserChannelCode, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.AccountUserChannelCode), nil
	}
}

func (a accountUserChannelCodeDo) Last() (*entity.AccountUserChannelCode, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.AccountUserChannelCode), nil
	}
}

func (a accountUserChannelCodeDo) Find() ([]*entity.AccountUserChannelCode, error) {
	result, err := a.DO.Find()
	return result.([]*entity.AccountUserChannelCode), err
}

func (a accountUserChannelCodeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.AccountUserChannelCode, err error) {
	buf := make([]*entity.AccountUserChannelCode, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a accountUserChannelCodeDo) FindInBatches(result *[]*entity.AccountUserChannelCode, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a accountUserChannelCodeDo) Attrs(attrs ...field.AssignExpr) *accountUserChannelCodeDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a accountUserChannelCodeDo) Assign(attrs ...field.AssignExpr) *accountUserChannelCodeDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a accountUserChannelCodeDo) Joins(fields ...field.RelationField) *accountUserChannelCodeDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a accountUserChannelCodeDo) Preload(fields ...field.RelationField) *accountUserChannelCodeDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a accountUserChannelCodeDo) FirstOrInit() (*entity.AccountUserChannelCode, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.AccountUserChannelCode), nil
	}
}

func (a accountUserChannelCodeDo) FirstOrCreate() (*entity.AccountUserChannelCode, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.AccountUserChannelCode), nil
	}
}

func (a accountUserChannelCodeDo) FindByPage(offset int, limit int) (result []*entity.AccountUserChannelCode, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a accountUserChannelCodeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a accountUserChannelCodeDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a accountUserChannelCodeDo) Delete(models ...*entity.AccountUserChannelCode) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *accountUserChannelCodeDo) withDO(do gen.Dao) *accountUserChannelCodeDo {
	a.DO = *do.(*gen.DO)
	return a
}
