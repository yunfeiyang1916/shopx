// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"shopx/app/account-srv/internal/biz/entity"
)

func newAccountUserGroup(db *gorm.DB, opts ...gen.DOOption) accountUserGroup {
	_accountUserGroup := accountUserGroup{}

	_accountUserGroup.accountUserGroupDo.UseDB(db, opts...)
	_accountUserGroup.accountUserGroupDo.UseModel(&entity.AccountUserGroup{})

	tableName := _accountUserGroup.accountUserGroupDo.TableName()
	_accountUserGroup.ALL = field.NewAsterisk(tableName)
	_accountUserGroup.GroupID = field.NewInt32(tableName, "group_id")
	_accountUserGroup.GroupName = field.NewString(tableName, "group_name")
	_accountUserGroup.GroupType = field.NewInt32(tableName, "group_type")
	_accountUserGroup.UserID = field.NewInt32(tableName, "user_id")
	_accountUserGroup.GroupNum = field.NewInt32(tableName, "group_num")

	_accountUserGroup.fillFieldMap()

	return _accountUserGroup
}

// accountUserGroup 好友管理组
type accountUserGroup struct {
	accountUserGroupDo accountUserGroupDo

	ALL       field.Asterisk
	GroupID   field.Int32  // 好友组编号
	GroupName field.String // 组名称
	GroupType field.Int32  // 群组类型(ENUM):0-临时组上限100人;  1-普通组上限300人; 2-VIP组 上限500人
	UserID    field.Int32  // 管理员
	GroupNum  field.Int32  // 数量

	fieldMap map[string]field.Expr
}

func (a accountUserGroup) Table(newTableName string) *accountUserGroup {
	a.accountUserGroupDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a accountUserGroup) As(alias string) *accountUserGroup {
	a.accountUserGroupDo.DO = *(a.accountUserGroupDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *accountUserGroup) updateTableName(table string) *accountUserGroup {
	a.ALL = field.NewAsterisk(table)
	a.GroupID = field.NewInt32(table, "group_id")
	a.GroupName = field.NewString(table, "group_name")
	a.GroupType = field.NewInt32(table, "group_type")
	a.UserID = field.NewInt32(table, "user_id")
	a.GroupNum = field.NewInt32(table, "group_num")

	a.fillFieldMap()

	return a
}

func (a *accountUserGroup) WithContext(ctx context.Context) *accountUserGroupDo {
	return a.accountUserGroupDo.WithContext(ctx)
}

func (a accountUserGroup) TableName() string { return a.accountUserGroupDo.TableName() }

func (a accountUserGroup) Alias() string { return a.accountUserGroupDo.Alias() }

func (a accountUserGroup) Columns(cols ...field.Expr) gen.Columns {
	return a.accountUserGroupDo.Columns(cols...)
}

func (a *accountUserGroup) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *accountUserGroup) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 5)
	a.fieldMap["group_id"] = a.GroupID
	a.fieldMap["group_name"] = a.GroupName
	a.fieldMap["group_type"] = a.GroupType
	a.fieldMap["user_id"] = a.UserID
	a.fieldMap["group_num"] = a.GroupNum
}

func (a accountUserGroup) clone(db *gorm.DB) accountUserGroup {
	a.accountUserGroupDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a accountUserGroup) replaceDB(db *gorm.DB) accountUserGroup {
	a.accountUserGroupDo.ReplaceDB(db)
	return a
}

type accountUserGroupDo struct{ gen.DO }

func (a accountUserGroupDo) Debug() *accountUserGroupDo {
	return a.withDO(a.DO.Debug())
}

func (a accountUserGroupDo) WithContext(ctx context.Context) *accountUserGroupDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a accountUserGroupDo) ReadDB() *accountUserGroupDo {
	return a.Clauses(dbresolver.Read)
}

func (a accountUserGroupDo) WriteDB() *accountUserGroupDo {
	return a.Clauses(dbresolver.Write)
}

func (a accountUserGroupDo) Session(config *gorm.Session) *accountUserGroupDo {
	return a.withDO(a.DO.Session(config))
}

func (a accountUserGroupDo) Clauses(conds ...clause.Expression) *accountUserGroupDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a accountUserGroupDo) Returning(value interface{}, columns ...string) *accountUserGroupDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a accountUserGroupDo) Not(conds ...gen.Condition) *accountUserGroupDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a accountUserGroupDo) Or(conds ...gen.Condition) *accountUserGroupDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a accountUserGroupDo) Select(conds ...field.Expr) *accountUserGroupDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a accountUserGroupDo) Where(conds ...gen.Condition) *accountUserGroupDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a accountUserGroupDo) Order(conds ...field.Expr) *accountUserGroupDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a accountUserGroupDo) Distinct(cols ...field.Expr) *accountUserGroupDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a accountUserGroupDo) Omit(cols ...field.Expr) *accountUserGroupDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a accountUserGroupDo) Join(table schema.Tabler, on ...field.Expr) *accountUserGroupDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a accountUserGroupDo) LeftJoin(table schema.Tabler, on ...field.Expr) *accountUserGroupDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a accountUserGroupDo) RightJoin(table schema.Tabler, on ...field.Expr) *accountUserGroupDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a accountUserGroupDo) Group(cols ...field.Expr) *accountUserGroupDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a accountUserGroupDo) Having(conds ...gen.Condition) *accountUserGroupDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a accountUserGroupDo) Limit(limit int) *accountUserGroupDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a accountUserGroupDo) Offset(offset int) *accountUserGroupDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a accountUserGroupDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *accountUserGroupDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a accountUserGroupDo) Unscoped() *accountUserGroupDo {
	return a.withDO(a.DO.Unscoped())
}

func (a accountUserGroupDo) Create(values ...*entity.AccountUserGroup) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a accountUserGroupDo) CreateInBatches(values []*entity.AccountUserGroup, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a accountUserGroupDo) Save(values ...*entity.AccountUserGroup) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a accountUserGroupDo) First() (*entity.AccountUserGroup, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.AccountUserGroup), nil
	}
}

func (a accountUserGroupDo) Take() (*entity.AccountUserGroup, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.AccountUserGroup), nil
	}
}

func (a accountUserGroupDo) Last() (*entity.AccountUserGroup, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.AccountUserGroup), nil
	}
}

func (a accountUserGroupDo) Find() ([]*entity.AccountUserGroup, error) {
	result, err := a.DO.Find()
	return result.([]*entity.AccountUserGroup), err
}

func (a accountUserGroupDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.AccountUserGroup, err error) {
	buf := make([]*entity.AccountUserGroup, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a accountUserGroupDo) FindInBatches(result *[]*entity.AccountUserGroup, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a accountUserGroupDo) Attrs(attrs ...field.AssignExpr) *accountUserGroupDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a accountUserGroupDo) Assign(attrs ...field.AssignExpr) *accountUserGroupDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a accountUserGroupDo) Joins(fields ...field.RelationField) *accountUserGroupDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a accountUserGroupDo) Preload(fields ...field.RelationField) *accountUserGroupDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a accountUserGroupDo) FirstOrInit() (*entity.AccountUserGroup, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.AccountUserGroup), nil
	}
}

func (a accountUserGroupDo) FirstOrCreate() (*entity.AccountUserGroup, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.AccountUserGroup), nil
	}
}

func (a accountUserGroupDo) FindByPage(offset int, limit int) (result []*entity.AccountUserGroup, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a accountUserGroupDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a accountUserGroupDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a accountUserGroupDo) Delete(models ...*entity.AccountUserGroup) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *accountUserGroupDo) withDO(do gen.Dao) *accountUserGroupDo {
	a.DO = *do.(*gen.DO)
	return a
}
