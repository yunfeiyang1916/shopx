// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"shopx/app/account-srv/internal/biz/entity"
)

func newAccountUserZoneMessage(db *gorm.DB, opts ...gen.DOOption) accountUserZoneMessage {
	_accountUserZoneMessage := accountUserZoneMessage{}

	_accountUserZoneMessage.accountUserZoneMessageDo.UseDB(db, opts...)
	_accountUserZoneMessage.accountUserZoneMessageDo.UseModel(&entity.AccountUserZoneMessage{})

	tableName := _accountUserZoneMessage.accountUserZoneMessageDo.TableName()
	_accountUserZoneMessage.ALL = field.NewAsterisk(tableName)
	_accountUserZoneMessage.ZoneMessageID = field.NewInt32(tableName, "zone_message_id")
	_accountUserZoneMessage.UserID = field.NewInt32(tableName, "user_id")
	_accountUserZoneMessage.ZoneID = field.NewInt32(tableName, "zone_id")
	_accountUserZoneMessage.ZoneMessageContent = field.NewString(tableName, "zone_message_content")
	_accountUserZoneMessage.ZoneMessageTime = field.NewTime(tableName, "zone_message_time")
	_accountUserZoneMessage.ZoneMessageIsDelete = field.NewInt32(tableName, "zone_message_is_delete")
	_accountUserZoneMessage.ZoneMessageType = field.NewInt32(tableName, "zone_message_type")

	_accountUserZoneMessage.fillFieldMap()

	return _accountUserZoneMessage
}

// accountUserZoneMessage 群组消息-聊天记录
type accountUserZoneMessage struct {
	accountUserZoneMessageDo accountUserZoneMessageDo

	ALL                 field.Asterisk
	ZoneMessageID       field.Int32  // 短消息索引编号
	UserID              field.Int32  // 发送用户
	ZoneID              field.Int32  // 群组编号
	ZoneMessageContent  field.String // 短消息内容
	ZoneMessageTime     field.Time   // 短消息发送时间
	ZoneMessageIsDelete field.Int32  // 短消息状态(BOOL):0-正常状态;1-删除状态
	ZoneMessageType     field.Int32  // 消息类型(ENUM):1-系统消息;2-用户消息;3-私信

	fieldMap map[string]field.Expr
}

func (a accountUserZoneMessage) Table(newTableName string) *accountUserZoneMessage {
	a.accountUserZoneMessageDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a accountUserZoneMessage) As(alias string) *accountUserZoneMessage {
	a.accountUserZoneMessageDo.DO = *(a.accountUserZoneMessageDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *accountUserZoneMessage) updateTableName(table string) *accountUserZoneMessage {
	a.ALL = field.NewAsterisk(table)
	a.ZoneMessageID = field.NewInt32(table, "zone_message_id")
	a.UserID = field.NewInt32(table, "user_id")
	a.ZoneID = field.NewInt32(table, "zone_id")
	a.ZoneMessageContent = field.NewString(table, "zone_message_content")
	a.ZoneMessageTime = field.NewTime(table, "zone_message_time")
	a.ZoneMessageIsDelete = field.NewInt32(table, "zone_message_is_delete")
	a.ZoneMessageType = field.NewInt32(table, "zone_message_type")

	a.fillFieldMap()

	return a
}

func (a *accountUserZoneMessage) WithContext(ctx context.Context) *accountUserZoneMessageDo {
	return a.accountUserZoneMessageDo.WithContext(ctx)
}

func (a accountUserZoneMessage) TableName() string { return a.accountUserZoneMessageDo.TableName() }

func (a accountUserZoneMessage) Alias() string { return a.accountUserZoneMessageDo.Alias() }

func (a accountUserZoneMessage) Columns(cols ...field.Expr) gen.Columns {
	return a.accountUserZoneMessageDo.Columns(cols...)
}

func (a *accountUserZoneMessage) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *accountUserZoneMessage) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 7)
	a.fieldMap["zone_message_id"] = a.ZoneMessageID
	a.fieldMap["user_id"] = a.UserID
	a.fieldMap["zone_id"] = a.ZoneID
	a.fieldMap["zone_message_content"] = a.ZoneMessageContent
	a.fieldMap["zone_message_time"] = a.ZoneMessageTime
	a.fieldMap["zone_message_is_delete"] = a.ZoneMessageIsDelete
	a.fieldMap["zone_message_type"] = a.ZoneMessageType
}

func (a accountUserZoneMessage) clone(db *gorm.DB) accountUserZoneMessage {
	a.accountUserZoneMessageDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a accountUserZoneMessage) replaceDB(db *gorm.DB) accountUserZoneMessage {
	a.accountUserZoneMessageDo.ReplaceDB(db)
	return a
}

type accountUserZoneMessageDo struct{ gen.DO }

func (a accountUserZoneMessageDo) Debug() *accountUserZoneMessageDo {
	return a.withDO(a.DO.Debug())
}

func (a accountUserZoneMessageDo) WithContext(ctx context.Context) *accountUserZoneMessageDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a accountUserZoneMessageDo) ReadDB() *accountUserZoneMessageDo {
	return a.Clauses(dbresolver.Read)
}

func (a accountUserZoneMessageDo) WriteDB() *accountUserZoneMessageDo {
	return a.Clauses(dbresolver.Write)
}

func (a accountUserZoneMessageDo) Session(config *gorm.Session) *accountUserZoneMessageDo {
	return a.withDO(a.DO.Session(config))
}

func (a accountUserZoneMessageDo) Clauses(conds ...clause.Expression) *accountUserZoneMessageDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a accountUserZoneMessageDo) Returning(value interface{}, columns ...string) *accountUserZoneMessageDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a accountUserZoneMessageDo) Not(conds ...gen.Condition) *accountUserZoneMessageDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a accountUserZoneMessageDo) Or(conds ...gen.Condition) *accountUserZoneMessageDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a accountUserZoneMessageDo) Select(conds ...field.Expr) *accountUserZoneMessageDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a accountUserZoneMessageDo) Where(conds ...gen.Condition) *accountUserZoneMessageDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a accountUserZoneMessageDo) Order(conds ...field.Expr) *accountUserZoneMessageDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a accountUserZoneMessageDo) Distinct(cols ...field.Expr) *accountUserZoneMessageDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a accountUserZoneMessageDo) Omit(cols ...field.Expr) *accountUserZoneMessageDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a accountUserZoneMessageDo) Join(table schema.Tabler, on ...field.Expr) *accountUserZoneMessageDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a accountUserZoneMessageDo) LeftJoin(table schema.Tabler, on ...field.Expr) *accountUserZoneMessageDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a accountUserZoneMessageDo) RightJoin(table schema.Tabler, on ...field.Expr) *accountUserZoneMessageDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a accountUserZoneMessageDo) Group(cols ...field.Expr) *accountUserZoneMessageDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a accountUserZoneMessageDo) Having(conds ...gen.Condition) *accountUserZoneMessageDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a accountUserZoneMessageDo) Limit(limit int) *accountUserZoneMessageDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a accountUserZoneMessageDo) Offset(offset int) *accountUserZoneMessageDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a accountUserZoneMessageDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *accountUserZoneMessageDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a accountUserZoneMessageDo) Unscoped() *accountUserZoneMessageDo {
	return a.withDO(a.DO.Unscoped())
}

func (a accountUserZoneMessageDo) Create(values ...*entity.AccountUserZoneMessage) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a accountUserZoneMessageDo) CreateInBatches(values []*entity.AccountUserZoneMessage, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a accountUserZoneMessageDo) Save(values ...*entity.AccountUserZoneMessage) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a accountUserZoneMessageDo) First() (*entity.AccountUserZoneMessage, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.AccountUserZoneMessage), nil
	}
}

func (a accountUserZoneMessageDo) Take() (*entity.AccountUserZoneMessage, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.AccountUserZoneMessage), nil
	}
}

func (a accountUserZoneMessageDo) Last() (*entity.AccountUserZoneMessage, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.AccountUserZoneMessage), nil
	}
}

func (a accountUserZoneMessageDo) Find() ([]*entity.AccountUserZoneMessage, error) {
	result, err := a.DO.Find()
	return result.([]*entity.AccountUserZoneMessage), err
}

func (a accountUserZoneMessageDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.AccountUserZoneMessage, err error) {
	buf := make([]*entity.AccountUserZoneMessage, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a accountUserZoneMessageDo) FindInBatches(result *[]*entity.AccountUserZoneMessage, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a accountUserZoneMessageDo) Attrs(attrs ...field.AssignExpr) *accountUserZoneMessageDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a accountUserZoneMessageDo) Assign(attrs ...field.AssignExpr) *accountUserZoneMessageDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a accountUserZoneMessageDo) Joins(fields ...field.RelationField) *accountUserZoneMessageDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a accountUserZoneMessageDo) Preload(fields ...field.RelationField) *accountUserZoneMessageDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a accountUserZoneMessageDo) FirstOrInit() (*entity.AccountUserZoneMessage, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.AccountUserZoneMessage), nil
	}
}

func (a accountUserZoneMessageDo) FirstOrCreate() (*entity.AccountUserZoneMessage, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.AccountUserZoneMessage), nil
	}
}

func (a accountUserZoneMessageDo) FindByPage(offset int, limit int) (result []*entity.AccountUserZoneMessage, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a accountUserZoneMessageDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a accountUserZoneMessageDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a accountUserZoneMessageDo) Delete(models ...*entity.AccountUserZoneMessage) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *accountUserZoneMessageDo) withDO(do gen.Dao) *accountUserZoneMessageDo {
	a.DO = *do.(*gen.DO)
	return a
}
