// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"shopx/app/account-srv/internal/biz/entity"
)

func newAccountUserLevel(db *gorm.DB, opts ...gen.DOOption) accountUserLevel {
	_accountUserLevel := accountUserLevel{}

	_accountUserLevel.accountUserLevelDo.UseDB(db, opts...)
	_accountUserLevel.accountUserLevelDo.UseModel(&entity.AccountUserLevel{})

	tableName := _accountUserLevel.accountUserLevelDo.TableName()
	_accountUserLevel.ALL = field.NewAsterisk(tableName)
	_accountUserLevel.UserLevelID = field.NewInt32(tableName, "user_level_id")
	_accountUserLevel.UserLevelName = field.NewString(tableName, "user_level_name")
	_accountUserLevel.UserLevelExp = field.NewInt32(tableName, "user_level_exp")
	_accountUserLevel.UserLevelSpend = field.NewInt32(tableName, "user_level_spend")
	_accountUserLevel.UserLevelLogo = field.NewString(tableName, "user_level_logo")
	_accountUserLevel.UserLevelRate = field.NewInt32(tableName, "user_level_rate")
	_accountUserLevel.UserLevelTime = field.NewInt64(tableName, "user_level_time")
	_accountUserLevel.UserLevelIsBuildin = field.NewField(tableName, "user_level_is_buildin")

	_accountUserLevel.fillFieldMap()

	return _accountUserLevel
}

// accountUserLevel 用户等级表-平台
type accountUserLevel struct {
	accountUserLevelDo accountUserLevelDo

	ALL                field.Asterisk
	UserLevelID        field.Int32  // 等级编号
	UserLevelName      field.String // 等级名称
	UserLevelExp       field.Int32  // 升级经验值
	UserLevelSpend     field.Int32  // 累计消费
	UserLevelLogo      field.String // 等级图标
	UserLevelRate      field.Int32  // 折扣率百分比
	UserLevelTime      field.Int64  // 修改时间
	UserLevelIsBuildin field.Field  // 系统内置(BOOL):0-否;1-是

	fieldMap map[string]field.Expr
}

func (a accountUserLevel) Table(newTableName string) *accountUserLevel {
	a.accountUserLevelDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a accountUserLevel) As(alias string) *accountUserLevel {
	a.accountUserLevelDo.DO = *(a.accountUserLevelDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *accountUserLevel) updateTableName(table string) *accountUserLevel {
	a.ALL = field.NewAsterisk(table)
	a.UserLevelID = field.NewInt32(table, "user_level_id")
	a.UserLevelName = field.NewString(table, "user_level_name")
	a.UserLevelExp = field.NewInt32(table, "user_level_exp")
	a.UserLevelSpend = field.NewInt32(table, "user_level_spend")
	a.UserLevelLogo = field.NewString(table, "user_level_logo")
	a.UserLevelRate = field.NewInt32(table, "user_level_rate")
	a.UserLevelTime = field.NewInt64(table, "user_level_time")
	a.UserLevelIsBuildin = field.NewField(table, "user_level_is_buildin")

	a.fillFieldMap()

	return a
}

func (a *accountUserLevel) WithContext(ctx context.Context) *accountUserLevelDo {
	return a.accountUserLevelDo.WithContext(ctx)
}

func (a accountUserLevel) TableName() string { return a.accountUserLevelDo.TableName() }

func (a accountUserLevel) Alias() string { return a.accountUserLevelDo.Alias() }

func (a accountUserLevel) Columns(cols ...field.Expr) gen.Columns {
	return a.accountUserLevelDo.Columns(cols...)
}

func (a *accountUserLevel) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *accountUserLevel) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 8)
	a.fieldMap["user_level_id"] = a.UserLevelID
	a.fieldMap["user_level_name"] = a.UserLevelName
	a.fieldMap["user_level_exp"] = a.UserLevelExp
	a.fieldMap["user_level_spend"] = a.UserLevelSpend
	a.fieldMap["user_level_logo"] = a.UserLevelLogo
	a.fieldMap["user_level_rate"] = a.UserLevelRate
	a.fieldMap["user_level_time"] = a.UserLevelTime
	a.fieldMap["user_level_is_buildin"] = a.UserLevelIsBuildin
}

func (a accountUserLevel) clone(db *gorm.DB) accountUserLevel {
	a.accountUserLevelDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a accountUserLevel) replaceDB(db *gorm.DB) accountUserLevel {
	a.accountUserLevelDo.ReplaceDB(db)
	return a
}

type accountUserLevelDo struct{ gen.DO }

func (a accountUserLevelDo) Debug() *accountUserLevelDo {
	return a.withDO(a.DO.Debug())
}

func (a accountUserLevelDo) WithContext(ctx context.Context) *accountUserLevelDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a accountUserLevelDo) ReadDB() *accountUserLevelDo {
	return a.Clauses(dbresolver.Read)
}

func (a accountUserLevelDo) WriteDB() *accountUserLevelDo {
	return a.Clauses(dbresolver.Write)
}

func (a accountUserLevelDo) Session(config *gorm.Session) *accountUserLevelDo {
	return a.withDO(a.DO.Session(config))
}

func (a accountUserLevelDo) Clauses(conds ...clause.Expression) *accountUserLevelDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a accountUserLevelDo) Returning(value interface{}, columns ...string) *accountUserLevelDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a accountUserLevelDo) Not(conds ...gen.Condition) *accountUserLevelDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a accountUserLevelDo) Or(conds ...gen.Condition) *accountUserLevelDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a accountUserLevelDo) Select(conds ...field.Expr) *accountUserLevelDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a accountUserLevelDo) Where(conds ...gen.Condition) *accountUserLevelDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a accountUserLevelDo) Order(conds ...field.Expr) *accountUserLevelDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a accountUserLevelDo) Distinct(cols ...field.Expr) *accountUserLevelDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a accountUserLevelDo) Omit(cols ...field.Expr) *accountUserLevelDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a accountUserLevelDo) Join(table schema.Tabler, on ...field.Expr) *accountUserLevelDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a accountUserLevelDo) LeftJoin(table schema.Tabler, on ...field.Expr) *accountUserLevelDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a accountUserLevelDo) RightJoin(table schema.Tabler, on ...field.Expr) *accountUserLevelDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a accountUserLevelDo) Group(cols ...field.Expr) *accountUserLevelDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a accountUserLevelDo) Having(conds ...gen.Condition) *accountUserLevelDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a accountUserLevelDo) Limit(limit int) *accountUserLevelDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a accountUserLevelDo) Offset(offset int) *accountUserLevelDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a accountUserLevelDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *accountUserLevelDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a accountUserLevelDo) Unscoped() *accountUserLevelDo {
	return a.withDO(a.DO.Unscoped())
}

func (a accountUserLevelDo) Create(values ...*entity.AccountUserLevel) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a accountUserLevelDo) CreateInBatches(values []*entity.AccountUserLevel, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a accountUserLevelDo) Save(values ...*entity.AccountUserLevel) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a accountUserLevelDo) First() (*entity.AccountUserLevel, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.AccountUserLevel), nil
	}
}

func (a accountUserLevelDo) Take() (*entity.AccountUserLevel, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.AccountUserLevel), nil
	}
}

func (a accountUserLevelDo) Last() (*entity.AccountUserLevel, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.AccountUserLevel), nil
	}
}

func (a accountUserLevelDo) Find() ([]*entity.AccountUserLevel, error) {
	result, err := a.DO.Find()
	return result.([]*entity.AccountUserLevel), err
}

func (a accountUserLevelDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.AccountUserLevel, err error) {
	buf := make([]*entity.AccountUserLevel, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a accountUserLevelDo) FindInBatches(result *[]*entity.AccountUserLevel, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a accountUserLevelDo) Attrs(attrs ...field.AssignExpr) *accountUserLevelDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a accountUserLevelDo) Assign(attrs ...field.AssignExpr) *accountUserLevelDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a accountUserLevelDo) Joins(fields ...field.RelationField) *accountUserLevelDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a accountUserLevelDo) Preload(fields ...field.RelationField) *accountUserLevelDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a accountUserLevelDo) FirstOrInit() (*entity.AccountUserLevel, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.AccountUserLevel), nil
	}
}

func (a accountUserLevelDo) FirstOrCreate() (*entity.AccountUserLevel, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.AccountUserLevel), nil
	}
}

func (a accountUserLevelDo) FindByPage(offset int, limit int) (result []*entity.AccountUserLevel, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a accountUserLevelDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a accountUserLevelDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a accountUserLevelDo) Delete(models ...*entity.AccountUserLevel) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *accountUserLevelDo) withDO(do gen.Dao) *accountUserLevelDo {
	a.DO = *do.(*gen.DO)
	return a
}
