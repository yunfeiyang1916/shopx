// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"shopx/app/account-srv/internal/biz/entity"
)

func newAccountUserLoginHistory(db *gorm.DB, opts ...gen.DOOption) accountUserLoginHistory {
	_accountUserLoginHistory := accountUserLoginHistory{}

	_accountUserLoginHistory.accountUserLoginHistoryDo.UseDB(db, opts...)
	_accountUserLoginHistory.accountUserLoginHistoryDo.UseModel(&entity.AccountUserLoginHistory{})

	tableName := _accountUserLoginHistory.accountUserLoginHistoryDo.TableName()
	_accountUserLoginHistory.ALL = field.NewAsterisk(tableName)
	_accountUserLoginHistory.UserLoginHistoryID = field.NewInt32(tableName, "user_login_history_id")
	_accountUserLoginHistory.UserID = field.NewInt32(tableName, "user_id")
	_accountUserLoginHistory.UserAccount = field.NewString(tableName, "user_account")
	_accountUserLoginHistory.UserLoginIP = field.NewString(tableName, "user_login_ip")
	_accountUserLoginHistory.UserLoginTime = field.NewInt64(tableName, "user_login_time")
	_accountUserLoginHistory.UserLoginState = field.NewField(tableName, "user_login_state")

	_accountUserLoginHistory.fillFieldMap()

	return _accountUserLoginHistory
}

// accountUserLoginHistory 用户登录信息表
type accountUserLoginHistory struct {
	accountUserLoginHistoryDo accountUserLoginHistoryDo

	ALL                field.Asterisk
	UserLoginHistoryID field.Int32  // 日志编号
	UserID             field.Int32  // 用户编号
	UserAccount        field.String // 用户账号
	UserLoginIP        field.String // 登录IP
	UserLoginTime      field.Int64  // 登录时间
	UserLoginState     field.Field  // 登录状态(BOOL):0-登录失败;1-登录成功

	fieldMap map[string]field.Expr
}

func (a accountUserLoginHistory) Table(newTableName string) *accountUserLoginHistory {
	a.accountUserLoginHistoryDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a accountUserLoginHistory) As(alias string) *accountUserLoginHistory {
	a.accountUserLoginHistoryDo.DO = *(a.accountUserLoginHistoryDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *accountUserLoginHistory) updateTableName(table string) *accountUserLoginHistory {
	a.ALL = field.NewAsterisk(table)
	a.UserLoginHistoryID = field.NewInt32(table, "user_login_history_id")
	a.UserID = field.NewInt32(table, "user_id")
	a.UserAccount = field.NewString(table, "user_account")
	a.UserLoginIP = field.NewString(table, "user_login_ip")
	a.UserLoginTime = field.NewInt64(table, "user_login_time")
	a.UserLoginState = field.NewField(table, "user_login_state")

	a.fillFieldMap()

	return a
}

func (a *accountUserLoginHistory) WithContext(ctx context.Context) *accountUserLoginHistoryDo {
	return a.accountUserLoginHistoryDo.WithContext(ctx)
}

func (a accountUserLoginHistory) TableName() string { return a.accountUserLoginHistoryDo.TableName() }

func (a accountUserLoginHistory) Alias() string { return a.accountUserLoginHistoryDo.Alias() }

func (a accountUserLoginHistory) Columns(cols ...field.Expr) gen.Columns {
	return a.accountUserLoginHistoryDo.Columns(cols...)
}

func (a *accountUserLoginHistory) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *accountUserLoginHistory) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 6)
	a.fieldMap["user_login_history_id"] = a.UserLoginHistoryID
	a.fieldMap["user_id"] = a.UserID
	a.fieldMap["user_account"] = a.UserAccount
	a.fieldMap["user_login_ip"] = a.UserLoginIP
	a.fieldMap["user_login_time"] = a.UserLoginTime
	a.fieldMap["user_login_state"] = a.UserLoginState
}

func (a accountUserLoginHistory) clone(db *gorm.DB) accountUserLoginHistory {
	a.accountUserLoginHistoryDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a accountUserLoginHistory) replaceDB(db *gorm.DB) accountUserLoginHistory {
	a.accountUserLoginHistoryDo.ReplaceDB(db)
	return a
}

type accountUserLoginHistoryDo struct{ gen.DO }

func (a accountUserLoginHistoryDo) Debug() *accountUserLoginHistoryDo {
	return a.withDO(a.DO.Debug())
}

func (a accountUserLoginHistoryDo) WithContext(ctx context.Context) *accountUserLoginHistoryDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a accountUserLoginHistoryDo) ReadDB() *accountUserLoginHistoryDo {
	return a.Clauses(dbresolver.Read)
}

func (a accountUserLoginHistoryDo) WriteDB() *accountUserLoginHistoryDo {
	return a.Clauses(dbresolver.Write)
}

func (a accountUserLoginHistoryDo) Session(config *gorm.Session) *accountUserLoginHistoryDo {
	return a.withDO(a.DO.Session(config))
}

func (a accountUserLoginHistoryDo) Clauses(conds ...clause.Expression) *accountUserLoginHistoryDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a accountUserLoginHistoryDo) Returning(value interface{}, columns ...string) *accountUserLoginHistoryDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a accountUserLoginHistoryDo) Not(conds ...gen.Condition) *accountUserLoginHistoryDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a accountUserLoginHistoryDo) Or(conds ...gen.Condition) *accountUserLoginHistoryDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a accountUserLoginHistoryDo) Select(conds ...field.Expr) *accountUserLoginHistoryDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a accountUserLoginHistoryDo) Where(conds ...gen.Condition) *accountUserLoginHistoryDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a accountUserLoginHistoryDo) Order(conds ...field.Expr) *accountUserLoginHistoryDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a accountUserLoginHistoryDo) Distinct(cols ...field.Expr) *accountUserLoginHistoryDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a accountUserLoginHistoryDo) Omit(cols ...field.Expr) *accountUserLoginHistoryDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a accountUserLoginHistoryDo) Join(table schema.Tabler, on ...field.Expr) *accountUserLoginHistoryDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a accountUserLoginHistoryDo) LeftJoin(table schema.Tabler, on ...field.Expr) *accountUserLoginHistoryDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a accountUserLoginHistoryDo) RightJoin(table schema.Tabler, on ...field.Expr) *accountUserLoginHistoryDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a accountUserLoginHistoryDo) Group(cols ...field.Expr) *accountUserLoginHistoryDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a accountUserLoginHistoryDo) Having(conds ...gen.Condition) *accountUserLoginHistoryDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a accountUserLoginHistoryDo) Limit(limit int) *accountUserLoginHistoryDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a accountUserLoginHistoryDo) Offset(offset int) *accountUserLoginHistoryDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a accountUserLoginHistoryDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *accountUserLoginHistoryDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a accountUserLoginHistoryDo) Unscoped() *accountUserLoginHistoryDo {
	return a.withDO(a.DO.Unscoped())
}

func (a accountUserLoginHistoryDo) Create(values ...*entity.AccountUserLoginHistory) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a accountUserLoginHistoryDo) CreateInBatches(values []*entity.AccountUserLoginHistory, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a accountUserLoginHistoryDo) Save(values ...*entity.AccountUserLoginHistory) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a accountUserLoginHistoryDo) First() (*entity.AccountUserLoginHistory, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.AccountUserLoginHistory), nil
	}
}

func (a accountUserLoginHistoryDo) Take() (*entity.AccountUserLoginHistory, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.AccountUserLoginHistory), nil
	}
}

func (a accountUserLoginHistoryDo) Last() (*entity.AccountUserLoginHistory, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.AccountUserLoginHistory), nil
	}
}

func (a accountUserLoginHistoryDo) Find() ([]*entity.AccountUserLoginHistory, error) {
	result, err := a.DO.Find()
	return result.([]*entity.AccountUserLoginHistory), err
}

func (a accountUserLoginHistoryDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.AccountUserLoginHistory, err error) {
	buf := make([]*entity.AccountUserLoginHistory, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a accountUserLoginHistoryDo) FindInBatches(result *[]*entity.AccountUserLoginHistory, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a accountUserLoginHistoryDo) Attrs(attrs ...field.AssignExpr) *accountUserLoginHistoryDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a accountUserLoginHistoryDo) Assign(attrs ...field.AssignExpr) *accountUserLoginHistoryDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a accountUserLoginHistoryDo) Joins(fields ...field.RelationField) *accountUserLoginHistoryDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a accountUserLoginHistoryDo) Preload(fields ...field.RelationField) *accountUserLoginHistoryDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a accountUserLoginHistoryDo) FirstOrInit() (*entity.AccountUserLoginHistory, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.AccountUserLoginHistory), nil
	}
}

func (a accountUserLoginHistoryDo) FirstOrCreate() (*entity.AccountUserLoginHistory, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.AccountUserLoginHistory), nil
	}
}

func (a accountUserLoginHistoryDo) FindByPage(offset int, limit int) (result []*entity.AccountUserLoginHistory, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a accountUserLoginHistoryDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a accountUserLoginHistoryDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a accountUserLoginHistoryDo) Delete(models ...*entity.AccountUserLoginHistory) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *accountUserLoginHistoryDo) withDO(do gen.Dao) *accountUserLoginHistoryDo {
	a.DO = *do.(*gen.DO)
	return a
}
