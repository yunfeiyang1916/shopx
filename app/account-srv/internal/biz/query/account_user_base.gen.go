// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"shopx/app/account-srv/internal/biz/entity"
)

func newAccountUserBase(db *gorm.DB, opts ...gen.DOOption) accountUserBase {
	_accountUserBase := accountUserBase{}

	_accountUserBase.accountUserBaseDo.UseDB(db, opts...)
	_accountUserBase.accountUserBaseDo.UseModel(&entity.AccountUserBase{})

	tableName := _accountUserBase.accountUserBaseDo.TableName()
	_accountUserBase.ALL = field.NewAsterisk(tableName)
	_accountUserBase.UserID = field.NewInt32(tableName, "user_id")
	_accountUserBase.UserAccount = field.NewString(tableName, "user_account")
	_accountUserBase.UserPassword = field.NewString(tableName, "user_password")
	_accountUserBase.UserSalt = field.NewString(tableName, "user_salt")

	_accountUserBase.fillFieldMap()

	return _accountUserBase
}

// accountUserBase 用户基本信息表
type accountUserBase struct {
	accountUserBaseDo accountUserBaseDo

	ALL          field.Asterisk
	UserID       field.Int32  // 用户编号
	UserAccount  field.String // 用户账号
	UserPassword field.String // 用户密码
	UserSalt     field.String // salt值

	fieldMap map[string]field.Expr
}

func (a accountUserBase) Table(newTableName string) *accountUserBase {
	a.accountUserBaseDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a accountUserBase) As(alias string) *accountUserBase {
	a.accountUserBaseDo.DO = *(a.accountUserBaseDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *accountUserBase) updateTableName(table string) *accountUserBase {
	a.ALL = field.NewAsterisk(table)
	a.UserID = field.NewInt32(table, "user_id")
	a.UserAccount = field.NewString(table, "user_account")
	a.UserPassword = field.NewString(table, "user_password")
	a.UserSalt = field.NewString(table, "user_salt")

	a.fillFieldMap()

	return a
}

func (a *accountUserBase) WithContext(ctx context.Context) *accountUserBaseDo {
	return a.accountUserBaseDo.WithContext(ctx)
}

func (a accountUserBase) TableName() string { return a.accountUserBaseDo.TableName() }

func (a accountUserBase) Alias() string { return a.accountUserBaseDo.Alias() }

func (a accountUserBase) Columns(cols ...field.Expr) gen.Columns {
	return a.accountUserBaseDo.Columns(cols...)
}

func (a *accountUserBase) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *accountUserBase) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 4)
	a.fieldMap["user_id"] = a.UserID
	a.fieldMap["user_account"] = a.UserAccount
	a.fieldMap["user_password"] = a.UserPassword
	a.fieldMap["user_salt"] = a.UserSalt
}

func (a accountUserBase) clone(db *gorm.DB) accountUserBase {
	a.accountUserBaseDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a accountUserBase) replaceDB(db *gorm.DB) accountUserBase {
	a.accountUserBaseDo.ReplaceDB(db)
	return a
}

type accountUserBaseDo struct{ gen.DO }

func (a accountUserBaseDo) Debug() *accountUserBaseDo {
	return a.withDO(a.DO.Debug())
}

func (a accountUserBaseDo) WithContext(ctx context.Context) *accountUserBaseDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a accountUserBaseDo) ReadDB() *accountUserBaseDo {
	return a.Clauses(dbresolver.Read)
}

func (a accountUserBaseDo) WriteDB() *accountUserBaseDo {
	return a.Clauses(dbresolver.Write)
}

func (a accountUserBaseDo) Session(config *gorm.Session) *accountUserBaseDo {
	return a.withDO(a.DO.Session(config))
}

func (a accountUserBaseDo) Clauses(conds ...clause.Expression) *accountUserBaseDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a accountUserBaseDo) Returning(value interface{}, columns ...string) *accountUserBaseDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a accountUserBaseDo) Not(conds ...gen.Condition) *accountUserBaseDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a accountUserBaseDo) Or(conds ...gen.Condition) *accountUserBaseDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a accountUserBaseDo) Select(conds ...field.Expr) *accountUserBaseDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a accountUserBaseDo) Where(conds ...gen.Condition) *accountUserBaseDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a accountUserBaseDo) Order(conds ...field.Expr) *accountUserBaseDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a accountUserBaseDo) Distinct(cols ...field.Expr) *accountUserBaseDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a accountUserBaseDo) Omit(cols ...field.Expr) *accountUserBaseDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a accountUserBaseDo) Join(table schema.Tabler, on ...field.Expr) *accountUserBaseDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a accountUserBaseDo) LeftJoin(table schema.Tabler, on ...field.Expr) *accountUserBaseDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a accountUserBaseDo) RightJoin(table schema.Tabler, on ...field.Expr) *accountUserBaseDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a accountUserBaseDo) Group(cols ...field.Expr) *accountUserBaseDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a accountUserBaseDo) Having(conds ...gen.Condition) *accountUserBaseDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a accountUserBaseDo) Limit(limit int) *accountUserBaseDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a accountUserBaseDo) Offset(offset int) *accountUserBaseDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a accountUserBaseDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *accountUserBaseDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a accountUserBaseDo) Unscoped() *accountUserBaseDo {
	return a.withDO(a.DO.Unscoped())
}

func (a accountUserBaseDo) Create(values ...*entity.AccountUserBase) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a accountUserBaseDo) CreateInBatches(values []*entity.AccountUserBase, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a accountUserBaseDo) Save(values ...*entity.AccountUserBase) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a accountUserBaseDo) First() (*entity.AccountUserBase, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.AccountUserBase), nil
	}
}

func (a accountUserBaseDo) Take() (*entity.AccountUserBase, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.AccountUserBase), nil
	}
}

func (a accountUserBaseDo) Last() (*entity.AccountUserBase, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.AccountUserBase), nil
	}
}

func (a accountUserBaseDo) Find() ([]*entity.AccountUserBase, error) {
	result, err := a.DO.Find()
	return result.([]*entity.AccountUserBase), err
}

func (a accountUserBaseDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.AccountUserBase, err error) {
	buf := make([]*entity.AccountUserBase, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a accountUserBaseDo) FindInBatches(result *[]*entity.AccountUserBase, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a accountUserBaseDo) Attrs(attrs ...field.AssignExpr) *accountUserBaseDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a accountUserBaseDo) Assign(attrs ...field.AssignExpr) *accountUserBaseDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a accountUserBaseDo) Joins(fields ...field.RelationField) *accountUserBaseDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a accountUserBaseDo) Preload(fields ...field.RelationField) *accountUserBaseDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a accountUserBaseDo) FirstOrInit() (*entity.AccountUserBase, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.AccountUserBase), nil
	}
}

func (a accountUserBaseDo) FirstOrCreate() (*entity.AccountUserBase, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.AccountUserBase), nil
	}
}

func (a accountUserBaseDo) FindByPage(offset int, limit int) (result []*entity.AccountUserBase, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a accountUserBaseDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a accountUserBaseDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a accountUserBaseDo) Delete(models ...*entity.AccountUserBase) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *accountUserBaseDo) withDO(do gen.Dao) *accountUserBaseDo {
	a.DO = *do.(*gen.DO)
	return a
}
