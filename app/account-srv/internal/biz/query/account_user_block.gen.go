// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"shopx/app/account-srv/internal/biz/entity"
)

func newAccountUserBlock(db *gorm.DB, opts ...gen.DOOption) accountUserBlock {
	_accountUserBlock := accountUserBlock{}

	_accountUserBlock.accountUserBlockDo.UseDB(db, opts...)
	_accountUserBlock.accountUserBlockDo.UseModel(&entity.AccountUserBlock{})

	tableName := _accountUserBlock.accountUserBlockDo.TableName()
	_accountUserBlock.ALL = field.NewAsterisk(tableName)
	_accountUserBlock.UserBlackID = field.NewInt32(tableName, "user_black_id")
	_accountUserBlock.UserID = field.NewInt32(tableName, "user_id")
	_accountUserBlock.BlackID = field.NewInt32(tableName, "black_id")
	_accountUserBlock.UserBlackTime = field.NewInt64(tableName, "user_black_time")

	_accountUserBlock.fillFieldMap()

	return _accountUserBlock
}

// accountUserBlock 用户黑名单表
type accountUserBlock struct {
	accountUserBlockDo accountUserBlockDo

	ALL           field.Asterisk
	UserBlackID   field.Int32 // 黑名单编号
	UserID        field.Int32 // 用户编号
	BlackID       field.Int32 // 拉黑用户编号
	UserBlackTime field.Int64 // 拉黑时间

	fieldMap map[string]field.Expr
}

func (a accountUserBlock) Table(newTableName string) *accountUserBlock {
	a.accountUserBlockDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a accountUserBlock) As(alias string) *accountUserBlock {
	a.accountUserBlockDo.DO = *(a.accountUserBlockDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *accountUserBlock) updateTableName(table string) *accountUserBlock {
	a.ALL = field.NewAsterisk(table)
	a.UserBlackID = field.NewInt32(table, "user_black_id")
	a.UserID = field.NewInt32(table, "user_id")
	a.BlackID = field.NewInt32(table, "black_id")
	a.UserBlackTime = field.NewInt64(table, "user_black_time")

	a.fillFieldMap()

	return a
}

func (a *accountUserBlock) WithContext(ctx context.Context) *accountUserBlockDo {
	return a.accountUserBlockDo.WithContext(ctx)
}

func (a accountUserBlock) TableName() string { return a.accountUserBlockDo.TableName() }

func (a accountUserBlock) Alias() string { return a.accountUserBlockDo.Alias() }

func (a accountUserBlock) Columns(cols ...field.Expr) gen.Columns {
	return a.accountUserBlockDo.Columns(cols...)
}

func (a *accountUserBlock) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *accountUserBlock) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 4)
	a.fieldMap["user_black_id"] = a.UserBlackID
	a.fieldMap["user_id"] = a.UserID
	a.fieldMap["black_id"] = a.BlackID
	a.fieldMap["user_black_time"] = a.UserBlackTime
}

func (a accountUserBlock) clone(db *gorm.DB) accountUserBlock {
	a.accountUserBlockDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a accountUserBlock) replaceDB(db *gorm.DB) accountUserBlock {
	a.accountUserBlockDo.ReplaceDB(db)
	return a
}

type accountUserBlockDo struct{ gen.DO }

func (a accountUserBlockDo) Debug() *accountUserBlockDo {
	return a.withDO(a.DO.Debug())
}

func (a accountUserBlockDo) WithContext(ctx context.Context) *accountUserBlockDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a accountUserBlockDo) ReadDB() *accountUserBlockDo {
	return a.Clauses(dbresolver.Read)
}

func (a accountUserBlockDo) WriteDB() *accountUserBlockDo {
	return a.Clauses(dbresolver.Write)
}

func (a accountUserBlockDo) Session(config *gorm.Session) *accountUserBlockDo {
	return a.withDO(a.DO.Session(config))
}

func (a accountUserBlockDo) Clauses(conds ...clause.Expression) *accountUserBlockDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a accountUserBlockDo) Returning(value interface{}, columns ...string) *accountUserBlockDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a accountUserBlockDo) Not(conds ...gen.Condition) *accountUserBlockDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a accountUserBlockDo) Or(conds ...gen.Condition) *accountUserBlockDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a accountUserBlockDo) Select(conds ...field.Expr) *accountUserBlockDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a accountUserBlockDo) Where(conds ...gen.Condition) *accountUserBlockDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a accountUserBlockDo) Order(conds ...field.Expr) *accountUserBlockDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a accountUserBlockDo) Distinct(cols ...field.Expr) *accountUserBlockDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a accountUserBlockDo) Omit(cols ...field.Expr) *accountUserBlockDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a accountUserBlockDo) Join(table schema.Tabler, on ...field.Expr) *accountUserBlockDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a accountUserBlockDo) LeftJoin(table schema.Tabler, on ...field.Expr) *accountUserBlockDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a accountUserBlockDo) RightJoin(table schema.Tabler, on ...field.Expr) *accountUserBlockDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a accountUserBlockDo) Group(cols ...field.Expr) *accountUserBlockDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a accountUserBlockDo) Having(conds ...gen.Condition) *accountUserBlockDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a accountUserBlockDo) Limit(limit int) *accountUserBlockDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a accountUserBlockDo) Offset(offset int) *accountUserBlockDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a accountUserBlockDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *accountUserBlockDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a accountUserBlockDo) Unscoped() *accountUserBlockDo {
	return a.withDO(a.DO.Unscoped())
}

func (a accountUserBlockDo) Create(values ...*entity.AccountUserBlock) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a accountUserBlockDo) CreateInBatches(values []*entity.AccountUserBlock, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a accountUserBlockDo) Save(values ...*entity.AccountUserBlock) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a accountUserBlockDo) First() (*entity.AccountUserBlock, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.AccountUserBlock), nil
	}
}

func (a accountUserBlockDo) Take() (*entity.AccountUserBlock, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.AccountUserBlock), nil
	}
}

func (a accountUserBlockDo) Last() (*entity.AccountUserBlock, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.AccountUserBlock), nil
	}
}

func (a accountUserBlockDo) Find() ([]*entity.AccountUserBlock, error) {
	result, err := a.DO.Find()
	return result.([]*entity.AccountUserBlock), err
}

func (a accountUserBlockDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.AccountUserBlock, err error) {
	buf := make([]*entity.AccountUserBlock, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a accountUserBlockDo) FindInBatches(result *[]*entity.AccountUserBlock, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a accountUserBlockDo) Attrs(attrs ...field.AssignExpr) *accountUserBlockDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a accountUserBlockDo) Assign(attrs ...field.AssignExpr) *accountUserBlockDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a accountUserBlockDo) Joins(fields ...field.RelationField) *accountUserBlockDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a accountUserBlockDo) Preload(fields ...field.RelationField) *accountUserBlockDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a accountUserBlockDo) FirstOrInit() (*entity.AccountUserBlock, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.AccountUserBlock), nil
	}
}

func (a accountUserBlockDo) FirstOrCreate() (*entity.AccountUserBlock, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.AccountUserBlock), nil
	}
}

func (a accountUserBlockDo) FindByPage(offset int, limit int) (result []*entity.AccountUserBlock, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a accountUserBlockDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a accountUserBlockDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a accountUserBlockDo) Delete(models ...*entity.AccountUserBlock) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *accountUserBlockDo) withDO(do gen.Dao) *accountUserBlockDo {
	a.DO = *do.(*gen.DO)
	return a
}
