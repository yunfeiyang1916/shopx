// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"shopx/app/account-srv/internal/biz/entity"
)

func newAccountUserTagGroup(db *gorm.DB, opts ...gen.DOOption) accountUserTagGroup {
	_accountUserTagGroup := accountUserTagGroup{}

	_accountUserTagGroup.accountUserTagGroupDo.UseDB(db, opts...)
	_accountUserTagGroup.accountUserTagGroupDo.UseModel(&entity.AccountUserTagGroup{})

	tableName := _accountUserTagGroup.accountUserTagGroupDo.TableName()
	_accountUserTagGroup.ALL = field.NewAsterisk(tableName)
	_accountUserTagGroup.TagGroupID = field.NewInt32(tableName, "tag_group_id")
	_accountUserTagGroup.TagGroupName = field.NewString(tableName, "tag_group_name")
	_accountUserTagGroup.TagGroupSort = field.NewInt32(tableName, "tag_group_sort")
	_accountUserTagGroup.TagGroupEnable = field.NewField(tableName, "tag_group_enable")
	_accountUserTagGroup.TagGroupBuildin = field.NewField(tableName, "tag_group_buildin")
	_accountUserTagGroup.UpdateTime = field.NewTime(tableName, "update_time")
	_accountUserTagGroup.CreateTime = field.NewTime(tableName, "create_time")

	_accountUserTagGroup.fillFieldMap()

	return _accountUserTagGroup
}

// accountUserTagGroup 标签分组表
type accountUserTagGroup struct {
	accountUserTagGroupDo accountUserTagGroupDo

	ALL             field.Asterisk
	TagGroupID      field.Int32  // 分组编号
	TagGroupName    field.String // 分组名称
	TagGroupSort    field.Int32  // 分组排序:从小到大
	TagGroupEnable  field.Field  // 是否有效(BOOL):0-禁用;1-启用
	TagGroupBuildin field.Field  // 系统内置(BOOL):1-是; 0-否
	UpdateTime      field.Time   // 更新时间
	CreateTime      field.Time   // 添加时间

	fieldMap map[string]field.Expr
}

func (a accountUserTagGroup) Table(newTableName string) *accountUserTagGroup {
	a.accountUserTagGroupDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a accountUserTagGroup) As(alias string) *accountUserTagGroup {
	a.accountUserTagGroupDo.DO = *(a.accountUserTagGroupDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *accountUserTagGroup) updateTableName(table string) *accountUserTagGroup {
	a.ALL = field.NewAsterisk(table)
	a.TagGroupID = field.NewInt32(table, "tag_group_id")
	a.TagGroupName = field.NewString(table, "tag_group_name")
	a.TagGroupSort = field.NewInt32(table, "tag_group_sort")
	a.TagGroupEnable = field.NewField(table, "tag_group_enable")
	a.TagGroupBuildin = field.NewField(table, "tag_group_buildin")
	a.UpdateTime = field.NewTime(table, "update_time")
	a.CreateTime = field.NewTime(table, "create_time")

	a.fillFieldMap()

	return a
}

func (a *accountUserTagGroup) WithContext(ctx context.Context) *accountUserTagGroupDo {
	return a.accountUserTagGroupDo.WithContext(ctx)
}

func (a accountUserTagGroup) TableName() string { return a.accountUserTagGroupDo.TableName() }

func (a accountUserTagGroup) Alias() string { return a.accountUserTagGroupDo.Alias() }

func (a accountUserTagGroup) Columns(cols ...field.Expr) gen.Columns {
	return a.accountUserTagGroupDo.Columns(cols...)
}

func (a *accountUserTagGroup) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *accountUserTagGroup) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 7)
	a.fieldMap["tag_group_id"] = a.TagGroupID
	a.fieldMap["tag_group_name"] = a.TagGroupName
	a.fieldMap["tag_group_sort"] = a.TagGroupSort
	a.fieldMap["tag_group_enable"] = a.TagGroupEnable
	a.fieldMap["tag_group_buildin"] = a.TagGroupBuildin
	a.fieldMap["update_time"] = a.UpdateTime
	a.fieldMap["create_time"] = a.CreateTime
}

func (a accountUserTagGroup) clone(db *gorm.DB) accountUserTagGroup {
	a.accountUserTagGroupDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a accountUserTagGroup) replaceDB(db *gorm.DB) accountUserTagGroup {
	a.accountUserTagGroupDo.ReplaceDB(db)
	return a
}

type accountUserTagGroupDo struct{ gen.DO }

func (a accountUserTagGroupDo) Debug() *accountUserTagGroupDo {
	return a.withDO(a.DO.Debug())
}

func (a accountUserTagGroupDo) WithContext(ctx context.Context) *accountUserTagGroupDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a accountUserTagGroupDo) ReadDB() *accountUserTagGroupDo {
	return a.Clauses(dbresolver.Read)
}

func (a accountUserTagGroupDo) WriteDB() *accountUserTagGroupDo {
	return a.Clauses(dbresolver.Write)
}

func (a accountUserTagGroupDo) Session(config *gorm.Session) *accountUserTagGroupDo {
	return a.withDO(a.DO.Session(config))
}

func (a accountUserTagGroupDo) Clauses(conds ...clause.Expression) *accountUserTagGroupDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a accountUserTagGroupDo) Returning(value interface{}, columns ...string) *accountUserTagGroupDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a accountUserTagGroupDo) Not(conds ...gen.Condition) *accountUserTagGroupDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a accountUserTagGroupDo) Or(conds ...gen.Condition) *accountUserTagGroupDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a accountUserTagGroupDo) Select(conds ...field.Expr) *accountUserTagGroupDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a accountUserTagGroupDo) Where(conds ...gen.Condition) *accountUserTagGroupDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a accountUserTagGroupDo) Order(conds ...field.Expr) *accountUserTagGroupDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a accountUserTagGroupDo) Distinct(cols ...field.Expr) *accountUserTagGroupDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a accountUserTagGroupDo) Omit(cols ...field.Expr) *accountUserTagGroupDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a accountUserTagGroupDo) Join(table schema.Tabler, on ...field.Expr) *accountUserTagGroupDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a accountUserTagGroupDo) LeftJoin(table schema.Tabler, on ...field.Expr) *accountUserTagGroupDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a accountUserTagGroupDo) RightJoin(table schema.Tabler, on ...field.Expr) *accountUserTagGroupDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a accountUserTagGroupDo) Group(cols ...field.Expr) *accountUserTagGroupDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a accountUserTagGroupDo) Having(conds ...gen.Condition) *accountUserTagGroupDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a accountUserTagGroupDo) Limit(limit int) *accountUserTagGroupDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a accountUserTagGroupDo) Offset(offset int) *accountUserTagGroupDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a accountUserTagGroupDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *accountUserTagGroupDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a accountUserTagGroupDo) Unscoped() *accountUserTagGroupDo {
	return a.withDO(a.DO.Unscoped())
}

func (a accountUserTagGroupDo) Create(values ...*entity.AccountUserTagGroup) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a accountUserTagGroupDo) CreateInBatches(values []*entity.AccountUserTagGroup, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a accountUserTagGroupDo) Save(values ...*entity.AccountUserTagGroup) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a accountUserTagGroupDo) First() (*entity.AccountUserTagGroup, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.AccountUserTagGroup), nil
	}
}

func (a accountUserTagGroupDo) Take() (*entity.AccountUserTagGroup, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.AccountUserTagGroup), nil
	}
}

func (a accountUserTagGroupDo) Last() (*entity.AccountUserTagGroup, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.AccountUserTagGroup), nil
	}
}

func (a accountUserTagGroupDo) Find() ([]*entity.AccountUserTagGroup, error) {
	result, err := a.DO.Find()
	return result.([]*entity.AccountUserTagGroup), err
}

func (a accountUserTagGroupDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.AccountUserTagGroup, err error) {
	buf := make([]*entity.AccountUserTagGroup, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a accountUserTagGroupDo) FindInBatches(result *[]*entity.AccountUserTagGroup, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a accountUserTagGroupDo) Attrs(attrs ...field.AssignExpr) *accountUserTagGroupDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a accountUserTagGroupDo) Assign(attrs ...field.AssignExpr) *accountUserTagGroupDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a accountUserTagGroupDo) Joins(fields ...field.RelationField) *accountUserTagGroupDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a accountUserTagGroupDo) Preload(fields ...field.RelationField) *accountUserTagGroupDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a accountUserTagGroupDo) FirstOrInit() (*entity.AccountUserTagGroup, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.AccountUserTagGroup), nil
	}
}

func (a accountUserTagGroupDo) FirstOrCreate() (*entity.AccountUserTagGroup, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.AccountUserTagGroup), nil
	}
}

func (a accountUserTagGroupDo) FindByPage(offset int, limit int) (result []*entity.AccountUserTagGroup, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a accountUserTagGroupDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a accountUserTagGroupDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a accountUserTagGroupDo) Delete(models ...*entity.AccountUserTagGroup) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *accountUserTagGroupDo) withDO(do gen.Dao) *accountUserTagGroupDo {
	a.DO = *do.(*gen.DO)
	return a
}
