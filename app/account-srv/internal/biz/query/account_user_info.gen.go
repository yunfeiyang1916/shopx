// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"shopx/app/account-srv/internal/biz/entity"
)

func newAccountUserInfo(db *gorm.DB, opts ...gen.DOOption) accountUserInfo {
	_accountUserInfo := accountUserInfo{}

	_accountUserInfo.accountUserInfoDo.UseDB(db, opts...)
	_accountUserInfo.accountUserInfoDo.UseModel(&entity.AccountUserInfo{})

	tableName := _accountUserInfo.accountUserInfoDo.TableName()
	_accountUserInfo.ALL = field.NewAsterisk(tableName)
	_accountUserInfo.UserID = field.NewInt32(tableName, "user_id")
	_accountUserInfo.UserAccount = field.NewString(tableName, "user_account")
	_accountUserInfo.UserNickname = field.NewString(tableName, "user_nickname")
	_accountUserInfo.UserAvatar = field.NewString(tableName, "user_avatar")
	_accountUserInfo.UserState = field.NewInt32(tableName, "user_state")
	_accountUserInfo.UserMobile = field.NewString(tableName, "user_mobile")
	_accountUserInfo.UserIntl = field.NewString(tableName, "user_intl")
	_accountUserInfo.UserGender = field.NewInt32(tableName, "user_gender")
	_accountUserInfo.UserBirthday = field.NewTime(tableName, "user_birthday")
	_accountUserInfo.UserEmail = field.NewString(tableName, "user_email")
	_accountUserInfo.UserLevelID = field.NewInt32(tableName, "user_level_id")
	_accountUserInfo.UserRealname = field.NewString(tableName, "user_realname")
	_accountUserInfo.UserIdcard = field.NewString(tableName, "user_idcard")
	_accountUserInfo.UserIdcardImages = field.NewString(tableName, "user_idcard_images")
	_accountUserInfo.UserIsAuthentication = field.NewInt32(tableName, "user_is_authentication")
	_accountUserInfo.TagIds = field.NewString(tableName, "tag_ids")
	_accountUserInfo.UserFrom = field.NewInt32(tableName, "user_from")
	_accountUserInfo.UserNew = field.NewField(tableName, "user_new")

	_accountUserInfo.fillFieldMap()

	return _accountUserInfo
}

// accountUserInfo 用户详细信息表
type accountUserInfo struct {
	accountUserInfoDo accountUserInfoDo

	ALL                  field.Asterisk
	UserID               field.Int32  // 用户编号
	UserAccount          field.String // 用户账号
	UserNickname         field.String // 用户昵称
	UserAvatar           field.String // 用户头像
	UserState            field.Int32  // 状态(ENUM):0-锁定;1-已激活;2-未激活;
	UserMobile           field.String // 手机号码(mobile)
	UserIntl             field.String // 国家编码
	UserGender           field.Int32  // 性别(ENUM):0-保密;1-男;  2-女;
	UserBirthday         field.Time   // 生日(DATE)
	UserEmail            field.String // 用户邮箱(email)
	UserLevelID          field.Int32  // 等级编号
	UserRealname         field.String // 真实姓名
	UserIdcard           field.String // 身份证
	UserIdcardImages     field.String // 身份证图片(DTO)
	UserIsAuthentication field.Int32  // 认证状态(ENUM):0-未认证;1-待审核;2-认证通过;3-认证失败
	TagIds               field.String // 用户标签(DOT)
	UserFrom             field.Int32  // 用户来源(ENUM):2310-其它;2311-pc;2312-H5;2313-APP;2314-小程序;2315-公众号
	UserNew              field.Field  // 新人标识(BOOL):0-不是;1-是

	fieldMap map[string]field.Expr
}

func (a accountUserInfo) Table(newTableName string) *accountUserInfo {
	a.accountUserInfoDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a accountUserInfo) As(alias string) *accountUserInfo {
	a.accountUserInfoDo.DO = *(a.accountUserInfoDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *accountUserInfo) updateTableName(table string) *accountUserInfo {
	a.ALL = field.NewAsterisk(table)
	a.UserID = field.NewInt32(table, "user_id")
	a.UserAccount = field.NewString(table, "user_account")
	a.UserNickname = field.NewString(table, "user_nickname")
	a.UserAvatar = field.NewString(table, "user_avatar")
	a.UserState = field.NewInt32(table, "user_state")
	a.UserMobile = field.NewString(table, "user_mobile")
	a.UserIntl = field.NewString(table, "user_intl")
	a.UserGender = field.NewInt32(table, "user_gender")
	a.UserBirthday = field.NewTime(table, "user_birthday")
	a.UserEmail = field.NewString(table, "user_email")
	a.UserLevelID = field.NewInt32(table, "user_level_id")
	a.UserRealname = field.NewString(table, "user_realname")
	a.UserIdcard = field.NewString(table, "user_idcard")
	a.UserIdcardImages = field.NewString(table, "user_idcard_images")
	a.UserIsAuthentication = field.NewInt32(table, "user_is_authentication")
	a.TagIds = field.NewString(table, "tag_ids")
	a.UserFrom = field.NewInt32(table, "user_from")
	a.UserNew = field.NewField(table, "user_new")

	a.fillFieldMap()

	return a
}

func (a *accountUserInfo) WithContext(ctx context.Context) *accountUserInfoDo {
	return a.accountUserInfoDo.WithContext(ctx)
}

func (a accountUserInfo) TableName() string { return a.accountUserInfoDo.TableName() }

func (a accountUserInfo) Alias() string { return a.accountUserInfoDo.Alias() }

func (a accountUserInfo) Columns(cols ...field.Expr) gen.Columns {
	return a.accountUserInfoDo.Columns(cols...)
}

func (a *accountUserInfo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *accountUserInfo) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 18)
	a.fieldMap["user_id"] = a.UserID
	a.fieldMap["user_account"] = a.UserAccount
	a.fieldMap["user_nickname"] = a.UserNickname
	a.fieldMap["user_avatar"] = a.UserAvatar
	a.fieldMap["user_state"] = a.UserState
	a.fieldMap["user_mobile"] = a.UserMobile
	a.fieldMap["user_intl"] = a.UserIntl
	a.fieldMap["user_gender"] = a.UserGender
	a.fieldMap["user_birthday"] = a.UserBirthday
	a.fieldMap["user_email"] = a.UserEmail
	a.fieldMap["user_level_id"] = a.UserLevelID
	a.fieldMap["user_realname"] = a.UserRealname
	a.fieldMap["user_idcard"] = a.UserIdcard
	a.fieldMap["user_idcard_images"] = a.UserIdcardImages
	a.fieldMap["user_is_authentication"] = a.UserIsAuthentication
	a.fieldMap["tag_ids"] = a.TagIds
	a.fieldMap["user_from"] = a.UserFrom
	a.fieldMap["user_new"] = a.UserNew
}

func (a accountUserInfo) clone(db *gorm.DB) accountUserInfo {
	a.accountUserInfoDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a accountUserInfo) replaceDB(db *gorm.DB) accountUserInfo {
	a.accountUserInfoDo.ReplaceDB(db)
	return a
}

type accountUserInfoDo struct{ gen.DO }

func (a accountUserInfoDo) Debug() *accountUserInfoDo {
	return a.withDO(a.DO.Debug())
}

func (a accountUserInfoDo) WithContext(ctx context.Context) *accountUserInfoDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a accountUserInfoDo) ReadDB() *accountUserInfoDo {
	return a.Clauses(dbresolver.Read)
}

func (a accountUserInfoDo) WriteDB() *accountUserInfoDo {
	return a.Clauses(dbresolver.Write)
}

func (a accountUserInfoDo) Session(config *gorm.Session) *accountUserInfoDo {
	return a.withDO(a.DO.Session(config))
}

func (a accountUserInfoDo) Clauses(conds ...clause.Expression) *accountUserInfoDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a accountUserInfoDo) Returning(value interface{}, columns ...string) *accountUserInfoDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a accountUserInfoDo) Not(conds ...gen.Condition) *accountUserInfoDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a accountUserInfoDo) Or(conds ...gen.Condition) *accountUserInfoDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a accountUserInfoDo) Select(conds ...field.Expr) *accountUserInfoDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a accountUserInfoDo) Where(conds ...gen.Condition) *accountUserInfoDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a accountUserInfoDo) Order(conds ...field.Expr) *accountUserInfoDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a accountUserInfoDo) Distinct(cols ...field.Expr) *accountUserInfoDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a accountUserInfoDo) Omit(cols ...field.Expr) *accountUserInfoDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a accountUserInfoDo) Join(table schema.Tabler, on ...field.Expr) *accountUserInfoDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a accountUserInfoDo) LeftJoin(table schema.Tabler, on ...field.Expr) *accountUserInfoDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a accountUserInfoDo) RightJoin(table schema.Tabler, on ...field.Expr) *accountUserInfoDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a accountUserInfoDo) Group(cols ...field.Expr) *accountUserInfoDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a accountUserInfoDo) Having(conds ...gen.Condition) *accountUserInfoDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a accountUserInfoDo) Limit(limit int) *accountUserInfoDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a accountUserInfoDo) Offset(offset int) *accountUserInfoDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a accountUserInfoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *accountUserInfoDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a accountUserInfoDo) Unscoped() *accountUserInfoDo {
	return a.withDO(a.DO.Unscoped())
}

func (a accountUserInfoDo) Create(values ...*entity.AccountUserInfo) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a accountUserInfoDo) CreateInBatches(values []*entity.AccountUserInfo, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a accountUserInfoDo) Save(values ...*entity.AccountUserInfo) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a accountUserInfoDo) First() (*entity.AccountUserInfo, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.AccountUserInfo), nil
	}
}

func (a accountUserInfoDo) Take() (*entity.AccountUserInfo, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.AccountUserInfo), nil
	}
}

func (a accountUserInfoDo) Last() (*entity.AccountUserInfo, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.AccountUserInfo), nil
	}
}

func (a accountUserInfoDo) Find() ([]*entity.AccountUserInfo, error) {
	result, err := a.DO.Find()
	return result.([]*entity.AccountUserInfo), err
}

func (a accountUserInfoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.AccountUserInfo, err error) {
	buf := make([]*entity.AccountUserInfo, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a accountUserInfoDo) FindInBatches(result *[]*entity.AccountUserInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a accountUserInfoDo) Attrs(attrs ...field.AssignExpr) *accountUserInfoDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a accountUserInfoDo) Assign(attrs ...field.AssignExpr) *accountUserInfoDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a accountUserInfoDo) Joins(fields ...field.RelationField) *accountUserInfoDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a accountUserInfoDo) Preload(fields ...field.RelationField) *accountUserInfoDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a accountUserInfoDo) FirstOrInit() (*entity.AccountUserInfo, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.AccountUserInfo), nil
	}
}

func (a accountUserInfoDo) FirstOrCreate() (*entity.AccountUserInfo, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.AccountUserInfo), nil
	}
}

func (a accountUserInfoDo) FindByPage(offset int, limit int) (result []*entity.AccountUserInfo, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a accountUserInfoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a accountUserInfoDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a accountUserInfoDo) Delete(models ...*entity.AccountUserInfo) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *accountUserInfoDo) withDO(do gen.Dao) *accountUserInfoDo {
	a.DO = *do.(*gen.DO)
	return a
}
