// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"shopx/app/account-srv/internal/biz/entity"
)

func newAccountUserLogin(db *gorm.DB, opts ...gen.DOOption) accountUserLogin {
	_accountUserLogin := accountUserLogin{}

	_accountUserLogin.accountUserLoginDo.UseDB(db, opts...)
	_accountUserLogin.accountUserLoginDo.UseModel(&entity.AccountUserLogin{})

	tableName := _accountUserLogin.accountUserLoginDo.TableName()
	_accountUserLogin.ALL = field.NewAsterisk(tableName)
	_accountUserLogin.UserID = field.NewInt32(tableName, "user_id")
	_accountUserLogin.UserActiveTime = field.NewInt64(tableName, "user_active_time")
	_accountUserLogin.UserRegIP = field.NewString(tableName, "user_reg_ip")
	_accountUserLogin.UserRegDate = field.NewTime(tableName, "user_reg_date")
	_accountUserLogin.UserRegTime = field.NewInt64(tableName, "user_reg_time")
	_accountUserLogin.UserCountLogin = field.NewInt32(tableName, "user_count_login")
	_accountUserLogin.UserLastloginIP = field.NewString(tableName, "user_lastlogin_ip")
	_accountUserLogin.UserLastloginTime = field.NewInt64(tableName, "user_lastlogin_time")
	_accountUserLogin.UserClientid = field.NewString(tableName, "user_clientid")

	_accountUserLogin.fillFieldMap()

	return _accountUserLogin
}

// accountUserLogin 用户登录信息表
type accountUserLogin struct {
	accountUserLoginDo accountUserLoginDo

	ALL               field.Asterisk
	UserID            field.Int32  // 用户编号
	UserActiveTime    field.Int64  // 激活时间
	UserRegIP         field.String // 注册IP
	UserRegDate       field.Time   // 注册日期
	UserRegTime       field.Int64  // 注册时间
	UserCountLogin    field.Int32  // 登录次数
	UserLastloginIP   field.String // 上次登录IP
	UserLastloginTime field.Int64  // 上次登录时间
	UserClientid      field.String // APPCID(DOT)

	fieldMap map[string]field.Expr
}

func (a accountUserLogin) Table(newTableName string) *accountUserLogin {
	a.accountUserLoginDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a accountUserLogin) As(alias string) *accountUserLogin {
	a.accountUserLoginDo.DO = *(a.accountUserLoginDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *accountUserLogin) updateTableName(table string) *accountUserLogin {
	a.ALL = field.NewAsterisk(table)
	a.UserID = field.NewInt32(table, "user_id")
	a.UserActiveTime = field.NewInt64(table, "user_active_time")
	a.UserRegIP = field.NewString(table, "user_reg_ip")
	a.UserRegDate = field.NewTime(table, "user_reg_date")
	a.UserRegTime = field.NewInt64(table, "user_reg_time")
	a.UserCountLogin = field.NewInt32(table, "user_count_login")
	a.UserLastloginIP = field.NewString(table, "user_lastlogin_ip")
	a.UserLastloginTime = field.NewInt64(table, "user_lastlogin_time")
	a.UserClientid = field.NewString(table, "user_clientid")

	a.fillFieldMap()

	return a
}

func (a *accountUserLogin) WithContext(ctx context.Context) *accountUserLoginDo {
	return a.accountUserLoginDo.WithContext(ctx)
}

func (a accountUserLogin) TableName() string { return a.accountUserLoginDo.TableName() }

func (a accountUserLogin) Alias() string { return a.accountUserLoginDo.Alias() }

func (a accountUserLogin) Columns(cols ...field.Expr) gen.Columns {
	return a.accountUserLoginDo.Columns(cols...)
}

func (a *accountUserLogin) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *accountUserLogin) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 9)
	a.fieldMap["user_id"] = a.UserID
	a.fieldMap["user_active_time"] = a.UserActiveTime
	a.fieldMap["user_reg_ip"] = a.UserRegIP
	a.fieldMap["user_reg_date"] = a.UserRegDate
	a.fieldMap["user_reg_time"] = a.UserRegTime
	a.fieldMap["user_count_login"] = a.UserCountLogin
	a.fieldMap["user_lastlogin_ip"] = a.UserLastloginIP
	a.fieldMap["user_lastlogin_time"] = a.UserLastloginTime
	a.fieldMap["user_clientid"] = a.UserClientid
}

func (a accountUserLogin) clone(db *gorm.DB) accountUserLogin {
	a.accountUserLoginDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a accountUserLogin) replaceDB(db *gorm.DB) accountUserLogin {
	a.accountUserLoginDo.ReplaceDB(db)
	return a
}

type accountUserLoginDo struct{ gen.DO }

func (a accountUserLoginDo) Debug() *accountUserLoginDo {
	return a.withDO(a.DO.Debug())
}

func (a accountUserLoginDo) WithContext(ctx context.Context) *accountUserLoginDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a accountUserLoginDo) ReadDB() *accountUserLoginDo {
	return a.Clauses(dbresolver.Read)
}

func (a accountUserLoginDo) WriteDB() *accountUserLoginDo {
	return a.Clauses(dbresolver.Write)
}

func (a accountUserLoginDo) Session(config *gorm.Session) *accountUserLoginDo {
	return a.withDO(a.DO.Session(config))
}

func (a accountUserLoginDo) Clauses(conds ...clause.Expression) *accountUserLoginDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a accountUserLoginDo) Returning(value interface{}, columns ...string) *accountUserLoginDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a accountUserLoginDo) Not(conds ...gen.Condition) *accountUserLoginDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a accountUserLoginDo) Or(conds ...gen.Condition) *accountUserLoginDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a accountUserLoginDo) Select(conds ...field.Expr) *accountUserLoginDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a accountUserLoginDo) Where(conds ...gen.Condition) *accountUserLoginDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a accountUserLoginDo) Order(conds ...field.Expr) *accountUserLoginDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a accountUserLoginDo) Distinct(cols ...field.Expr) *accountUserLoginDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a accountUserLoginDo) Omit(cols ...field.Expr) *accountUserLoginDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a accountUserLoginDo) Join(table schema.Tabler, on ...field.Expr) *accountUserLoginDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a accountUserLoginDo) LeftJoin(table schema.Tabler, on ...field.Expr) *accountUserLoginDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a accountUserLoginDo) RightJoin(table schema.Tabler, on ...field.Expr) *accountUserLoginDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a accountUserLoginDo) Group(cols ...field.Expr) *accountUserLoginDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a accountUserLoginDo) Having(conds ...gen.Condition) *accountUserLoginDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a accountUserLoginDo) Limit(limit int) *accountUserLoginDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a accountUserLoginDo) Offset(offset int) *accountUserLoginDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a accountUserLoginDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *accountUserLoginDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a accountUserLoginDo) Unscoped() *accountUserLoginDo {
	return a.withDO(a.DO.Unscoped())
}

func (a accountUserLoginDo) Create(values ...*entity.AccountUserLogin) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a accountUserLoginDo) CreateInBatches(values []*entity.AccountUserLogin, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a accountUserLoginDo) Save(values ...*entity.AccountUserLogin) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a accountUserLoginDo) First() (*entity.AccountUserLogin, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.AccountUserLogin), nil
	}
}

func (a accountUserLoginDo) Take() (*entity.AccountUserLogin, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.AccountUserLogin), nil
	}
}

func (a accountUserLoginDo) Last() (*entity.AccountUserLogin, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.AccountUserLogin), nil
	}
}

func (a accountUserLoginDo) Find() ([]*entity.AccountUserLogin, error) {
	result, err := a.DO.Find()
	return result.([]*entity.AccountUserLogin), err
}

func (a accountUserLoginDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.AccountUserLogin, err error) {
	buf := make([]*entity.AccountUserLogin, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a accountUserLoginDo) FindInBatches(result *[]*entity.AccountUserLogin, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a accountUserLoginDo) Attrs(attrs ...field.AssignExpr) *accountUserLoginDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a accountUserLoginDo) Assign(attrs ...field.AssignExpr) *accountUserLoginDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a accountUserLoginDo) Joins(fields ...field.RelationField) *accountUserLoginDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a accountUserLoginDo) Preload(fields ...field.RelationField) *accountUserLoginDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a accountUserLoginDo) FirstOrInit() (*entity.AccountUserLogin, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.AccountUserLogin), nil
	}
}

func (a accountUserLoginDo) FirstOrCreate() (*entity.AccountUserLogin, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.AccountUserLogin), nil
	}
}

func (a accountUserLoginDo) FindByPage(offset int, limit int) (result []*entity.AccountUserLogin, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a accountUserLoginDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a accountUserLoginDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a accountUserLoginDo) Delete(models ...*entity.AccountUserLogin) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *accountUserLoginDo) withDO(do gen.Dao) *accountUserLoginDo {
	a.DO = *do.(*gen.DO)
	return a
}
