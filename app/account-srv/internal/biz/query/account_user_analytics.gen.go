// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"shopx/app/account-srv/internal/biz/entity"
)

func newAccountUserAnalytic(db *gorm.DB, opts ...gen.DOOption) accountUserAnalytic {
	_accountUserAnalytic := accountUserAnalytic{}

	_accountUserAnalytic.accountUserAnalyticDo.UseDB(db, opts...)
	_accountUserAnalytic.accountUserAnalyticDo.UseModel(&entity.AccountUserAnalytic{})

	tableName := _accountUserAnalytic.accountUserAnalyticDo.TableName()
	_accountUserAnalytic.ALL = field.NewAsterisk(tableName)
	_accountUserAnalytic.UserID = field.NewInt32(tableName, "user_id")
	_accountUserAnalytic.UserSpend = field.NewFloat64(tableName, "user_spend")
	_accountUserAnalytic.UserRefund = field.NewFloat64(tableName, "user_refund")
	_accountUserAnalytic.UserOrderBuyNum = field.NewInt32(tableName, "user_order_buy_num")
	_accountUserAnalytic.UserOrderReturnNum = field.NewInt32(tableName, "user_order_return_num")
	_accountUserAnalytic.UserProductBuyNum = field.NewInt32(tableName, "user_product_buy_num")
	_accountUserAnalytic.UserProductReturnNum = field.NewInt32(tableName, "user_product_return_num")
	_accountUserAnalytic.Version = field.NewInt32(tableName, "version")

	_accountUserAnalytic.fillFieldMap()

	return _accountUserAnalytic
}

// accountUserAnalytic 用户角色信息表
type accountUserAnalytic struct {
	accountUserAnalyticDo accountUserAnalyticDo

	ALL                  field.Asterisk
	UserID               field.Int32   // 用户编号
	UserSpend            field.Float64 // 消费总额
	UserRefund           field.Float64 // 退款总额
	UserOrderBuyNum      field.Int32   // 有效订单数量
	UserOrderReturnNum   field.Int32   // 退单数量
	UserProductBuyNum    field.Int32   // 购买数量
	UserProductReturnNum field.Int32   // 退货数量
	Version              field.Int32   // 版本

	fieldMap map[string]field.Expr
}

func (a accountUserAnalytic) Table(newTableName string) *accountUserAnalytic {
	a.accountUserAnalyticDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a accountUserAnalytic) As(alias string) *accountUserAnalytic {
	a.accountUserAnalyticDo.DO = *(a.accountUserAnalyticDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *accountUserAnalytic) updateTableName(table string) *accountUserAnalytic {
	a.ALL = field.NewAsterisk(table)
	a.UserID = field.NewInt32(table, "user_id")
	a.UserSpend = field.NewFloat64(table, "user_spend")
	a.UserRefund = field.NewFloat64(table, "user_refund")
	a.UserOrderBuyNum = field.NewInt32(table, "user_order_buy_num")
	a.UserOrderReturnNum = field.NewInt32(table, "user_order_return_num")
	a.UserProductBuyNum = field.NewInt32(table, "user_product_buy_num")
	a.UserProductReturnNum = field.NewInt32(table, "user_product_return_num")
	a.Version = field.NewInt32(table, "version")

	a.fillFieldMap()

	return a
}

func (a *accountUserAnalytic) WithContext(ctx context.Context) *accountUserAnalyticDo {
	return a.accountUserAnalyticDo.WithContext(ctx)
}

func (a accountUserAnalytic) TableName() string { return a.accountUserAnalyticDo.TableName() }

func (a accountUserAnalytic) Alias() string { return a.accountUserAnalyticDo.Alias() }

func (a accountUserAnalytic) Columns(cols ...field.Expr) gen.Columns {
	return a.accountUserAnalyticDo.Columns(cols...)
}

func (a *accountUserAnalytic) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *accountUserAnalytic) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 8)
	a.fieldMap["user_id"] = a.UserID
	a.fieldMap["user_spend"] = a.UserSpend
	a.fieldMap["user_refund"] = a.UserRefund
	a.fieldMap["user_order_buy_num"] = a.UserOrderBuyNum
	a.fieldMap["user_order_return_num"] = a.UserOrderReturnNum
	a.fieldMap["user_product_buy_num"] = a.UserProductBuyNum
	a.fieldMap["user_product_return_num"] = a.UserProductReturnNum
	a.fieldMap["version"] = a.Version
}

func (a accountUserAnalytic) clone(db *gorm.DB) accountUserAnalytic {
	a.accountUserAnalyticDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a accountUserAnalytic) replaceDB(db *gorm.DB) accountUserAnalytic {
	a.accountUserAnalyticDo.ReplaceDB(db)
	return a
}

type accountUserAnalyticDo struct{ gen.DO }

func (a accountUserAnalyticDo) Debug() *accountUserAnalyticDo {
	return a.withDO(a.DO.Debug())
}

func (a accountUserAnalyticDo) WithContext(ctx context.Context) *accountUserAnalyticDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a accountUserAnalyticDo) ReadDB() *accountUserAnalyticDo {
	return a.Clauses(dbresolver.Read)
}

func (a accountUserAnalyticDo) WriteDB() *accountUserAnalyticDo {
	return a.Clauses(dbresolver.Write)
}

func (a accountUserAnalyticDo) Session(config *gorm.Session) *accountUserAnalyticDo {
	return a.withDO(a.DO.Session(config))
}

func (a accountUserAnalyticDo) Clauses(conds ...clause.Expression) *accountUserAnalyticDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a accountUserAnalyticDo) Returning(value interface{}, columns ...string) *accountUserAnalyticDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a accountUserAnalyticDo) Not(conds ...gen.Condition) *accountUserAnalyticDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a accountUserAnalyticDo) Or(conds ...gen.Condition) *accountUserAnalyticDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a accountUserAnalyticDo) Select(conds ...field.Expr) *accountUserAnalyticDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a accountUserAnalyticDo) Where(conds ...gen.Condition) *accountUserAnalyticDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a accountUserAnalyticDo) Order(conds ...field.Expr) *accountUserAnalyticDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a accountUserAnalyticDo) Distinct(cols ...field.Expr) *accountUserAnalyticDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a accountUserAnalyticDo) Omit(cols ...field.Expr) *accountUserAnalyticDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a accountUserAnalyticDo) Join(table schema.Tabler, on ...field.Expr) *accountUserAnalyticDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a accountUserAnalyticDo) LeftJoin(table schema.Tabler, on ...field.Expr) *accountUserAnalyticDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a accountUserAnalyticDo) RightJoin(table schema.Tabler, on ...field.Expr) *accountUserAnalyticDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a accountUserAnalyticDo) Group(cols ...field.Expr) *accountUserAnalyticDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a accountUserAnalyticDo) Having(conds ...gen.Condition) *accountUserAnalyticDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a accountUserAnalyticDo) Limit(limit int) *accountUserAnalyticDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a accountUserAnalyticDo) Offset(offset int) *accountUserAnalyticDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a accountUserAnalyticDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *accountUserAnalyticDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a accountUserAnalyticDo) Unscoped() *accountUserAnalyticDo {
	return a.withDO(a.DO.Unscoped())
}

func (a accountUserAnalyticDo) Create(values ...*entity.AccountUserAnalytic) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a accountUserAnalyticDo) CreateInBatches(values []*entity.AccountUserAnalytic, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a accountUserAnalyticDo) Save(values ...*entity.AccountUserAnalytic) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a accountUserAnalyticDo) First() (*entity.AccountUserAnalytic, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.AccountUserAnalytic), nil
	}
}

func (a accountUserAnalyticDo) Take() (*entity.AccountUserAnalytic, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.AccountUserAnalytic), nil
	}
}

func (a accountUserAnalyticDo) Last() (*entity.AccountUserAnalytic, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.AccountUserAnalytic), nil
	}
}

func (a accountUserAnalyticDo) Find() ([]*entity.AccountUserAnalytic, error) {
	result, err := a.DO.Find()
	return result.([]*entity.AccountUserAnalytic), err
}

func (a accountUserAnalyticDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.AccountUserAnalytic, err error) {
	buf := make([]*entity.AccountUserAnalytic, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a accountUserAnalyticDo) FindInBatches(result *[]*entity.AccountUserAnalytic, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a accountUserAnalyticDo) Attrs(attrs ...field.AssignExpr) *accountUserAnalyticDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a accountUserAnalyticDo) Assign(attrs ...field.AssignExpr) *accountUserAnalyticDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a accountUserAnalyticDo) Joins(fields ...field.RelationField) *accountUserAnalyticDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a accountUserAnalyticDo) Preload(fields ...field.RelationField) *accountUserAnalyticDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a accountUserAnalyticDo) FirstOrInit() (*entity.AccountUserAnalytic, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.AccountUserAnalytic), nil
	}
}

func (a accountUserAnalyticDo) FirstOrCreate() (*entity.AccountUserAnalytic, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.AccountUserAnalytic), nil
	}
}

func (a accountUserAnalyticDo) FindByPage(offset int, limit int) (result []*entity.AccountUserAnalytic, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a accountUserAnalyticDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a accountUserAnalyticDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a accountUserAnalyticDo) Delete(models ...*entity.AccountUserAnalytic) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *accountUserAnalyticDo) withDO(do gen.Dao) *accountUserAnalyticDo {
	a.DO = *do.(*gen.DO)
	return a
}
