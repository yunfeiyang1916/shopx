// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"shopx/app/account-srv/internal/biz/entity"
)

func newAccountUserZone(db *gorm.DB, opts ...gen.DOOption) accountUserZone {
	_accountUserZone := accountUserZone{}

	_accountUserZone.accountUserZoneDo.UseDB(db, opts...)
	_accountUserZone.accountUserZoneDo.UseModel(&entity.AccountUserZone{})

	tableName := _accountUserZone.accountUserZoneDo.TableName()
	_accountUserZone.ALL = field.NewAsterisk(tableName)
	_accountUserZone.ZoneID = field.NewInt32(tableName, "zone_id")
	_accountUserZone.ZoneName = field.NewString(tableName, "zone_name")
	_accountUserZone.ZoneType = field.NewInt32(tableName, "zone_type")
	_accountUserZone.ZonePermission = field.NewInt32(tableName, "zone_permission")
	_accountUserZone.ZoneDeclared = field.NewString(tableName, "zone_declared")
	_accountUserZone.UserID = field.NewInt32(tableName, "user_id")
	_accountUserZone.ZoneBindID = field.NewString(tableName, "zone_bind_id")
	_accountUserZone.ZoneUserNum = field.NewInt32(tableName, "zone_user_num")

	_accountUserZone.fillFieldMap()

	return _accountUserZone
}

// accountUserZone 群组
type accountUserZone struct {
	accountUserZoneDo accountUserZoneDo

	ALL            field.Asterisk
	ZoneID         field.Int32  // 好友组编号
	ZoneName       field.String // 群组名称
	ZoneType       field.Int32  // 群组类型(ENUM):0-临时组上限100人;  1-普通组上限300人; 2-VIP组 上限500人
	ZonePermission field.Int32  // 申请加入模式(ENUM): 0-默认直接加入; 1-需要身份验证; 2-私有群组
	ZoneDeclared   field.String // 群组公告
	UserID         field.Int32  // 管理员
	ZoneBindID     field.String // 第三方群组编号
	ZoneUserNum    field.Int32  // 人数

	fieldMap map[string]field.Expr
}

func (a accountUserZone) Table(newTableName string) *accountUserZone {
	a.accountUserZoneDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a accountUserZone) As(alias string) *accountUserZone {
	a.accountUserZoneDo.DO = *(a.accountUserZoneDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *accountUserZone) updateTableName(table string) *accountUserZone {
	a.ALL = field.NewAsterisk(table)
	a.ZoneID = field.NewInt32(table, "zone_id")
	a.ZoneName = field.NewString(table, "zone_name")
	a.ZoneType = field.NewInt32(table, "zone_type")
	a.ZonePermission = field.NewInt32(table, "zone_permission")
	a.ZoneDeclared = field.NewString(table, "zone_declared")
	a.UserID = field.NewInt32(table, "user_id")
	a.ZoneBindID = field.NewString(table, "zone_bind_id")
	a.ZoneUserNum = field.NewInt32(table, "zone_user_num")

	a.fillFieldMap()

	return a
}

func (a *accountUserZone) WithContext(ctx context.Context) *accountUserZoneDo {
	return a.accountUserZoneDo.WithContext(ctx)
}

func (a accountUserZone) TableName() string { return a.accountUserZoneDo.TableName() }

func (a accountUserZone) Alias() string { return a.accountUserZoneDo.Alias() }

func (a accountUserZone) Columns(cols ...field.Expr) gen.Columns {
	return a.accountUserZoneDo.Columns(cols...)
}

func (a *accountUserZone) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *accountUserZone) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 8)
	a.fieldMap["zone_id"] = a.ZoneID
	a.fieldMap["zone_name"] = a.ZoneName
	a.fieldMap["zone_type"] = a.ZoneType
	a.fieldMap["zone_permission"] = a.ZonePermission
	a.fieldMap["zone_declared"] = a.ZoneDeclared
	a.fieldMap["user_id"] = a.UserID
	a.fieldMap["zone_bind_id"] = a.ZoneBindID
	a.fieldMap["zone_user_num"] = a.ZoneUserNum
}

func (a accountUserZone) clone(db *gorm.DB) accountUserZone {
	a.accountUserZoneDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a accountUserZone) replaceDB(db *gorm.DB) accountUserZone {
	a.accountUserZoneDo.ReplaceDB(db)
	return a
}

type accountUserZoneDo struct{ gen.DO }

func (a accountUserZoneDo) Debug() *accountUserZoneDo {
	return a.withDO(a.DO.Debug())
}

func (a accountUserZoneDo) WithContext(ctx context.Context) *accountUserZoneDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a accountUserZoneDo) ReadDB() *accountUserZoneDo {
	return a.Clauses(dbresolver.Read)
}

func (a accountUserZoneDo) WriteDB() *accountUserZoneDo {
	return a.Clauses(dbresolver.Write)
}

func (a accountUserZoneDo) Session(config *gorm.Session) *accountUserZoneDo {
	return a.withDO(a.DO.Session(config))
}

func (a accountUserZoneDo) Clauses(conds ...clause.Expression) *accountUserZoneDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a accountUserZoneDo) Returning(value interface{}, columns ...string) *accountUserZoneDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a accountUserZoneDo) Not(conds ...gen.Condition) *accountUserZoneDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a accountUserZoneDo) Or(conds ...gen.Condition) *accountUserZoneDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a accountUserZoneDo) Select(conds ...field.Expr) *accountUserZoneDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a accountUserZoneDo) Where(conds ...gen.Condition) *accountUserZoneDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a accountUserZoneDo) Order(conds ...field.Expr) *accountUserZoneDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a accountUserZoneDo) Distinct(cols ...field.Expr) *accountUserZoneDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a accountUserZoneDo) Omit(cols ...field.Expr) *accountUserZoneDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a accountUserZoneDo) Join(table schema.Tabler, on ...field.Expr) *accountUserZoneDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a accountUserZoneDo) LeftJoin(table schema.Tabler, on ...field.Expr) *accountUserZoneDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a accountUserZoneDo) RightJoin(table schema.Tabler, on ...field.Expr) *accountUserZoneDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a accountUserZoneDo) Group(cols ...field.Expr) *accountUserZoneDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a accountUserZoneDo) Having(conds ...gen.Condition) *accountUserZoneDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a accountUserZoneDo) Limit(limit int) *accountUserZoneDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a accountUserZoneDo) Offset(offset int) *accountUserZoneDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a accountUserZoneDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *accountUserZoneDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a accountUserZoneDo) Unscoped() *accountUserZoneDo {
	return a.withDO(a.DO.Unscoped())
}

func (a accountUserZoneDo) Create(values ...*entity.AccountUserZone) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a accountUserZoneDo) CreateInBatches(values []*entity.AccountUserZone, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a accountUserZoneDo) Save(values ...*entity.AccountUserZone) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a accountUserZoneDo) First() (*entity.AccountUserZone, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.AccountUserZone), nil
	}
}

func (a accountUserZoneDo) Take() (*entity.AccountUserZone, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.AccountUserZone), nil
	}
}

func (a accountUserZoneDo) Last() (*entity.AccountUserZone, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.AccountUserZone), nil
	}
}

func (a accountUserZoneDo) Find() ([]*entity.AccountUserZone, error) {
	result, err := a.DO.Find()
	return result.([]*entity.AccountUserZone), err
}

func (a accountUserZoneDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.AccountUserZone, err error) {
	buf := make([]*entity.AccountUserZone, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a accountUserZoneDo) FindInBatches(result *[]*entity.AccountUserZone, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a accountUserZoneDo) Attrs(attrs ...field.AssignExpr) *accountUserZoneDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a accountUserZoneDo) Assign(attrs ...field.AssignExpr) *accountUserZoneDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a accountUserZoneDo) Joins(fields ...field.RelationField) *accountUserZoneDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a accountUserZoneDo) Preload(fields ...field.RelationField) *accountUserZoneDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a accountUserZoneDo) FirstOrInit() (*entity.AccountUserZone, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.AccountUserZone), nil
	}
}

func (a accountUserZoneDo) FirstOrCreate() (*entity.AccountUserZone, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.AccountUserZone), nil
	}
}

func (a accountUserZoneDo) FindByPage(offset int, limit int) (result []*entity.AccountUserZone, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a accountUserZoneDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a accountUserZoneDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a accountUserZoneDo) Delete(models ...*entity.AccountUserZone) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *accountUserZoneDo) withDO(do gen.Dao) *accountUserZoneDo {
	a.DO = *do.(*gen.DO)
	return a
}
