// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"shopx/app/account-srv/internal/biz/entity"
)

func newAccountUserZoneRel(db *gorm.DB, opts ...gen.DOOption) accountUserZoneRel {
	_accountUserZoneRel := accountUserZoneRel{}

	_accountUserZoneRel.accountUserZoneRelDo.UseDB(db, opts...)
	_accountUserZoneRel.accountUserZoneRelDo.UseModel(&entity.AccountUserZoneRel{})

	tableName := _accountUserZoneRel.accountUserZoneRelDo.TableName()
	_accountUserZoneRel.ALL = field.NewAsterisk(tableName)
	_accountUserZoneRel.ZoneRelID = field.NewInt32(tableName, "zone_rel_id")
	_accountUserZoneRel.ZoneID = field.NewInt32(tableName, "zone_id")
	_accountUserZoneRel.UserID = field.NewInt32(tableName, "user_id")
	_accountUserZoneRel.ZoneRelPermission = field.NewInt32(tableName, "zone_rel_permission")

	_accountUserZoneRel.fillFieldMap()

	return _accountUserZoneRel
}

// accountUserZoneRel 群组用户关系表
type accountUserZoneRel struct {
	accountUserZoneRelDo accountUserZoneRelDo

	ALL               field.Asterisk
	ZoneRelID         field.Int32 // 关系编号
	ZoneID            field.Int32 // 群组编号
	UserID            field.Int32 // 用户
	ZoneRelPermission field.Int32 // 申请加入模式(ENUM): 0-加入; 1-待验证;

	fieldMap map[string]field.Expr
}

func (a accountUserZoneRel) Table(newTableName string) *accountUserZoneRel {
	a.accountUserZoneRelDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a accountUserZoneRel) As(alias string) *accountUserZoneRel {
	a.accountUserZoneRelDo.DO = *(a.accountUserZoneRelDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *accountUserZoneRel) updateTableName(table string) *accountUserZoneRel {
	a.ALL = field.NewAsterisk(table)
	a.ZoneRelID = field.NewInt32(table, "zone_rel_id")
	a.ZoneID = field.NewInt32(table, "zone_id")
	a.UserID = field.NewInt32(table, "user_id")
	a.ZoneRelPermission = field.NewInt32(table, "zone_rel_permission")

	a.fillFieldMap()

	return a
}

func (a *accountUserZoneRel) WithContext(ctx context.Context) *accountUserZoneRelDo {
	return a.accountUserZoneRelDo.WithContext(ctx)
}

func (a accountUserZoneRel) TableName() string { return a.accountUserZoneRelDo.TableName() }

func (a accountUserZoneRel) Alias() string { return a.accountUserZoneRelDo.Alias() }

func (a accountUserZoneRel) Columns(cols ...field.Expr) gen.Columns {
	return a.accountUserZoneRelDo.Columns(cols...)
}

func (a *accountUserZoneRel) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *accountUserZoneRel) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 4)
	a.fieldMap["zone_rel_id"] = a.ZoneRelID
	a.fieldMap["zone_id"] = a.ZoneID
	a.fieldMap["user_id"] = a.UserID
	a.fieldMap["zone_rel_permission"] = a.ZoneRelPermission
}

func (a accountUserZoneRel) clone(db *gorm.DB) accountUserZoneRel {
	a.accountUserZoneRelDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a accountUserZoneRel) replaceDB(db *gorm.DB) accountUserZoneRel {
	a.accountUserZoneRelDo.ReplaceDB(db)
	return a
}

type accountUserZoneRelDo struct{ gen.DO }

func (a accountUserZoneRelDo) Debug() *accountUserZoneRelDo {
	return a.withDO(a.DO.Debug())
}

func (a accountUserZoneRelDo) WithContext(ctx context.Context) *accountUserZoneRelDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a accountUserZoneRelDo) ReadDB() *accountUserZoneRelDo {
	return a.Clauses(dbresolver.Read)
}

func (a accountUserZoneRelDo) WriteDB() *accountUserZoneRelDo {
	return a.Clauses(dbresolver.Write)
}

func (a accountUserZoneRelDo) Session(config *gorm.Session) *accountUserZoneRelDo {
	return a.withDO(a.DO.Session(config))
}

func (a accountUserZoneRelDo) Clauses(conds ...clause.Expression) *accountUserZoneRelDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a accountUserZoneRelDo) Returning(value interface{}, columns ...string) *accountUserZoneRelDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a accountUserZoneRelDo) Not(conds ...gen.Condition) *accountUserZoneRelDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a accountUserZoneRelDo) Or(conds ...gen.Condition) *accountUserZoneRelDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a accountUserZoneRelDo) Select(conds ...field.Expr) *accountUserZoneRelDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a accountUserZoneRelDo) Where(conds ...gen.Condition) *accountUserZoneRelDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a accountUserZoneRelDo) Order(conds ...field.Expr) *accountUserZoneRelDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a accountUserZoneRelDo) Distinct(cols ...field.Expr) *accountUserZoneRelDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a accountUserZoneRelDo) Omit(cols ...field.Expr) *accountUserZoneRelDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a accountUserZoneRelDo) Join(table schema.Tabler, on ...field.Expr) *accountUserZoneRelDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a accountUserZoneRelDo) LeftJoin(table schema.Tabler, on ...field.Expr) *accountUserZoneRelDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a accountUserZoneRelDo) RightJoin(table schema.Tabler, on ...field.Expr) *accountUserZoneRelDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a accountUserZoneRelDo) Group(cols ...field.Expr) *accountUserZoneRelDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a accountUserZoneRelDo) Having(conds ...gen.Condition) *accountUserZoneRelDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a accountUserZoneRelDo) Limit(limit int) *accountUserZoneRelDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a accountUserZoneRelDo) Offset(offset int) *accountUserZoneRelDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a accountUserZoneRelDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *accountUserZoneRelDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a accountUserZoneRelDo) Unscoped() *accountUserZoneRelDo {
	return a.withDO(a.DO.Unscoped())
}

func (a accountUserZoneRelDo) Create(values ...*entity.AccountUserZoneRel) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a accountUserZoneRelDo) CreateInBatches(values []*entity.AccountUserZoneRel, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a accountUserZoneRelDo) Save(values ...*entity.AccountUserZoneRel) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a accountUserZoneRelDo) First() (*entity.AccountUserZoneRel, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.AccountUserZoneRel), nil
	}
}

func (a accountUserZoneRelDo) Take() (*entity.AccountUserZoneRel, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.AccountUserZoneRel), nil
	}
}

func (a accountUserZoneRelDo) Last() (*entity.AccountUserZoneRel, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.AccountUserZoneRel), nil
	}
}

func (a accountUserZoneRelDo) Find() ([]*entity.AccountUserZoneRel, error) {
	result, err := a.DO.Find()
	return result.([]*entity.AccountUserZoneRel), err
}

func (a accountUserZoneRelDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.AccountUserZoneRel, err error) {
	buf := make([]*entity.AccountUserZoneRel, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a accountUserZoneRelDo) FindInBatches(result *[]*entity.AccountUserZoneRel, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a accountUserZoneRelDo) Attrs(attrs ...field.AssignExpr) *accountUserZoneRelDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a accountUserZoneRelDo) Assign(attrs ...field.AssignExpr) *accountUserZoneRelDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a accountUserZoneRelDo) Joins(fields ...field.RelationField) *accountUserZoneRelDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a accountUserZoneRelDo) Preload(fields ...field.RelationField) *accountUserZoneRelDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a accountUserZoneRelDo) FirstOrInit() (*entity.AccountUserZoneRel, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.AccountUserZoneRel), nil
	}
}

func (a accountUserZoneRelDo) FirstOrCreate() (*entity.AccountUserZoneRel, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.AccountUserZoneRel), nil
	}
}

func (a accountUserZoneRelDo) FindByPage(offset int, limit int) (result []*entity.AccountUserZoneRel, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a accountUserZoneRelDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a accountUserZoneRelDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a accountUserZoneRelDo) Delete(models ...*entity.AccountUserZoneRel) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *accountUserZoneRelDo) withDO(do gen.Dao) *accountUserZoneRelDo {
	a.DO = *do.(*gen.DO)
	return a
}
