// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"shopx/app/account-srv/internal/biz/entity"
)

func newAccountUserGroupRel(db *gorm.DB, opts ...gen.DOOption) accountUserGroupRel {
	_accountUserGroupRel := accountUserGroupRel{}

	_accountUserGroupRel.accountUserGroupRelDo.UseDB(db, opts...)
	_accountUserGroupRel.accountUserGroupRelDo.UseModel(&entity.AccountUserGroupRel{})

	tableName := _accountUserGroupRel.accountUserGroupRelDo.TableName()
	_accountUserGroupRel.ALL = field.NewAsterisk(tableName)
	_accountUserGroupRel.GroupRelID = field.NewInt32(tableName, "group_rel_id")
	_accountUserGroupRel.GroupID = field.NewInt32(tableName, "group_id")
	_accountUserGroupRel.UserID = field.NewInt32(tableName, "user_id")

	_accountUserGroupRel.fillFieldMap()

	return _accountUserGroupRel
}

// accountUserGroupRel 好友组关系
type accountUserGroupRel struct {
	accountUserGroupRelDo accountUserGroupRelDo

	ALL        field.Asterisk
	GroupRelID field.Int32 // 好友组编号
	GroupID    field.Int32 // 组名称
	UserID     field.Int32 // 用户

	fieldMap map[string]field.Expr
}

func (a accountUserGroupRel) Table(newTableName string) *accountUserGroupRel {
	a.accountUserGroupRelDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a accountUserGroupRel) As(alias string) *accountUserGroupRel {
	a.accountUserGroupRelDo.DO = *(a.accountUserGroupRelDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *accountUserGroupRel) updateTableName(table string) *accountUserGroupRel {
	a.ALL = field.NewAsterisk(table)
	a.GroupRelID = field.NewInt32(table, "group_rel_id")
	a.GroupID = field.NewInt32(table, "group_id")
	a.UserID = field.NewInt32(table, "user_id")

	a.fillFieldMap()

	return a
}

func (a *accountUserGroupRel) WithContext(ctx context.Context) *accountUserGroupRelDo {
	return a.accountUserGroupRelDo.WithContext(ctx)
}

func (a accountUserGroupRel) TableName() string { return a.accountUserGroupRelDo.TableName() }

func (a accountUserGroupRel) Alias() string { return a.accountUserGroupRelDo.Alias() }

func (a accountUserGroupRel) Columns(cols ...field.Expr) gen.Columns {
	return a.accountUserGroupRelDo.Columns(cols...)
}

func (a *accountUserGroupRel) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *accountUserGroupRel) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 3)
	a.fieldMap["group_rel_id"] = a.GroupRelID
	a.fieldMap["group_id"] = a.GroupID
	a.fieldMap["user_id"] = a.UserID
}

func (a accountUserGroupRel) clone(db *gorm.DB) accountUserGroupRel {
	a.accountUserGroupRelDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a accountUserGroupRel) replaceDB(db *gorm.DB) accountUserGroupRel {
	a.accountUserGroupRelDo.ReplaceDB(db)
	return a
}

type accountUserGroupRelDo struct{ gen.DO }

func (a accountUserGroupRelDo) Debug() *accountUserGroupRelDo {
	return a.withDO(a.DO.Debug())
}

func (a accountUserGroupRelDo) WithContext(ctx context.Context) *accountUserGroupRelDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a accountUserGroupRelDo) ReadDB() *accountUserGroupRelDo {
	return a.Clauses(dbresolver.Read)
}

func (a accountUserGroupRelDo) WriteDB() *accountUserGroupRelDo {
	return a.Clauses(dbresolver.Write)
}

func (a accountUserGroupRelDo) Session(config *gorm.Session) *accountUserGroupRelDo {
	return a.withDO(a.DO.Session(config))
}

func (a accountUserGroupRelDo) Clauses(conds ...clause.Expression) *accountUserGroupRelDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a accountUserGroupRelDo) Returning(value interface{}, columns ...string) *accountUserGroupRelDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a accountUserGroupRelDo) Not(conds ...gen.Condition) *accountUserGroupRelDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a accountUserGroupRelDo) Or(conds ...gen.Condition) *accountUserGroupRelDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a accountUserGroupRelDo) Select(conds ...field.Expr) *accountUserGroupRelDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a accountUserGroupRelDo) Where(conds ...gen.Condition) *accountUserGroupRelDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a accountUserGroupRelDo) Order(conds ...field.Expr) *accountUserGroupRelDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a accountUserGroupRelDo) Distinct(cols ...field.Expr) *accountUserGroupRelDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a accountUserGroupRelDo) Omit(cols ...field.Expr) *accountUserGroupRelDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a accountUserGroupRelDo) Join(table schema.Tabler, on ...field.Expr) *accountUserGroupRelDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a accountUserGroupRelDo) LeftJoin(table schema.Tabler, on ...field.Expr) *accountUserGroupRelDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a accountUserGroupRelDo) RightJoin(table schema.Tabler, on ...field.Expr) *accountUserGroupRelDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a accountUserGroupRelDo) Group(cols ...field.Expr) *accountUserGroupRelDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a accountUserGroupRelDo) Having(conds ...gen.Condition) *accountUserGroupRelDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a accountUserGroupRelDo) Limit(limit int) *accountUserGroupRelDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a accountUserGroupRelDo) Offset(offset int) *accountUserGroupRelDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a accountUserGroupRelDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *accountUserGroupRelDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a accountUserGroupRelDo) Unscoped() *accountUserGroupRelDo {
	return a.withDO(a.DO.Unscoped())
}

func (a accountUserGroupRelDo) Create(values ...*entity.AccountUserGroupRel) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a accountUserGroupRelDo) CreateInBatches(values []*entity.AccountUserGroupRel, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a accountUserGroupRelDo) Save(values ...*entity.AccountUserGroupRel) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a accountUserGroupRelDo) First() (*entity.AccountUserGroupRel, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.AccountUserGroupRel), nil
	}
}

func (a accountUserGroupRelDo) Take() (*entity.AccountUserGroupRel, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.AccountUserGroupRel), nil
	}
}

func (a accountUserGroupRelDo) Last() (*entity.AccountUserGroupRel, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.AccountUserGroupRel), nil
	}
}

func (a accountUserGroupRelDo) Find() ([]*entity.AccountUserGroupRel, error) {
	result, err := a.DO.Find()
	return result.([]*entity.AccountUserGroupRel), err
}

func (a accountUserGroupRelDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.AccountUserGroupRel, err error) {
	buf := make([]*entity.AccountUserGroupRel, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a accountUserGroupRelDo) FindInBatches(result *[]*entity.AccountUserGroupRel, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a accountUserGroupRelDo) Attrs(attrs ...field.AssignExpr) *accountUserGroupRelDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a accountUserGroupRelDo) Assign(attrs ...field.AssignExpr) *accountUserGroupRelDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a accountUserGroupRelDo) Joins(fields ...field.RelationField) *accountUserGroupRelDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a accountUserGroupRelDo) Preload(fields ...field.RelationField) *accountUserGroupRelDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a accountUserGroupRelDo) FirstOrInit() (*entity.AccountUserGroupRel, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.AccountUserGroupRel), nil
	}
}

func (a accountUserGroupRelDo) FirstOrCreate() (*entity.AccountUserGroupRel, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.AccountUserGroupRel), nil
	}
}

func (a accountUserGroupRelDo) FindByPage(offset int, limit int) (result []*entity.AccountUserGroupRel, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a accountUserGroupRelDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a accountUserGroupRelDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a accountUserGroupRelDo) Delete(models ...*entity.AccountUserGroupRel) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *accountUserGroupRelDo) withDO(do gen.Dao) *accountUserGroupRelDo {
	a.DO = *do.(*gen.DO)
	return a
}
